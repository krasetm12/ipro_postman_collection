{
	"info": {
		"_postman_id": "075bb719-99ff-4bb2-8362-672852bb86cd",
		"name": "ipro3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12934881",
		"_collection_link": "https://warped-crescent-784998.postman.co/workspace/My-Workspace~335a6d73-ec43-485b-8ceb-df6b301c8007/collection/12934881-075bb719-99ff-4bb2-8362-672852bb86cd?action=share&source=collection_link&creator=12934881"
	},
	"item": [
		{
			"name": "basket",
			"item": [
				{
					"name": "login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Session management using session tokens forks\r",
									"var sessionToken;\r",
									"pm.test(\"Login and session management\", function () {\r",
									"    // Perform login and extract session token from the response\r",
									"    sessionToken = pm.response.json().data.session;\r",
									"    pm.environment.set(\"sessionToken\", sessionToken);\r",
									"});\r",
									"console.log(sessionToken);\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "log",
									"value": "60004392kal",
									"type": "text"
								},
								{
									"key": "pwd",
									"value": "qakras123",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{host1}}/api/ipro/user/login",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "session",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check session\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/user/session/get?session-id={{sessionToken}}",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"user",
								"session",
								"get"
							],
							"query": [
								{
									"key": "session-id",
									"value": "{{sessionToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "infocity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check infocity\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/info/city?session-id={{sessionToken}}",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"info",
								"city"
							],
							"query": [
								{
									"key": "session-id",
									"value": "{{sessionToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "class810",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check class810\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/info/class/810?len=3",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"info",
								"class",
								"810"
							],
							"query": [
								{
									"key": "len",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check profile\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/user/profile?session-id={{sessionToken}}",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"user",
								"profile"
							],
							"query": [
								{
									"key": "session-id",
									"value": "{{sessionToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "sumbasket",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check sumbasket\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/basket/sum?session-id={{sessionToken}}",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"basket",
								"sum"
							],
							"query": [
								{
									"key": "session-id",
									"value": "{{sessionToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "alert-count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check alertcount\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/user/alert/count?session-id={{sessionToken}}",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"user",
								"alert",
								"count"
							],
							"query": [
								{
									"key": "session-id",
									"value": "{{sessionToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "infocitycode",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check infocitycode\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/info/city/78?{{sessionToken}}",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"info",
								"city",
								"78"
							],
							"query": [
								{
									"key": "{{sessionToken}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "bonusinfo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check bonusinfo\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/bonus/info?session-id={{sessionToken}}",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"bonus",
								"info"
							],
							"query": [
								{
									"key": "session-id",
									"value": "{{sessionToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "infostores",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check infostores\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/info/stores?session-id={{sessionToken}}&class17=%D0%A1%D0%97%D0%A1%D0%9F%D0%91",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"info",
								"stores"
							],
							"query": [
								{
									"key": "session-id",
									"value": "{{sessionToken}}"
								},
								{
									"key": "class17",
									"value": "%D0%A1%D0%97%D0%A1%D0%9F%D0%91"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "consignee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check sign- consignee\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/client/sign?sg-code=171&session-id={{sessionToken}}",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"client",
								"sign"
							],
							"query": [
								{
									"key": "sg-code",
									"value": "171"
								},
								{
									"key": "session-id",
									"value": "{{sessionToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "client-banks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check infostores\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/client/banks?session-id={{sessionToken}}",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"client",
								"banks"
							],
							"query": [
								{
									"key": "session-id",
									"value": "{{sessionToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog-val",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check catalog-val\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 1500ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/catalog?val=%D0%B0%D0%BD%D0%BA%D0%B5%D1%80",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"catalog"
							],
							"query": [
								{
									"key": "val",
									"value": "%D0%B0%D0%BD%D0%BA%D0%B5%D1%80"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog-subcat_brands",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check subcat_brands\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/catalog/subcat_brands?val=%D0%B0%D0%BD%D0%BA%D0%B5%D1%80",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"catalog",
								"subcat_brands"
							],
							"query": [
								{
									"key": "val",
									"value": "%D0%B0%D0%BD%D0%BA%D0%B5%D1%80"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "basket-add",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check basket_add\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 2000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "session-id",
									"value": "{{sessionToken}}",
									"type": "text"
								},
								{
									"key": "city",
									"value": "78",
									"type": "text"
								},
								{
									"key": "gds",
									"value": "9091760-0-0",
									"type": "text"
								},
								{
									"key": "val",
									"value": "1",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{host1}}/api/ipro/basket/add",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"basket",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "basket-skl",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check basket\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/basket?skl=&session-id={{sessionToken}}",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"basket"
							],
							"query": [
								{
									"key": "skl",
									"value": ""
								},
								{
									"key": "session-id",
									"value": "{{sessionToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "basket-order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check basket-order\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/basket/order?skl=&goods=&session-id={{sessionToken}}",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"basket",
								"order"
							],
							"query": [
								{
									"key": "skl",
									"value": ""
								},
								{
									"key": "goods",
									"value": ""
								},
								{
									"key": "session-id",
									"value": "{{sessionToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "client/table/warehouse",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check client/table/warehouse\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/client/table/warehouse?rows=1000&cli-code=60004392&session-id={{sessionToken}}&sidx=clt_desc&sord=asc",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"client",
								"table",
								"warehouse"
							],
							"query": [
								{
									"key": "rows",
									"value": "1000"
								},
								{
									"key": "cli-code",
									"value": "60004392"
								},
								{
									"key": "session-id",
									"value": "{{sessionToken}}"
								},
								{
									"key": "sidx",
									"value": "clt_desc"
								},
								{
									"key": "sord",
									"value": "asc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "client/table/division",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check client/table/division\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/client/table/division?rows=1000&cli-code=60004392&session-id={{sessionToken}}&sidx=clt_desc&sord=asc",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"client",
								"table",
								"division"
							],
							"query": [
								{
									"key": "rows",
									"value": "1000"
								},
								{
									"key": "cli-code",
									"value": "60004392"
								},
								{
									"key": "session-id",
									"value": "{{sessionToken}}"
								},
								{
									"key": "sidx",
									"value": "clt_desc"
								},
								{
									"key": "sord",
									"value": "asc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "client/table/order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check client/table/order\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/client/table/order?rows=1000&cli-code=60004392&session-id={{sessionToken}}&sidx=clt_desc&sord=asc",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"client",
								"table",
								"order"
							],
							"query": [
								{
									"key": "rows",
									"value": "1000"
								},
								{
									"key": "cli-code",
									"value": "60004392"
								},
								{
									"key": "session-id",
									"value": "{{sessionToken}}"
								},
								{
									"key": "sidx",
									"value": "clt_desc"
								},
								{
									"key": "sord",
									"value": "asc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "goods/9091760/remains",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check goods/9091760/remains\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/goods/{{product}}/remains?session-id={{sessionToken}}",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"goods",
								"{{product}}",
								"remains"
							],
							"query": [
								{
									"key": "session-id",
									"value": "{{sessionToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "goods/9091760/packs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check goods/9091760/packs\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/goods/{{product}}/packs?skl=&session-id={{sessionToken}}",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"goods",
								"{{product}}",
								"packs"
							],
							"query": [
								{
									"key": "skl",
									"value": ""
								},
								{
									"key": "session-id",
									"value": "{{sessionToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "goods/9091760/prices",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check goods/9091760/prices\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/goods/{{product}}/prices?session-id={{sessionToken}}",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"goods",
								"{{product}}",
								"prices"
							],
							"query": [
								{
									"key": "session-id",
									"value": "{{sessionToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "basket/specification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check basket/specification\r",
									"var docName;\r",
									"pm.test(\"create specification\", function () {\r",
									"    // Perform login and extract session token from the response\r",
									"    docName = pm.response.json().data.docName;\r",
									"    pm.environment.set(\"docName\", docName);\r",
									"});\r",
									"console.log(docName);\r",
									"\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 2000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/basket/specification?tovzak=&i_dogovor=000120230525093554&i_accnt=&skl=4120&i_gruz=&reqDisc=&pr_object=&session-id={{sessionToken}}",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"basket",
								"specification"
							],
							"query": [
								{
									"key": "tovzak",
									"value": ""
								},
								{
									"key": "i_dogovor",
									"value": "000120230525093554"
								},
								{
									"key": "i_accnt",
									"value": ""
								},
								{
									"key": "skl",
									"value": "4120"
								},
								{
									"key": "i_gruz",
									"value": ""
								},
								{
									"key": "reqDisc",
									"value": ""
								},
								{
									"key": "pr_object",
									"value": ""
								},
								{
									"key": "session-id",
									"value": "{{sessionToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "upload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//upload\r",
									"var file_name;\r",
									"pm.test(\"create specification spec price\", function () {\r",
									"// Perform file_name and extract file_name from the response\r",
									"    file_name = pm.response.json().file_name;\r",
									"    pm.collectionVariables.set(\"file_name\", file_name);\r",
									"});\r",
									"console.log(file_name);\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 2000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "num",
									"value": "{{$randomInt}}",
									"type": "text"
								},
								{
									"key": "rc",
									"value": "competitor",
									"type": "text"
								},
								{
									"key": "fileToUpload",
									"type": "file",
									"src": "postman-cloud:///1eed612c-bfc7-47a0-9a0d-2b4d95fe5b42"
								},
								{
									"key": "session-id",
									"value": "{{sessionToken}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{host1}}/api/ipro/file/upload",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"file",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "basket-add-spec_price",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check basket_add\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 2000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "session-id",
									"value": "{{sessionToken}}",
									"type": "text"
								},
								{
									"key": "city",
									"value": "78",
									"type": "text"
								},
								{
									"key": "gds",
									"value": "9091760-0-0",
									"type": "text"
								},
								{
									"key": "val",
									"value": "1",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{host1}}/api/ipro/basket/add",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"basket",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "basket/specification-spec_price",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check basket/specification-spec_price\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 2000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/basket/specification?tovzak=&i_dogovor=000120230525093554&i_accnt=&skl=4120&i_gruz=&reqDisc=comp&pr_object=&session-id={{sessionToken}}&compPrice=compPrice3=1&compCode=1130339&file={{file_name}}",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"basket",
								"specification"
							],
							"query": [
								{
									"key": "tovzak",
									"value": ""
								},
								{
									"key": "i_dogovor",
									"value": "000120230525093554"
								},
								{
									"key": "i_accnt",
									"value": ""
								},
								{
									"key": "skl",
									"value": "4120"
								},
								{
									"key": "i_gruz",
									"value": ""
								},
								{
									"key": "reqDisc",
									"value": "comp"
								},
								{
									"key": "pr_object",
									"value": ""
								},
								{
									"key": "session-id",
									"value": "{{sessionToken}}"
								},
								{
									"key": "compPrice",
									"value": "compPrice3=1"
								},
								{
									"key": "compCode",
									"value": "1130339"
								},
								{
									"key": "file",
									"value": "{{file_name}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "pickup-payment",
			"item": [
				{
					"name": "bill",
					"item": [
						{
							"name": "OP",
							"item": [
								{
									"name": "basket-add-check-orderOP",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//check basket_add\r",
													"pm.test('valid response format json', function () {\r",
													"    pm.response.to.have.jsonBody();\r",
													"});\r",
													"\r",
													"pm.test(\"status code 200 in body of json\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status.code).to.equal(200);\r",
													"});\r",
													"pm.test('Response is valid JSON', function () {\r",
													"    pm.expect(pm.response.json()).to.be.an('object');\r",
													"});\r",
													"pm.test('Response time is less than 2000ms', function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "session-id",
													"value": "{{sessionToken}}",
													"type": "text"
												},
												{
													"key": "city",
													"value": "78",
													"type": "text"
												},
												{
													"key": "gds",
													"value": "{{gds}}",
													"type": "text"
												},
												{
													"key": "val",
													"value": "1",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://{{host1}}/api/ipro/basket/add",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"basket",
												"add"
											]
										}
									},
									"response": []
								},
								{
									"name": "basket/order-pickupOP-bill",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//check basket/order-pickupOP\r",
													"pm.test('valid response format json', function () {\r",
													"    pm.response.to.have.jsonBody();\r",
													"});\r",
													"\r",
													"pm.test(\"status code 200 in body of json\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status.code).to.equal(200);\r",
													"});\r",
													"pm.test('Response is valid JSON', function () {\r",
													"    pm.expect(pm.response.json()).to.be.an('object');\r",
													"});\r",
													"pm.test('Response time is less than 1000ms', function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "session-id",
												"value": "{{sessionToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://{{host1}}/api/ipro/basket/order?skl=100&i_dogovor=000120230525093554&pay-type=bill&s_rnd=r1&qdeliv_method=separate_line",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"basket",
												"order"
											],
											"query": [
												{
													"key": "skl",
													"value": "100"
												},
												{
													"key": "i_dogovor",
													"value": "000120230525093554"
												},
												{
													"key": "pay-type",
													"value": "bill"
												},
												{
													"key": "s_rnd",
													"value": "r1"
												},
												{
													"key": "qdeliv_method",
													"value": "separate_line"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "LC",
							"item": [
								{
									"name": "basket-add-check-order -LC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//check basket_add-LC\r",
													"pm.test('valid response format json', function () {\r",
													"    pm.response.to.have.jsonBody();\r",
													"});\r",
													"\r",
													"pm.test(\"status code 200 in body of json\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status.code).to.equal(200);\r",
													"});\r",
													"pm.test('Response is valid JSON', function () {\r",
													"    pm.expect(pm.response.json()).to.be.an('object');\r",
													"});\r",
													"pm.test('Response time is less than 2000ms', function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "session-id",
													"value": "{{sessionToken}}",
													"type": "text"
												},
												{
													"key": "city",
													"value": "78",
													"type": "text"
												},
												{
													"key": "gds",
													"value": "{{gds}}",
													"type": "text"
												},
												{
													"key": "val",
													"value": "1",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://{{host1}}/api/ipro/basket/add",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"basket",
												"add"
											]
										}
									},
									"response": []
								},
								{
									"name": "basket/order-pickupLC-bill",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//check basket/order-pickupLC\r",
													"pm.test('valid response format json', function () {\r",
													"    pm.response.to.have.jsonBody();\r",
													"});\r",
													"\r",
													"pm.test(\"status code 200 in body of json\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status.code).to.equal(200);\r",
													"});\r",
													"pm.test('Response is valid JSON', function () {\r",
													"    pm.expect(pm.response.json()).to.be.an('object');\r",
													"});\r",
													"pm.test('Response time is less than 1000ms', function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "session-id",
												"value": "{{sessionToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://{{host1}}/api/ipro/basket/order?skl=4280&i_dogovor=000120230525093554&pay-type=bill&s_rnd=r1&qdeliv_method=separate_line",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"basket",
												"order"
											],
											"query": [
												{
													"key": "skl",
													"value": "4280"
												},
												{
													"key": "i_dogovor",
													"value": "000120230525093554"
												},
												{
													"key": "pay-type",
													"value": "bill"
												},
												{
													"key": "s_rnd",
													"value": "r1"
												},
												{
													"key": "qdeliv_method",
													"value": "separate_line"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "pay_card",
					"item": [
						{
							"name": "basket-add-check-order -LC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check basket_add-LC\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 2000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "session-id",
											"value": "{{sessionToken}}",
											"type": "text"
										},
										{
											"key": "city",
											"value": "78",
											"type": "text"
										},
										{
											"key": "gds",
											"value": "{{gds}}",
											"type": "text"
										},
										{
											"key": "val",
											"value": "1",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{host1}}/api/ipro/basket/add",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"basket",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "basket/order-pickupLC-pay-card",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check basket/order-pickupLC-pay-card\r",
											"var doc_369_pay_card;\r",
											"pm.test(\"create order cdek doc369\", function () {\r",
											"// Perform pay_doc_369 and extract doc_369 from the response\r",
											"    doc_369_pay_card=pm.response.json().data.doc_369;\r",
											"    pm.environment.set(\"doc_369_pay_card\", doc_369_pay_card);\r",
											"});\r",
											"var pay_doc1_pay_card;\r",
											"pm.test(\"create order cdek doc\", function () {\r",
											"// Perform pay_doc1 and extract pay_doc1 from the response\r",
											"    pay_doc1_pay_card=pm.response.json().data.pay_doc1;\r",
											"    pm.environment.set(\"pay_doc1_pay_card\", pay_doc1_pay_card);\r",
											"});\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "session-id",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{host1}}/api/ipro/basket/order?skl=4280&i_dogovor=000120230525093554&pay-type=card_now&s_rnd=r1&qdeliv_method=separate_line",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"basket",
										"order"
									],
									"query": [
										{
											"key": "skl",
											"value": "4280"
										},
										{
											"key": "i_dogovor",
											"value": "000120230525093554"
										},
										{
											"key": "pay-type",
											"value": "card_now"
										},
										{
											"key": "s_rnd",
											"value": "r1"
										},
										{
											"key": "qdeliv_method",
											"value": "separate_line"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "invoice/pay_doc1/pay_card",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//invoice/pay_doc1/pay_card\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/invoice/{{pay_doc1_pay_card}}/pay_card?type=ipro&returnUrl=https%3A%2F%2Fidev.etm.ru%2Fipro3%2Fpayment%2Fsuccess%2F&failUrl=https%3A%2F%2Fidev.etm.ru%2Fipro3%2Fpayment%2Ffail%2F&doc_369={{doc_369_pay_card}}&amount=45.00&session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"invoice",
										"{{pay_doc1_pay_card}}",
										"pay_card"
									],
									"query": [
										{
											"key": "type",
											"value": "ipro"
										},
										{
											"key": "returnUrl",
											"value": "https%3A%2F%2Fidev.etm.ru%2Fipro3%2Fpayment%2Fsuccess%2F"
										},
										{
											"key": "failUrl",
											"value": "https%3A%2F%2Fidev.etm.ru%2Fipro3%2Fpayment%2Ffail%2F"
										},
										{
											"key": "doc_369",
											"value": "{{doc_369_pay_card}}"
										},
										{
											"key": "amount",
											"value": "45.00"
										},
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "invoice/pay_doc1_pay_card/pay_card_check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//invoice/pay_doc1/pay_card\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "session-id",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{host1}}/api/ipro/invoice/{{pay_doc1_pay_card}}/pay_card_check",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"invoice",
										"{{pay_doc1_pay_card}}",
										"pay_card_check"
									]
								}
							},
							"response": []
						},
						{
							"name": "invoice/iddoc-payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check paymentorder by card \r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"pm.test(\"status code 200 in body of json\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.invStatusPay).to.equal(\"оплачен\");\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/invoice/{{pay_doc1_pay_card}}?session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"invoice",
										"{{pay_doc1_pay_card}}"
									],
									"query": [
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "qr-code",
					"item": [
						{
							"name": "LC",
							"item": [
								{
									"name": "basket-add-check-order -LC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//check basket_add-LC\r",
													"pm.test('valid response format json', function () {\r",
													"    pm.response.to.have.jsonBody();\r",
													"});\r",
													"\r",
													"pm.test(\"status code 200 in body of json\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status.code).to.equal(200);\r",
													"});\r",
													"pm.test('Response is valid JSON', function () {\r",
													"    pm.expect(pm.response.json()).to.be.an('object');\r",
													"});\r",
													"pm.test('Response time is less than 2000ms', function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "session-id",
													"value": "{{sessionToken}}",
													"type": "text"
												},
												{
													"key": "city",
													"value": "78",
													"type": "text"
												},
												{
													"key": "gds",
													"value": "{{gds}}",
													"type": "text"
												},
												{
													"key": "val",
													"value": "1",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://{{host1}}/api/ipro/basket/add",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"basket",
												"add"
											]
										}
									},
									"response": []
								},
								{
									"name": "basket/order-pickupLC-pay-card",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//check basket/order-pickupLC-pay-card\r",
													"var doc_369_pay_card1;\r",
													"pm.test(\"create order cdek doc369\", function () {\r",
													"// Perform pay_doc_369 and extract doc_369 from the response\r",
													"    doc_369_pay_card1=pm.response.json().data.doc_369;\r",
													"    pm.environment.set(\"doc_369_pay_card1\", doc_369_pay_card1);\r",
													"});\r",
													"var pay_doc1_pay_card1;\r",
													"pm.test(\"create order cdek doc\", function () {\r",
													"// Perform pay_doc1 and extract pay_doc1 from the response\r",
													"    pay_doc1_pay_card1=pm.response.json().data.pay_doc1;\r",
													"    pm.environment.set(\"pay_doc1_pay_card1\", pay_doc1_pay_card1);\r",
													"});\r",
													"pm.test('valid response format json', function () {\r",
													"    pm.response.to.have.jsonBody();\r",
													"});\r",
													"\r",
													"pm.test(\"status code 200 in body of json\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status.code).to.equal(200);\r",
													"});\r",
													"pm.test('Response is valid JSON', function () {\r",
													"    pm.expect(pm.response.json()).to.be.an('object');\r",
													"});\r",
													"pm.test('Response time is less than 1000ms', function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "session-id",
												"value": "{{sessionToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://{{host1}}/api/ipro/basket/order?skl=4280&i_dogovor=000120230525093554&pay-type=sbp&s_rnd=r1&qdeliv_method=separate_line",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"basket",
												"order"
											],
											"query": [
												{
													"key": "skl",
													"value": "4280"
												},
												{
													"key": "i_dogovor",
													"value": "000120230525093554"
												},
												{
													"key": "pay-type",
													"value": "sbp"
												},
												{
													"key": "s_rnd",
													"value": "r1"
												},
												{
													"key": "qdeliv_method",
													"value": "separate_line"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "invoice/pay_doc1/pay_card",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//invoice/pay_doc1/pay_card\r",
													"pm.test('valid response format json', function () {\r",
													"    pm.response.to.have.jsonBody();\r",
													"});\r",
													"\r",
													"pm.test(\"status code 200 in body of json\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status.code).to.equal(200);\r",
													"});\r",
													"pm.test('Response is valid JSON', function () {\r",
													"    pm.expect(pm.response.json()).to.be.an('object');\r",
													"});\r",
													"pm.test('Response time is less than 1000ms', function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{host1}}/api/ipro/invoice/{{pay_doc1_pay_card1}}/pay_card?type=sbp_ipro&returnUrl=https%3A%2F%2Fidev.etm.ru%2Fipro3%2Fpayment%2Fsuccess%2F&failUrl=https%3A%2F%2Fidev.etm.ru%2Fipro3%2Fpayment%2Ffail%2F&doc_369={{doc_369_pay_card1}}&amount=45.00&session-id={{sessionToken}}",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"invoice",
												"{{pay_doc1_pay_card1}}",
												"pay_card"
											],
											"query": [
												{
													"key": "type",
													"value": "sbp_ipro"
												},
												{
													"key": "returnUrl",
													"value": "https%3A%2F%2Fidev.etm.ru%2Fipro3%2Fpayment%2Fsuccess%2F"
												},
												{
													"key": "failUrl",
													"value": "https%3A%2F%2Fidev.etm.ru%2Fipro3%2Fpayment%2Ffail%2F"
												},
												{
													"key": "doc_369",
													"value": "{{doc_369_pay_card1}}"
												},
												{
													"key": "amount",
													"value": "45.00"
												},
												{
													"key": "session-id",
													"value": "{{sessionToken}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "invoice/pay_doc1_pay_card/pay_card_check",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//invoice/pay_doc1/pay_card\r",
													"pm.test('valid response format json', function () {\r",
													"    pm.response.to.have.jsonBody();\r",
													"});\r",
													"\r",
													"pm.test(\"status code 200 in body of json\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status.code).to.equal(200);\r",
													"});\r",
													"pm.test('Response is valid JSON', function () {\r",
													"    pm.expect(pm.response.json()).to.be.an('object');\r",
													"});\r",
													"pm.test('Response time is less than 1000ms', function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "session-id",
												"value": "{{sessionToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://{{host1}}/api/ipro/invoice/{{pay_doc1_pay_card1}}/pay_card_check",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"invoice",
												"{{pay_doc1_pay_card1}}",
												"pay_card_check"
											]
										}
									},
									"response": []
								},
								{
									"name": "invoice/iddoc-payment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//check paymentorder by card \r",
													"pm.test('valid response format json', function () {\r",
													"    pm.response.to.have.jsonBody();\r",
													"});\r",
													"pm.test(\"status code 200 in body of json\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.invStatusPay).to.equal(\"оплачен\");\r",
													"});\r",
													"pm.test('Response is valid JSON', function () {\r",
													"    pm.expect(pm.response.json()).to.be.an('object');\r",
													"});\r",
													"pm.test('Response time is less than 1000ms', function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{host1}}/api/ipro/invoice/{{pay_doc1_pay_card1}}?session-id={{sessionToken}}",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"invoice",
												"{{pay_doc1_pay_card1}}"
											],
											"query": [
												{
													"key": "session-id",
													"value": "{{sessionToken}}"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "ampers",
					"item": [
						{
							"name": "LC",
							"item": [
								{
									"name": "basket-add-check-order -LC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//check basket_add-LC\r",
													"pm.test('valid response format json', function () {\r",
													"    pm.response.to.have.jsonBody();\r",
													"});\r",
													"\r",
													"pm.test(\"status code 200 in body of json\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status.code).to.equal(200);\r",
													"});\r",
													"pm.test('Response is valid JSON', function () {\r",
													"    pm.expect(pm.response.json()).to.be.an('object');\r",
													"});\r",
													"pm.test('Response time is less than 2000ms', function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "session-id",
													"value": "{{sessionToken}}",
													"type": "text"
												},
												{
													"key": "city",
													"value": "78",
													"type": "text"
												},
												{
													"key": "gds",
													"value": "{{gds}}",
													"type": "text"
												},
												{
													"key": "val",
													"value": "1",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://{{host1}}/api/ipro/basket/add",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"basket",
												"add"
											]
										}
									},
									"response": []
								},
								{
									"name": "basket/order-pickupLC-bill",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//check basket/order-pickupLC\r",
													"var pay_doc1_amper;\r",
													"pm.test(\"create order cdek doc\", function () {\r",
													"// Perform pay_doc1 and extract pay_doc1 from the response\r",
													"    pay_doc1_amper=pm.response.json().data.pay_doc1;\r",
													"    pm.environment.set(\"pay_doc1_amper\", pay_doc1_amper);\r",
													"});\r",
													"pm.test('valid response format json', function () {\r",
													"    pm.response.to.have.jsonBody();\r",
													"});\r",
													"\r",
													"pm.test(\"status code 200 in body of json\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status.code).to.equal(200);\r",
													"});\r",
													"pm.test('Response is valid JSON', function () {\r",
													"    pm.expect(pm.response.json()).to.be.an('object');\r",
													"});\r",
													"pm.test('Response time is less than 1000ms', function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "session-id",
												"value": "{{sessionToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://{{host1}}/api/ipro/basket/order?skl=4280&i_dogovor=000120230525093554&pay-type=bill&s_rnd=r1&qdeliv_method=separate_line",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"basket",
												"order"
											],
											"query": [
												{
													"key": "skl",
													"value": "4280"
												},
												{
													"key": "i_dogovor",
													"value": "000120230525093554"
												},
												{
													"key": "pay-type",
													"value": "bill"
												},
												{
													"key": "s_rnd",
													"value": "r1"
												},
												{
													"key": "qdeliv_method",
													"value": "separate_line"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "invoice/pay_doc1/pay_amper",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//check basket/order-pickupLC-pay ampers\r",
													"pm.test('valid response format json', function () {\r",
													"    pm.response.to.have.jsonBody();\r",
													"});\r",
													"\r",
													"pm.test(\"status code 200 in body of json\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status.code).to.equal(200);\r",
													"});\r",
													"pm.test('Response is valid JSON', function () {\r",
													"    pm.expect(pm.response.json()).to.be.an('object');\r",
													"});\r",
													"pm.test('Response time is less than 1000ms', function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "https://{{host1}}/api/ipro/invoice/{{pay_doc1_amper}}/pay_amper?to_pay=1&session-id={{sessionToken}}",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"invoice",
												"{{pay_doc1_amper}}",
												"pay_amper"
											],
											"query": [
												{
													"key": "to_pay",
													"value": "1"
												},
												{
													"key": "session-id",
													"value": "{{sessionToken}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "bonus/info",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//check bonus info\r",
													"pm.test('valid response format json', function () {\r",
													"    pm.response.to.have.jsonBody();\r",
													"});\r",
													"\r",
													"pm.test(\"status code 200 in body of json\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status.code).to.equal(200);\r",
													"});\r",
													"pm.test('Response is valid JSON', function () {\r",
													"    pm.expect(pm.response.json()).to.be.an('object');\r",
													"});\r",
													"pm.test('Response time is less than 1000ms', function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{host1}}/api/ipro/bonus/info?session-id={{sessionToken}}",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"bonus",
												"info"
											],
											"query": [
												{
													"key": "session-id",
													"value": "{{sessionToken}}"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "invoice",
			"item": [
				{
					"name": "info/param/invoice_status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check info/param/invoice_status\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/info/param/invoice_status",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"info",
								"param",
								"invoice_status"
							]
						}
					},
					"response": []
				},
				{
					"name": "invoice_doc",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check invoice_doc\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/invoice?session-id={{sessionToken}}&page=1&rows=20&sidx=inv-date&sord=desc&usr-inv-num={{docName}}",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"invoice"
							],
							"query": [
								{
									"key": "session-id",
									"value": "{{sessionToken}}"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "rows",
									"value": "20"
								},
								{
									"key": "sidx",
									"value": "inv-date"
								},
								{
									"key": "sord",
									"value": "desc"
								},
								{
									"key": "usr-inv-num",
									"value": "{{docName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "info/object/60004392",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check info/object/60004392\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/info/object/60004392?session-id={{sessionToken}}",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"info",
								"object",
								"60004392"
							],
							"query": [
								{
									"key": "session-id",
									"value": "{{sessionToken}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "delivery",
			"item": [
				{
					"name": "delivery/point",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check delivery/point\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/delivery/point?sord=asc&sidx=address&page=1&rows=999&session-id={{sessionToken}}",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"delivery",
								"point"
							],
							"query": [
								{
									"key": "sord",
									"value": "asc"
								},
								{
									"key": "sidx",
									"value": "address"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "rows",
									"value": "999"
								},
								{
									"key": "session-id",
									"value": "{{sessionToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "delivery/partners",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check delivery/partners\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/delivery/partners?st=11&length=0.065&volume=0.000002&weight=0.01&sum=4.86&session-id={{sessionToken}}",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"delivery",
								"partners"
							],
							"query": [
								{
									"key": "st",
									"value": "11"
								},
								{
									"key": "length",
									"value": "0.065"
								},
								{
									"key": "volume",
									"value": "0.000002"
								},
								{
									"key": "weight",
									"value": "0.01"
								},
								{
									"key": "sum",
									"value": "4.86"
								},
								{
									"key": "session-id",
									"value": "{{sessionToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "info/search/co_table/deliv_method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check info/search/co_table/deliv_method\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/info/search/co_table/deliv_method?session-id={{sessionToken}}",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"info",
								"search",
								"co_table",
								"deliv_method"
							],
							"query": [
								{
									"key": "session-id",
									"value": "{{sessionToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "delivery/request/cdek",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check delivery/request/cdek\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/delivery/request/cdek?csurl=https://api.cdek.ru/v2/deliverypoints?region_code%3D82%26type%3DPVZ%26allowed_cod%3Dtrue%26weight_max%3D30%26is_handout%3D1&session-id={{sessionToken}}",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"delivery",
								"request",
								"cdek"
							],
							"query": [
								{
									"key": "csurl",
									"value": "https://api.cdek.ru/v2/deliverypoints?region_code%3D82%26type%3DPVZ%26allowed_cod%3Dtrue%26weight_max%3D30%26is_handout%3D1"
								},
								{
									"key": "session-id",
									"value": "{{sessionToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "delivery/request/cdek/regions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check delivery/request/cdek-regions\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/delivery/request/cdek?csurl=https://api.cdek.ru/v2/location/regions?country_codes%3DRU&session-id={{sessionToken}}",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"delivery",
								"request",
								"cdek"
							],
							"query": [
								{
									"key": "csurl",
									"value": "https://api.cdek.ru/v2/location/regions?country_codes%3DRU"
								},
								{
									"key": "session-id",
									"value": "{{sessionToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "delivery/request/cdek-point-tariffs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check delivery/request/cdek-point-tariffs\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"from_location\":{\"code\":\"137\"},\"to_location\":{\"code\":1289},\"packages\":[{\"weight\":10}],\"tariff_code\":136}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host1}}/api/ipro/delivery/request/cdek?csurl=https%3A%2F%2Fapi.cdek.ru%2Fv2%2Fcalculator%2Ftariff&session-id={{sessionToken}}",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"delivery",
								"request",
								"cdek"
							],
							"query": [
								{
									"key": "csurl",
									"value": "https%3A%2F%2Fapi.cdek.ru%2Fv2%2Fcalculator%2Ftariff"
								},
								{
									"key": "session-id",
									"value": "{{sessionToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "user/profile/warrant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check user/profile/warrant\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/user/profile/warrant?session-id={{sessionToken}}",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"user",
								"profile",
								"warrant"
							],
							"query": [
								{
									"key": "session-id",
									"value": "{{sessionToken}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "cdek-payment",
			"item": [
				{
					"name": "bill",
					"item": [
						{
							"name": "basket-add-check-order -cdek",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check basket_add-LC\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 2000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "session-id",
											"value": "{{sessionToken}}",
											"type": "text"
										},
										{
											"key": "city",
											"value": "78",
											"type": "text"
										},
										{
											"key": "gds",
											"value": "{{gds}}",
											"type": "text"
										},
										{
											"key": "val",
											"value": "1",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{host1}}/api/ipro/basket/add",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"basket",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "delivery/point/create-cdek",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check delivery/point/create-cdek\r",
											"var id_cdek;\r",
											"pm.test(\"create specification spec price\", function () {\r",
											"// Perform id_cdek and extract id_cdek from the response\r",
											"    id_cdek = pm.response.json().data.id;\r",
											"    pm.environment.set(\"id_cdek\", id_cdek);\r",
											"});\r",
											"console.log(id_cdek);\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 400 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(400);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/delivery/point/create?st=11&cls17=%D0%A1%D0%97%D0%A1%D0%9F%D0%91&t-type=0&t-code=cdekSST4&t-name=%D0%9D%D0%B0%20%D0%9F%D1%80%D0%B8%D0%BC%D0%BE%D1%80%D1%81%D0%BA%D0%BE%D0%BC%20%D1%88%D0%BE%D1%81%D1%81%D0%B5%20350&t-adr=197706%2C%20%D0%A0%D0%BE%D1%81%D1%81%D0%B8%D1%8F%2C%20%D0%A1%D0%B0%D0%BD%D0%BA%D1%82-%D0%9F%D0%B5%D1%82%D0%B5%D1%80%D0%B1%D1%83%D1%80%D0%B3%2C%20%D0%A1%D0%B5%D1%81%D1%82%D1%80%D0%BE%D1%80%D0%B5%D1%86%D0%BA%2C%20%D1%88.%20%D0%9F%D1%80%D0%B8%D0%BC%D0%BE%D1%80%D1%81%D0%BA%D0%BE%D0%B5%2C%20350&t-time=1&t-rn14=DP01&t-rn14-l=%D0%A1%D0%94%D0%AD%D0%9A&t-ogr=%D0%91%D1%8B%D1%87%D0%BE%D0%BA&t-kont=%D0%9A%D1%80%D0%B0%D1%81%20%D0%90%D0%BB%20%D0%BB%D0%B5%D0%BE%D0%BD&t-rab=%D0%9F%D0%BD-%D0%92%D1%81%2010%3A00-21%3A00&t-din=%D0%91%D0%B5%D0%B7%20%D0%BE%D0%B1%D0%B5%D0%B4%D0%B0&t-tel=%2B7(921)%20657%20-%2027%20-%2012&session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"delivery",
										"point",
										"create"
									],
									"query": [
										{
											"key": "st",
											"value": "11"
										},
										{
											"key": "cls17",
											"value": "%D0%A1%D0%97%D0%A1%D0%9F%D0%91"
										},
										{
											"key": "t-type",
											"value": "0"
										},
										{
											"key": "t-code",
											"value": "cdekSST4"
										},
										{
											"key": "t-name",
											"value": "%D0%9D%D0%B0%20%D0%9F%D1%80%D0%B8%D0%BC%D0%BE%D1%80%D1%81%D0%BA%D0%BE%D0%BC%20%D1%88%D0%BE%D1%81%D1%81%D0%B5%20350"
										},
										{
											"key": "t-adr",
											"value": "197706%2C%20%D0%A0%D0%BE%D1%81%D1%81%D0%B8%D1%8F%2C%20%D0%A1%D0%B0%D0%BD%D0%BA%D1%82-%D0%9F%D0%B5%D1%82%D0%B5%D1%80%D0%B1%D1%83%D1%80%D0%B3%2C%20%D0%A1%D0%B5%D1%81%D1%82%D1%80%D0%BE%D1%80%D0%B5%D1%86%D0%BA%2C%20%D1%88.%20%D0%9F%D1%80%D0%B8%D0%BC%D0%BE%D1%80%D1%81%D0%BA%D0%BE%D0%B5%2C%20350"
										},
										{
											"key": "t-time",
											"value": "1"
										},
										{
											"key": "t-rn14",
											"value": "DP01"
										},
										{
											"key": "t-rn14-l",
											"value": "%D0%A1%D0%94%D0%AD%D0%9A"
										},
										{
											"key": "t-ogr",
											"value": "%D0%91%D1%8B%D1%87%D0%BE%D0%BA"
										},
										{
											"key": "t-kont",
											"value": "%D0%9A%D1%80%D0%B0%D1%81%20%D0%90%D0%BB%20%D0%BB%D0%B5%D0%BE%D0%BD"
										},
										{
											"key": "t-rab",
											"value": "%D0%9F%D0%BD-%D0%92%D1%81%2010%3A00-21%3A00"
										},
										{
											"key": "t-din",
											"value": "%D0%91%D0%B5%D0%B7%20%D0%BE%D0%B1%D0%B5%D0%B4%D0%B0"
										},
										{
											"key": "t-tel",
											"value": "%2B7(921)%20657%20-%2027%20-%2012"
										},
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "delivery/point/id-cdek",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check delivery/point/id-cdek\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/delivery/point/{{id_cdek}}?st=11&cls17=%D0%A1%D0%97%D0%A1%D0%9F%D0%91&t-code=cdekSST4&t-name=%D0%9D%D0%B0%20%D0%9F%D1%80%D0%B8%D0%BC%D0%BE%D1%80%D1%81%D0%BA%D0%BE%D0%BC%20%D1%88%D0%BE%D1%81%D1%81%D0%B5%20350&t-adr=197706,%20%D0%A0%D0%BE%D1%81%D1%81%D0%B8%D1%8F,%20%D0%A1%D0%B0%D0%BD%D0%BA%D1%82-%D0%9F%D0%B5%D1%82%D0%B5%D1%80%D0%B1%D1%83%D1%80%D0%B3,%20%D0%A1%D0%B5%D1%81%D1%82%D1%80%D0%BE%D1%80%D0%B5%D1%86%D0%BA,%20%D1%88.%20%D0%9F%D1%80%D0%B8%D0%BC%D0%BE%D1%80%D1%81%D0%BA%D0%BE%D0%B5,%20350&t-time=1&t-rn14=DP01&t-rn14-l=%D0%A1%D0%94%D0%AD%D0%9A&t-kont=%D0%9A%D1%80%D0%B0%D1%81%20%D0%90%D0%BB%20%D0%BB%D0%B5%D0%BE%D0%BD&t-rab=%D0%9F%D0%BD-%D0%92%D1%81%2010:00-21:00&t-din=%D0%91%D0%B5%D0%B7%20%D0%BE%D0%B1%D0%B5%D0%B4%D0%B0&t-tel=+7(921)%20657%20-%2027%20-%2012&session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"delivery",
										"point",
										"{{id_cdek}}"
									],
									"query": [
										{
											"key": "st",
											"value": "11"
										},
										{
											"key": "cls17",
											"value": "%D0%A1%D0%97%D0%A1%D0%9F%D0%91"
										},
										{
											"key": "t-code",
											"value": "cdekSST4"
										},
										{
											"key": "t-name",
											"value": "%D0%9D%D0%B0%20%D0%9F%D1%80%D0%B8%D0%BC%D0%BE%D1%80%D1%81%D0%BA%D0%BE%D0%BC%20%D1%88%D0%BE%D1%81%D1%81%D0%B5%20350"
										},
										{
											"key": "t-adr",
											"value": "197706,%20%D0%A0%D0%BE%D1%81%D1%81%D0%B8%D1%8F,%20%D0%A1%D0%B0%D0%BD%D0%BA%D1%82-%D0%9F%D0%B5%D1%82%D0%B5%D1%80%D0%B1%D1%83%D1%80%D0%B3,%20%D0%A1%D0%B5%D1%81%D1%82%D1%80%D0%BE%D1%80%D0%B5%D1%86%D0%BA,%20%D1%88.%20%D0%9F%D1%80%D0%B8%D0%BC%D0%BE%D1%80%D1%81%D0%BA%D0%BE%D0%B5,%20350"
										},
										{
											"key": "t-time",
											"value": "1"
										},
										{
											"key": "t-rn14",
											"value": "DP01"
										},
										{
											"key": "t-rn14-l",
											"value": "%D0%A1%D0%94%D0%AD%D0%9A"
										},
										{
											"key": "t-kont",
											"value": "%D0%9A%D1%80%D0%B0%D1%81%20%D0%90%D0%BB%20%D0%BB%D0%B5%D0%BE%D0%BD"
										},
										{
											"key": "t-rab",
											"value": "%D0%9F%D0%BD-%D0%92%D1%81%2010:00-21:00"
										},
										{
											"key": "t-din",
											"value": "%D0%91%D0%B5%D0%B7%20%D0%BE%D0%B1%D0%B5%D0%B4%D0%B0"
										},
										{
											"key": "t-tel",
											"value": "+7(921)%20657%20-%2027%20-%2012"
										},
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "basket/order-pickup-cdek-bill",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check basket/order-pickupLC\r",
											"var pay_doc1;\r",
											"pm.test(\"create order cdek doc\", function () {\r",
											"// Perform pay_doc1 and extract pay_doc1 from the response\r",
											"    pay_doc1=pm.response.json().data.pay_doc1;\r",
											"    pm.environment.set(\"pay_doc1\", pay_doc1);\r",
											"});\r",
											"console.log(pay_doc1);\r",
											"var doc_369;\r",
											"pm.test(\"create order cdek doc369\", function () {\r",
											"// Perform pay_doc_369 and extract doc_369 from the response\r",
											"    doc_369=pm.response.json().data.doc_369;\r",
											"    pm.environment.set(\"doc_369\", doc_369);\r",
											"});\r",
											"console.log(doc_369);\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "session-id",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{host1}}/api/ipro/basket/order?skl=1000&i_dogovor=000120230525093554&pay-type=bill&s_rnd=r1&deliv_cmp=440181753&deliv_point=cdekSST4",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"basket",
										"order"
									],
									"query": [
										{
											"key": "skl",
											"value": "1000"
										},
										{
											"key": "i_dogovor",
											"value": "000120230525093554"
										},
										{
											"key": "pay-type",
											"value": "bill"
										},
										{
											"key": "s_rnd",
											"value": "r1"
										},
										{
											"key": "deliv_cmp",
											"value": "440181753"
										},
										{
											"key": "deliv_point",
											"value": "cdekSST4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "basket/sum0",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check invoice/iddoc/email\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test(\"sum in basket is empty\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.basket_sum).to.equal(\"0.00\");\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/basket/sum?session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"basket",
										"sum"
									],
									"query": [
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "invoice/id-doc/delivery",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check delivery/point/create-cdek-delivery\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"pm.collectionVariables.set(\"today\", moment().format(\"DD/MM/YYYY\"));\r",
											"//const dateNow = new Date();\r",
											"//pm.collectionVariables.set('currentDate', dateNow.toISOString());\r",
											"//const dateNow = require('dateNow');\r",
											"//pm.collectionVariables.set('currentDate',dateNow().format(\"DD/MM/YYYY\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "session-id",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "adr",
											"value": "{{id_cdek}}",
											"type": "text"
										},
										{
											"key": "doc_369",
											"value": "{{doc_369}}",
											"type": "text"
										},
										{
											"key": "time",
											"value": "10:00",
											"type": "text"
										},
										{
											"key": "phone",
											"value": "+7(543) 453 - 45 - 34",
											"type": "text"
										},
										{
											"key": "t525",
											"value": "600",
											"type": "text"
										},
										{
											"key": "vid",
											"value": "Стандартная: доставка по графику",
											"type": "text"
										},
										{
											"key": "ds_man",
											"value": "9035742",
											"type": "text"
										},
										{
											"key": "time_po",
											"value": "21:00",
											"type": "text"
										},
										{
											"key": "shabl",
											"value": "1359762520",
											"type": "text"
										},
										{
											"key": "deliv_cmp",
											"value": "440181753",
											"type": "text"
										},
										{
											"key": "applic_final",
											"value": "true",
											"type": "text"
										},
										{
											"key": "oper",
											"value": "add",
											"type": "text"
										},
										{
											"key": "RCP_NM",
											"value": "Крас Ал леон",
											"type": "text"
										},
										{
											"key": "date_z",
											"value": "{{today}}",
											"type": "text"
										},
										{
											"key": "date",
											"value": "{{today}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{host1}}/api/ipro/invoice/{{pay_doc1}}/delivery",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"invoice",
										"{{pay_doc1}}",
										"delivery"
									]
								}
							},
							"response": []
						},
						{
							"name": "invoice/iddoc/email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check invoice/iddoc/email\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/invoice/{{pay_doc1}}?session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"invoice",
										"{{pay_doc1}}"
									],
									"query": [
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "invoice/iddoc/print2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check invoice/iddoc/print2\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/invoice/{{pay_doc1}}/print2/40040857?action=changeStatus&session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"invoice",
										"{{pay_doc1}}",
										"print2",
										"40040857"
									],
									"query": [
										{
											"key": "action",
											"value": "changeStatus"
										},
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "pay_card",
					"item": [
						{
							"name": "basket-add-check-order -cdek",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check basket_add-LC\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 2000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "session-id",
											"value": "{{sessionToken}}",
											"type": "text"
										},
										{
											"key": "city",
											"value": "78",
											"type": "text"
										},
										{
											"key": "gds",
											"value": "{{gds}}",
											"type": "text"
										},
										{
											"key": "val",
											"value": "1",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{host1}}/api/ipro/basket/add",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"basket",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "delivery/point/create-cdek",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check delivery/point/create-cdek\r",
											"var id_cdek1;\r",
											"pm.test(\"create specification spec price\", function () {\r",
											"// Perform id_cdek and extract id_cdek from the response\r",
											"    id_cdek1 = pm.response.json().data.id;\r",
											"    pm.environment.set(\"id_cdek1\", id_cdek1);\r",
											"});\r",
											"console.log(id_cdek1);\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 400 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(400);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/delivery/point/create?st=11&cls17=%D0%A1%D0%97%D0%A1%D0%9F%D0%91&t-type=0&t-code=cdekSST4&t-name=%D0%9D%D0%B0%20%D0%9F%D1%80%D0%B8%D0%BC%D0%BE%D1%80%D1%81%D0%BA%D0%BE%D0%BC%20%D1%88%D0%BE%D1%81%D1%81%D0%B5%20350&t-adr=197706%2C%20%D0%A0%D0%BE%D1%81%D1%81%D0%B8%D1%8F%2C%20%D0%A1%D0%B0%D0%BD%D0%BA%D1%82-%D0%9F%D0%B5%D1%82%D0%B5%D1%80%D0%B1%D1%83%D1%80%D0%B3%2C%20%D0%A1%D0%B5%D1%81%D1%82%D1%80%D0%BE%D1%80%D0%B5%D1%86%D0%BA%2C%20%D1%88.%20%D0%9F%D1%80%D0%B8%D0%BC%D0%BE%D1%80%D1%81%D0%BA%D0%BE%D0%B5%2C%20350&t-time=1&t-rn14=DP01&t-rn14-l=%D0%A1%D0%94%D0%AD%D0%9A&t-ogr=%D0%91%D1%8B%D1%87%D0%BE%D0%BA&t-kont=%D0%9A%D1%80%D0%B0%D1%81%20%D0%90%D0%BB%20%D0%BB%D0%B5%D0%BE%D0%BD&t-rab=%D0%9F%D0%BD-%D0%92%D1%81%2010%3A00-21%3A00&t-din=%D0%91%D0%B5%D0%B7%20%D0%BE%D0%B1%D0%B5%D0%B4%D0%B0&t-tel=%2B7(921)%20657%20-%2027%20-%2012&session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"delivery",
										"point",
										"create"
									],
									"query": [
										{
											"key": "st",
											"value": "11"
										},
										{
											"key": "cls17",
											"value": "%D0%A1%D0%97%D0%A1%D0%9F%D0%91"
										},
										{
											"key": "t-type",
											"value": "0"
										},
										{
											"key": "t-code",
											"value": "cdekSST4"
										},
										{
											"key": "t-name",
											"value": "%D0%9D%D0%B0%20%D0%9F%D1%80%D0%B8%D0%BC%D0%BE%D1%80%D1%81%D0%BA%D0%BE%D0%BC%20%D1%88%D0%BE%D1%81%D1%81%D0%B5%20350"
										},
										{
											"key": "t-adr",
											"value": "197706%2C%20%D0%A0%D0%BE%D1%81%D1%81%D0%B8%D1%8F%2C%20%D0%A1%D0%B0%D0%BD%D0%BA%D1%82-%D0%9F%D0%B5%D1%82%D0%B5%D1%80%D0%B1%D1%83%D1%80%D0%B3%2C%20%D0%A1%D0%B5%D1%81%D1%82%D1%80%D0%BE%D1%80%D0%B5%D1%86%D0%BA%2C%20%D1%88.%20%D0%9F%D1%80%D0%B8%D0%BC%D0%BE%D1%80%D1%81%D0%BA%D0%BE%D0%B5%2C%20350"
										},
										{
											"key": "t-time",
											"value": "1"
										},
										{
											"key": "t-rn14",
											"value": "DP01"
										},
										{
											"key": "t-rn14-l",
											"value": "%D0%A1%D0%94%D0%AD%D0%9A"
										},
										{
											"key": "t-ogr",
											"value": "%D0%91%D1%8B%D1%87%D0%BE%D0%BA"
										},
										{
											"key": "t-kont",
											"value": "%D0%9A%D1%80%D0%B0%D1%81%20%D0%90%D0%BB%20%D0%BB%D0%B5%D0%BE%D0%BD"
										},
										{
											"key": "t-rab",
											"value": "%D0%9F%D0%BD-%D0%92%D1%81%2010%3A00-21%3A00"
										},
										{
											"key": "t-din",
											"value": "%D0%91%D0%B5%D0%B7%20%D0%BE%D0%B1%D0%B5%D0%B4%D0%B0"
										},
										{
											"key": "t-tel",
											"value": "%2B7(921)%20657%20-%2027%20-%2012"
										},
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "delivery/point/id-cdek",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check delivery/point/id-cdek\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/delivery/point/{{id_cdek1}}?st=11&cls17=%D0%A1%D0%97%D0%A1%D0%9F%D0%91&t-code=cdekSST4&t-name=%D0%9D%D0%B0%20%D0%9F%D1%80%D0%B8%D0%BC%D0%BE%D1%80%D1%81%D0%BA%D0%BE%D0%BC%20%D1%88%D0%BE%D1%81%D1%81%D0%B5%20350&t-adr=197706,%20%D0%A0%D0%BE%D1%81%D1%81%D0%B8%D1%8F,%20%D0%A1%D0%B0%D0%BD%D0%BA%D1%82-%D0%9F%D0%B5%D1%82%D0%B5%D1%80%D0%B1%D1%83%D1%80%D0%B3,%20%D0%A1%D0%B5%D1%81%D1%82%D1%80%D0%BE%D1%80%D0%B5%D1%86%D0%BA,%20%D1%88.%20%D0%9F%D1%80%D0%B8%D0%BC%D0%BE%D1%80%D1%81%D0%BA%D0%BE%D0%B5,%20350&t-time=1&t-rn14=DP01&t-rn14-l=%D0%A1%D0%94%D0%AD%D0%9A&t-kont=%D0%9A%D1%80%D0%B0%D1%81%20%D0%90%D0%BB%20%D0%BB%D0%B5%D0%BE%D0%BD&t-rab=%D0%9F%D0%BD-%D0%92%D1%81%2010:00-21:00&t-din=%D0%91%D0%B5%D0%B7%20%D0%BE%D0%B1%D0%B5%D0%B4%D0%B0&t-tel=+7(921)%20657%20-%2027%20-%2012&session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"delivery",
										"point",
										"{{id_cdek1}}"
									],
									"query": [
										{
											"key": "st",
											"value": "11"
										},
										{
											"key": "cls17",
											"value": "%D0%A1%D0%97%D0%A1%D0%9F%D0%91"
										},
										{
											"key": "t-code",
											"value": "cdekSST4"
										},
										{
											"key": "t-name",
											"value": "%D0%9D%D0%B0%20%D0%9F%D1%80%D0%B8%D0%BC%D0%BE%D1%80%D1%81%D0%BA%D0%BE%D0%BC%20%D1%88%D0%BE%D1%81%D1%81%D0%B5%20350"
										},
										{
											"key": "t-adr",
											"value": "197706,%20%D0%A0%D0%BE%D1%81%D1%81%D0%B8%D1%8F,%20%D0%A1%D0%B0%D0%BD%D0%BA%D1%82-%D0%9F%D0%B5%D1%82%D0%B5%D1%80%D0%B1%D1%83%D1%80%D0%B3,%20%D0%A1%D0%B5%D1%81%D1%82%D1%80%D0%BE%D1%80%D0%B5%D1%86%D0%BA,%20%D1%88.%20%D0%9F%D1%80%D0%B8%D0%BC%D0%BE%D1%80%D1%81%D0%BA%D0%BE%D0%B5,%20350"
										},
										{
											"key": "t-time",
											"value": "1"
										},
										{
											"key": "t-rn14",
											"value": "DP01"
										},
										{
											"key": "t-rn14-l",
											"value": "%D0%A1%D0%94%D0%AD%D0%9A"
										},
										{
											"key": "t-kont",
											"value": "%D0%9A%D1%80%D0%B0%D1%81%20%D0%90%D0%BB%20%D0%BB%D0%B5%D0%BE%D0%BD"
										},
										{
											"key": "t-rab",
											"value": "%D0%9F%D0%BD-%D0%92%D1%81%2010:00-21:00"
										},
										{
											"key": "t-din",
											"value": "%D0%91%D0%B5%D0%B7%20%D0%BE%D0%B1%D0%B5%D0%B4%D0%B0"
										},
										{
											"key": "t-tel",
											"value": "+7(921)%20657%20-%2027%20-%2012"
										},
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "basket/order-pickup-cdek-bill",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check basket/order-pickupLC\r",
											"var pay_doc2;\r",
											"pm.test(\"create order cdek doc\", function () {\r",
											"// Perform pay_doc1 and extract pay_doc1 from the response\r",
											"    pay_doc2=pm.response.json().data.pay_doc1;\r",
											"    pm.environment.set(\"pay_doc2\", pay_doc2);\r",
											"});\r",
											"console.log(pay_doc2);\r",
											"var doc_369_cdek;\r",
											"pm.test(\"create order cdek doc369\", function () {\r",
											"// Perform pay_doc_369 and extract doc_369 from the response\r",
											"    doc_369_cdek=pm.response.json().data.doc_369;\r",
											"    pm.environment.set(\"doc_369_cdek\", doc_369_cdek);\r",
											"});\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "session-id",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{host1}}/api/ipro/basket/order?skl=1000&i_dogovor=000120230525093554&pay-type=card_now&s_rnd=r1&deliv_cmp=440181753&deliv_point=cdekSST4",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"basket",
										"order"
									],
									"query": [
										{
											"key": "skl",
											"value": "1000"
										},
										{
											"key": "i_dogovor",
											"value": "000120230525093554"
										},
										{
											"key": "pay-type",
											"value": "card_now"
										},
										{
											"key": "s_rnd",
											"value": "r1"
										},
										{
											"key": "deliv_cmp",
											"value": "440181753"
										},
										{
											"key": "deliv_point",
											"value": "cdekSST4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "basket/sum0",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check invoice/iddoc/email\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test(\"sum in basket is empty\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.basket_sum).to.equal(\"0.00\");\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/basket/sum?session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"basket",
										"sum"
									],
									"query": [
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "invoice/id-doc/delivery",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check delivery/point/create-cdek-delivery\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"pm.collectionVariables.set(\"today\", moment().format(\"DD/MM/YYYY\"));\r",
											"//const dateNow = new Date();\r",
											"//pm.collectionVariables.set('currentDate', dateNow.toISOString());\r",
											"//const dateNow = require('dateNow');\r",
											"//pm.collectionVariables.set('currentDate',dateNow().format(\"DD/MM/YYYY\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "session-id",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "adr",
											"value": "{{id_cdek1}}",
											"type": "text"
										},
										{
											"key": "doc_369",
											"value": "{{doc_369_cdek}}",
											"type": "text"
										},
										{
											"key": "time",
											"value": "10:00",
											"type": "text"
										},
										{
											"key": "phone",
											"value": "+7(543) 453 - 45 - 34",
											"type": "text"
										},
										{
											"key": "t525",
											"value": "600",
											"type": "text"
										},
										{
											"key": "vid",
											"value": "Стандартная: доставка по графику",
											"type": "text"
										},
										{
											"key": "ds_man",
											"value": "9035742",
											"type": "text"
										},
										{
											"key": "time_po",
											"value": "21:00",
											"type": "text"
										},
										{
											"key": "shabl",
											"value": "1359762520",
											"type": "text"
										},
										{
											"key": "deliv_cmp",
											"value": "440181753",
											"type": "text"
										},
										{
											"key": "applic_final",
											"value": "true",
											"type": "text"
										},
										{
											"key": "oper",
											"value": "add",
											"type": "text"
										},
										{
											"key": "RCP_NM",
											"value": "Крас Ал леон",
											"type": "text"
										},
										{
											"key": "date_z",
											"value": "{{today}}",
											"type": "text"
										},
										{
											"key": "date",
											"value": "{{today}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{host1}}/api/ipro/invoice/{{pay_doc2}}/delivery",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"invoice",
										"{{pay_doc2}}",
										"delivery"
									]
								}
							},
							"response": []
						},
						{
							"name": "invoice/pay_doc1/pay_card cdek",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//invoice/pay_doc1/pay_card\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/invoice/{{pay_doc2}}/pay_card?type=ipro&returnUrl=https%3A%2F%2Fidev.etm.ru%2Fipro3%2Fpayment%2Fsuccess%2F&failUrl=https%3A%2F%2Fidev.etm.ru%2Fipro3%2Fpayment%2Ffail%2F&doc_369={{doc_369_cdek}}&amount=45.00&session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"invoice",
										"{{pay_doc2}}",
										"pay_card"
									],
									"query": [
										{
											"key": "type",
											"value": "ipro"
										},
										{
											"key": "returnUrl",
											"value": "https%3A%2F%2Fidev.etm.ru%2Fipro3%2Fpayment%2Fsuccess%2F"
										},
										{
											"key": "failUrl",
											"value": "https%3A%2F%2Fidev.etm.ru%2Fipro3%2Fpayment%2Ffail%2F"
										},
										{
											"key": "doc_369",
											"value": "{{doc_369_cdek}}"
										},
										{
											"key": "amount",
											"value": "45.00"
										},
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "invoice/pay_doc1_pay_card/pay_card_check-cdek",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//invoice/pay_doc1/pay_card\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "session-id",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{host1}}/api/ipro/invoice/{{pay_doc2}}/pay_card_check",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"invoice",
										"{{pay_doc2}}",
										"pay_card_check"
									]
								}
							},
							"response": []
						},
						{
							"name": "invoice/iddoc/email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check invoice/iddoc/email\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/invoice/{{pay_doc2}}?session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"invoice",
										"{{pay_doc2}}"
									],
									"query": [
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "invoice/iddoc/print2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check invoice/iddoc/print2\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/invoice/{{pay_doc2}}/print2/40040857?action=changeStatus&session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"invoice",
										"{{pay_doc2}}",
										"print2",
										"40040857"
									],
									"query": [
										{
											"key": "action",
											"value": "changeStatus"
										},
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "qr-code",
					"item": [
						{
							"name": "basket-add-check-order -cdek",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check basket_add-LC\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 2000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "session-id",
											"value": "{{sessionToken}}",
											"type": "text"
										},
										{
											"key": "city",
											"value": "78",
											"type": "text"
										},
										{
											"key": "gds",
											"value": "{{gds}}",
											"type": "text"
										},
										{
											"key": "val",
											"value": "1",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{host1}}/api/ipro/basket/add",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"basket",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "delivery/point/create-cdek",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check delivery/point/create-cdek\r",
											"var id_cdek3;\r",
											"pm.test(\"create specification spec price\", function () {\r",
											"// Perform id_cdek and extract id_cdek from the response\r",
											"    id_cdek3 = pm.response.json().data.id;\r",
											"    pm.environment.set(\"id_cdek3\", id_cdek3);\r",
											"});\r",
											"console.log(id_cdek3);\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 400 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(400);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/delivery/point/create?st=11&cls17=%D0%A1%D0%97%D0%A1%D0%9F%D0%91&t-type=0&t-code=cdekSST4&t-name=%D0%9D%D0%B0%20%D0%9F%D1%80%D0%B8%D0%BC%D0%BE%D1%80%D1%81%D0%BA%D0%BE%D0%BC%20%D1%88%D0%BE%D1%81%D1%81%D0%B5%20350&t-adr=197706%2C%20%D0%A0%D0%BE%D1%81%D1%81%D0%B8%D1%8F%2C%20%D0%A1%D0%B0%D0%BD%D0%BA%D1%82-%D0%9F%D0%B5%D1%82%D0%B5%D1%80%D0%B1%D1%83%D1%80%D0%B3%2C%20%D0%A1%D0%B5%D1%81%D1%82%D1%80%D0%BE%D1%80%D0%B5%D1%86%D0%BA%2C%20%D1%88.%20%D0%9F%D1%80%D0%B8%D0%BC%D0%BE%D1%80%D1%81%D0%BA%D0%BE%D0%B5%2C%20350&t-time=1&t-rn14=DP01&t-rn14-l=%D0%A1%D0%94%D0%AD%D0%9A&t-ogr=%D0%91%D1%8B%D1%87%D0%BE%D0%BA&t-kont=%D0%9A%D1%80%D0%B0%D1%81%20%D0%90%D0%BB%20%D0%BB%D0%B5%D0%BE%D0%BD&t-rab=%D0%9F%D0%BD-%D0%92%D1%81%2010%3A00-21%3A00&t-din=%D0%91%D0%B5%D0%B7%20%D0%BE%D0%B1%D0%B5%D0%B4%D0%B0&t-tel=%2B7(921)%20657%20-%2027%20-%2012&session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"delivery",
										"point",
										"create"
									],
									"query": [
										{
											"key": "st",
											"value": "11"
										},
										{
											"key": "cls17",
											"value": "%D0%A1%D0%97%D0%A1%D0%9F%D0%91"
										},
										{
											"key": "t-type",
											"value": "0"
										},
										{
											"key": "t-code",
											"value": "cdekSST4"
										},
										{
											"key": "t-name",
											"value": "%D0%9D%D0%B0%20%D0%9F%D1%80%D0%B8%D0%BC%D0%BE%D1%80%D1%81%D0%BA%D0%BE%D0%BC%20%D1%88%D0%BE%D1%81%D1%81%D0%B5%20350"
										},
										{
											"key": "t-adr",
											"value": "197706%2C%20%D0%A0%D0%BE%D1%81%D1%81%D0%B8%D1%8F%2C%20%D0%A1%D0%B0%D0%BD%D0%BA%D1%82-%D0%9F%D0%B5%D1%82%D0%B5%D1%80%D0%B1%D1%83%D1%80%D0%B3%2C%20%D0%A1%D0%B5%D1%81%D1%82%D1%80%D0%BE%D1%80%D0%B5%D1%86%D0%BA%2C%20%D1%88.%20%D0%9F%D1%80%D0%B8%D0%BC%D0%BE%D1%80%D1%81%D0%BA%D0%BE%D0%B5%2C%20350"
										},
										{
											"key": "t-time",
											"value": "1"
										},
										{
											"key": "t-rn14",
											"value": "DP01"
										},
										{
											"key": "t-rn14-l",
											"value": "%D0%A1%D0%94%D0%AD%D0%9A"
										},
										{
											"key": "t-ogr",
											"value": "%D0%91%D1%8B%D1%87%D0%BE%D0%BA"
										},
										{
											"key": "t-kont",
											"value": "%D0%9A%D1%80%D0%B0%D1%81%20%D0%90%D0%BB%20%D0%BB%D0%B5%D0%BE%D0%BD"
										},
										{
											"key": "t-rab",
											"value": "%D0%9F%D0%BD-%D0%92%D1%81%2010%3A00-21%3A00"
										},
										{
											"key": "t-din",
											"value": "%D0%91%D0%B5%D0%B7%20%D0%BE%D0%B1%D0%B5%D0%B4%D0%B0"
										},
										{
											"key": "t-tel",
											"value": "%2B7(921)%20657%20-%2027%20-%2012"
										},
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "delivery/point/id-cdek",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check delivery/point/id-cdek\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/delivery/point/{{id_cdek3}}?st=11&cls17=%D0%A1%D0%97%D0%A1%D0%9F%D0%91&t-code=cdekSST4&t-name=%D0%9D%D0%B0%20%D0%9F%D1%80%D0%B8%D0%BC%D0%BE%D1%80%D1%81%D0%BA%D0%BE%D0%BC%20%D1%88%D0%BE%D1%81%D1%81%D0%B5%20350&t-adr=197706,%20%D0%A0%D0%BE%D1%81%D1%81%D0%B8%D1%8F,%20%D0%A1%D0%B0%D0%BD%D0%BA%D1%82-%D0%9F%D0%B5%D1%82%D0%B5%D1%80%D0%B1%D1%83%D1%80%D0%B3,%20%D0%A1%D0%B5%D1%81%D1%82%D1%80%D0%BE%D1%80%D0%B5%D1%86%D0%BA,%20%D1%88.%20%D0%9F%D1%80%D0%B8%D0%BC%D0%BE%D1%80%D1%81%D0%BA%D0%BE%D0%B5,%20350&t-time=1&t-rn14=DP01&t-rn14-l=%D0%A1%D0%94%D0%AD%D0%9A&t-kont=%D0%9A%D1%80%D0%B0%D1%81%20%D0%90%D0%BB%20%D0%BB%D0%B5%D0%BE%D0%BD&t-rab=%D0%9F%D0%BD-%D0%92%D1%81%2010:00-21:00&t-din=%D0%91%D0%B5%D0%B7%20%D0%BE%D0%B1%D0%B5%D0%B4%D0%B0&t-tel=+7(921)%20657%20-%2027%20-%2012&session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"delivery",
										"point",
										"{{id_cdek3}}"
									],
									"query": [
										{
											"key": "st",
											"value": "11"
										},
										{
											"key": "cls17",
											"value": "%D0%A1%D0%97%D0%A1%D0%9F%D0%91"
										},
										{
											"key": "t-code",
											"value": "cdekSST4"
										},
										{
											"key": "t-name",
											"value": "%D0%9D%D0%B0%20%D0%9F%D1%80%D0%B8%D0%BC%D0%BE%D1%80%D1%81%D0%BA%D0%BE%D0%BC%20%D1%88%D0%BE%D1%81%D1%81%D0%B5%20350"
										},
										{
											"key": "t-adr",
											"value": "197706,%20%D0%A0%D0%BE%D1%81%D1%81%D0%B8%D1%8F,%20%D0%A1%D0%B0%D0%BD%D0%BA%D1%82-%D0%9F%D0%B5%D1%82%D0%B5%D1%80%D0%B1%D1%83%D1%80%D0%B3,%20%D0%A1%D0%B5%D1%81%D1%82%D1%80%D0%BE%D1%80%D0%B5%D1%86%D0%BA,%20%D1%88.%20%D0%9F%D1%80%D0%B8%D0%BC%D0%BE%D1%80%D1%81%D0%BA%D0%BE%D0%B5,%20350"
										},
										{
											"key": "t-time",
											"value": "1"
										},
										{
											"key": "t-rn14",
											"value": "DP01"
										},
										{
											"key": "t-rn14-l",
											"value": "%D0%A1%D0%94%D0%AD%D0%9A"
										},
										{
											"key": "t-kont",
											"value": "%D0%9A%D1%80%D0%B0%D1%81%20%D0%90%D0%BB%20%D0%BB%D0%B5%D0%BE%D0%BD"
										},
										{
											"key": "t-rab",
											"value": "%D0%9F%D0%BD-%D0%92%D1%81%2010:00-21:00"
										},
										{
											"key": "t-din",
											"value": "%D0%91%D0%B5%D0%B7%20%D0%BE%D0%B1%D0%B5%D0%B4%D0%B0"
										},
										{
											"key": "t-tel",
											"value": "+7(921)%20657%20-%2027%20-%2012"
										},
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "basket/order-pickup-cdek-bill",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check basket/order-pickupLC\r",
											"var pay_doc3;\r",
											"pm.test(\"create order cdek doc\", function () {\r",
											"// Perform pay_doc1 and extract pay_doc1 from the response\r",
											"    pay_doc3=pm.response.json().data.pay_doc1;\r",
											"    pm.environment.set(\"pay_doc3\", pay_doc3);\r",
											"});\r",
											"console.log(pay_doc3);\r",
											"var doc_369_cdek1;\r",
											"pm.test(\"create order cdek doc369\", function () {\r",
											"// Perform pay_doc_369 and extract doc_369 from the response\r",
											"    doc_369_cdek1=pm.response.json().data.doc_369;\r",
											"    pm.environment.set(\"doc_369_cdek1\", doc_369_cdek1);\r",
											"});\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "session-id",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{host1}}/api/ipro/basket/order?skl=1000&i_dogovor=000120230525093554&pay-type=sbp&s_rnd=r1&deliv_cmp=440181753&deliv_point=cdekSST4",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"basket",
										"order"
									],
									"query": [
										{
											"key": "skl",
											"value": "1000"
										},
										{
											"key": "i_dogovor",
											"value": "000120230525093554"
										},
										{
											"key": "pay-type",
											"value": "sbp"
										},
										{
											"key": "s_rnd",
											"value": "r1"
										},
										{
											"key": "deliv_cmp",
											"value": "440181753"
										},
										{
											"key": "deliv_point",
											"value": "cdekSST4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "basket/sum0",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check invoice/iddoc/email\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test(\"sum in basket is empty\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.basket_sum).to.equal(\"0.00\");\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/basket/sum?session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"basket",
										"sum"
									],
									"query": [
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "invoice/id-doc/delivery",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check delivery/point/create-cdek-delivery\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"pm.collectionVariables.set(\"today\", moment().format(\"DD/MM/YYYY\"));\r",
											"//const dateNow = new Date();\r",
											"//pm.collectionVariables.set('currentDate', dateNow.toISOString());\r",
											"//const dateNow = require('dateNow');\r",
											"//pm.collectionVariables.set('currentDate',dateNow().format(\"DD/MM/YYYY\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "session-id",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "adr",
											"value": "{{id_cdek3}}",
											"type": "text"
										},
										{
											"key": "doc_369",
											"value": "{{doc_369_cdek1}}",
											"type": "text"
										},
										{
											"key": "time",
											"value": "10:00",
											"type": "text"
										},
										{
											"key": "phone",
											"value": "+7(543) 453 - 45 - 34",
											"type": "text"
										},
										{
											"key": "t525",
											"value": "600",
											"type": "text"
										},
										{
											"key": "vid",
											"value": "Стандартная: доставка по графику",
											"type": "text"
										},
										{
											"key": "ds_man",
											"value": "9035742",
											"type": "text"
										},
										{
											"key": "time_po",
											"value": "21:00",
											"type": "text"
										},
										{
											"key": "shabl",
											"value": "1359762520",
											"type": "text"
										},
										{
											"key": "deliv_cmp",
											"value": "440181753",
											"type": "text"
										},
										{
											"key": "applic_final",
											"value": "true",
											"type": "text"
										},
										{
											"key": "oper",
											"value": "add",
											"type": "text"
										},
										{
											"key": "RCP_NM",
											"value": "Крас Ал леон",
											"type": "text"
										},
										{
											"key": "date_z",
											"value": "{{today}}",
											"type": "text"
										},
										{
											"key": "date",
											"value": "{{today}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{host1}}/api/ipro/invoice/{{pay_doc3}}/delivery",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"invoice",
										"{{pay_doc3}}",
										"delivery"
									]
								}
							},
							"response": []
						},
						{
							"name": "invoice/pay_doc1/pay_card cdek",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//invoice/pay_doc1/pay_card\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/invoice/{{pay_doc3}}/pay_card?type=ipro&returnUrl=https%3A%2F%2Fidev.etm.ru%2Fipro3%2Fpayment%2Fsuccess%2F&failUrl=https%3A%2F%2Fidev.etm.ru%2Fipro3%2Fpayment%2Ffail%2F&doc_369={{doc_369_cdek1}}&amount=45.00&session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"invoice",
										"{{pay_doc3}}",
										"pay_card"
									],
									"query": [
										{
											"key": "type",
											"value": "ipro"
										},
										{
											"key": "returnUrl",
											"value": "https%3A%2F%2Fidev.etm.ru%2Fipro3%2Fpayment%2Fsuccess%2F"
										},
										{
											"key": "failUrl",
											"value": "https%3A%2F%2Fidev.etm.ru%2Fipro3%2Fpayment%2Ffail%2F"
										},
										{
											"key": "doc_369",
											"value": "{{doc_369_cdek1}}"
										},
										{
											"key": "amount",
											"value": "45.00"
										},
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "invoice/pay_doc1_pay_card/pay_card_check-cdek",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//invoice/pay_doc1/pay_card\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "session-id",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{host1}}/api/ipro/invoice/{{pay_doc3}}/pay_card_check",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"invoice",
										"{{pay_doc3}}",
										"pay_card_check"
									]
								}
							},
							"response": []
						},
						{
							"name": "invoice/iddoc/email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check invoice/iddoc/email\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/invoice/{{pay_doc3}}?session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"invoice",
										"{{pay_doc3}}"
									],
									"query": [
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "invoice/iddoc/print2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check invoice/iddoc/print2\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/invoice/{{pay_doc3}}/print2/40040857?action=changeStatus&session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"invoice",
										"{{pay_doc3}}",
										"print2",
										"40040857"
									],
									"query": [
										{
											"key": "action",
											"value": "changeStatus"
										},
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "delivery-payment",
			"item": [
				{
					"name": "bill",
					"item": [
						{
							"name": "invoice/id/copy-to-basket",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check copy doc to basket\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "session-id",
											"value": "{{sessionToken}}",
											"type": "text"
										},
										{
											"key": "city",
											"value": "78",
											"type": "text"
										},
										{
											"key": "gds",
											"value": "9091760-0-0",
											"type": "text"
										},
										{
											"key": "val",
											"value": "1",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{host1}}/api/ipro/invoice/{{pay_doc1}}/copy?session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"invoice",
										"{{pay_doc1}}",
										"copy"
									],
									"query": [
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "basket-order-mindate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check basket-order\r",
											"var min_date;\r",
											"pm.test(\"min_datea_vail\", function () {\r",
											"// Perform id_cdek and extract id_cdek from the response\r",
											"    min_date = pm.response.json().data[\"can-reserve\"].max_dateotgr;\r",
											"    pm.environment.set(\"min_date\", min_date);\r",
											"});\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/basket/order?skl=&goods=&session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"basket",
										"order"
									],
									"query": [
										{
											"key": "skl",
											"value": ""
										},
										{
											"key": "goods",
											"value": ""
										},
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "delivery/current",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check list current delivery \r",
											"var inv_id;\r",
											"pm.test(\"inv_id_delivery\", function () {\r",
											"// Perform id_cdek and extract id_cdek from the response\r",
											"    inv_id = pm.response.json().data.rows[0].inv_id;\r",
											"    pm.environment.set(\"inv_id\", inv_id);\r",
											"});\r",
											"var id_deliv;\r",
											"pm.test(\"id_delivery\", function () {\r",
											"// Perform id_cdek and extract id_cdek from the response\r",
											"    id_deliv = pm.response.json().data.rows[0].id;\r",
											"    pm.environment.set(\"id_deliv\", id_deliv);\r",
											"});\r",
											"\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 2000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "session-id",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{host1}}/api/ipro/delivery/current",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"delivery",
										"current"
									]
								}
							},
							"response": []
						},
						{
							"name": "delivery/point/id/date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check list current delivery \r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 2000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/delivery/point/{{qpoint}}/date?invId=1359762520&month={{month}}&year=2024&ds_st_code=11&toReserve=yes&session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"delivery",
										"point",
										"{{qpoint}}",
										"date"
									],
									"query": [
										{
											"key": "invId",
											"value": "1359762520"
										},
										{
											"key": "month",
											"value": "{{month}}"
										},
										{
											"key": "year",
											"value": "2024"
										},
										{
											"key": "ds_st_code",
											"value": "11"
										},
										{
											"key": "toReserve",
											"value": "yes"
										},
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "delivery/point/id/date_tarif",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check delivery/point/id/date_tarif\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 2000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/delivery/point/1-7384689153/date_tarif?invId=1359762520&ds_st_code=11&coord=60.049986,30.436557&volume=0.000002&weight=0.01&maxLen=0.065&InvPriceSum=4.86&shopHas=no&session-id={{sessionToken}}&minDateAvail={{min_date}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"delivery",
										"point",
										"1-7384689153",
										"date_tarif"
									],
									"query": [
										{
											"key": "invId",
											"value": "1359762520"
										},
										{
											"key": "ds_st_code",
											"value": "11"
										},
										{
											"key": "coord",
											"value": "60.049986,30.436557"
										},
										{
											"key": "volume",
											"value": "0.000002"
										},
										{
											"key": "weight",
											"value": "0.01"
										},
										{
											"key": "maxLen",
											"value": "0.065"
										},
										{
											"key": "InvPriceSum",
											"value": "4.86"
										},
										{
											"key": "shopHas",
											"value": "no"
										},
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										},
										{
											"key": "minDateAvail",
											"value": "{{min_date}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "delivery/inv_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check delivery_id\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 2000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "session-id",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{host1}}/api/ipro/delivery/{{inv_id}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"delivery",
										"{{inv_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "post/basket/order-delivery-etm",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check basketorder delivery etm\r",
											"var pay_docdeliv;\r",
											"pm.test(\"create order cdek doc\", function () {\r",
											"// Perform pay_doc1 and extract pay_doc1 from the response\r",
											"    pay_docdeliv=pm.response.json().data.pay_doc1;\r",
											"    pm.environment.set(\"pay_docdeliv\", pay_docdeliv);\r",
											"});\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 2000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "session-id",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{host1}}/api/ipro/basket/order?qpoint={{qpoint}}&skl=1000&i_dogovor=000120230525093554&pay-type=bill&s_rnd=r1&qdeliv_method=separate_line",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"basket",
										"order"
									],
									"query": [
										{
											"key": "qpoint",
											"value": "{{qpoint}}"
										},
										{
											"key": "skl",
											"value": "1000"
										},
										{
											"key": "i_dogovor",
											"value": "000120230525093554"
										},
										{
											"key": "pay-type",
											"value": "bill"
										},
										{
											"key": "s_rnd",
											"value": "r1"
										},
										{
											"key": "qdeliv_method",
											"value": "separate_line"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "invoice/pay_docdeliv/current_delivery_add",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check invoice/id/current_delivery_add\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 2000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://idev.etm.ru/api/ipro/invoice/{{pay_docdeliv}}/current_delivery_add?id={{id_deliv}}",
									"protocol": "https",
									"host": [
										"idev",
										"etm",
										"ru"
									],
									"path": [
										"api",
										"ipro",
										"invoice",
										"{{pay_docdeliv}}",
										"current_delivery_add"
									],
									"query": [
										{
											"key": "id",
											"value": "{{id_deliv}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "pay_card",
					"item": [
						{
							"name": "basket-add-check-order -delivery",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check basket_add-LC\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 2000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "session-id",
											"value": "{{sessionToken}}",
											"type": "text"
										},
										{
											"key": "city",
											"value": "78",
											"type": "text"
										},
										{
											"key": "gds",
											"value": "{{gds}}",
											"type": "text"
										},
										{
											"key": "val",
											"value": "1",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{host1}}/api/ipro/basket/add",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"basket",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "basket-order-mindate-delivery",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check basket-order\r",
											"var min_date1;\r",
											"pm.test(\"min_datea_vail_card\", function () {\r",
											"// Perform id_cdek and extract id_cdek from the response\r",
											"    min_date1 = pm.response.json().data[\"can-reserve\"].max_dateotgr;\r",
											"    pm.environment.set(\"min_date1\", min_date1);\r",
											"});\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/basket/order?skl=&goods=&session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"basket",
										"order"
									],
									"query": [
										{
											"key": "skl",
											"value": ""
										},
										{
											"key": "goods",
											"value": ""
										},
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "delivery/time/s",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check delivery/time\r",
											"\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/delivery/time?invId=1359762520&date={{today}}&s_po=s&ds_st_code=11&goodsNetNum=1-7384689292&session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"delivery",
										"time"
									],
									"query": [
										{
											"key": "invId",
											"value": "1359762520"
										},
										{
											"key": "date",
											"value": "{{today}}"
										},
										{
											"key": "s_po",
											"value": "s"
										},
										{
											"key": "ds_st_code",
											"value": "11"
										},
										{
											"key": "goodsNetNum",
											"value": "1-7384689292"
										},
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "delivery/delivery_tzr",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check delivery/delivery_tzr\r",
											"\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/delivery/delivery_tzr?coord=60.055816%2C30.431966&volume=0.000002&weight=0.01&maxLen=0.065&InvPriceSum=4.86&date={{today}}&city=78&session-id={{sessionToken}}&goodsNetNum=1-7384689292&=",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"delivery",
										"delivery_tzr"
									],
									"query": [
										{
											"key": "coord",
											"value": "60.055816%2C30.431966"
										},
										{
											"key": "volume",
											"value": "0.000002"
										},
										{
											"key": "weight",
											"value": "0.01"
										},
										{
											"key": "maxLen",
											"value": "0.065"
										},
										{
											"key": "InvPriceSum",
											"value": "4.86"
										},
										{
											"key": "date",
											"value": "{{today}}"
										},
										{
											"key": "city",
											"value": "78"
										},
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										},
										{
											"key": "goodsNetNum",
											"value": "1-7384689292"
										},
										{
											"key": "",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "delivery/time/po",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check delivery/time/po\r",
											"\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/delivery/time?invId=1359762520&date={{today}}&s_po=po&from=12:00&ds_st_code=11&goodsNetNum=1-7384689292&session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"delivery",
										"time"
									],
									"query": [
										{
											"key": "invId",
											"value": "1359762520"
										},
										{
											"key": "date",
											"value": "{{today}}"
										},
										{
											"key": "s_po",
											"value": "po"
										},
										{
											"key": "from",
											"value": "12:00"
										},
										{
											"key": "ds_st_code",
											"value": "11"
										},
										{
											"key": "goodsNetNum",
											"value": "1-7384689292"
										},
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "delivery/point/id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check delivery/point/id-cdek\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/delivery/point/1-7384689292?st=11&cls17=%D0%A1%D0%97%D0%A1%D0%9F%D0%91&t-code=7ecc223b-ea64-44fc-8153-ed5a6b9c6d4c&t-name=%D0%9B%D0%B5%D0%BD%D0%B8%D0%BD%D0%B3%D1%80%D0%B0%D0%B4%D1%81%D0%BA%D0%B0%D1%8F%20%D0%BE%D0%B1%D0%BB%D0%B0%D1%81%D1%82%D1%8C,%20%D0%92%D1%81%D0%B5%D0%B2%D0%BE%D0%BB%D0%BE%D0%B6%D1%81%D0%BA%D0%B8%D0%B9%20%D1%80%D0%B0%D0%B9%D0%BE%D0%BD,%20%D0%9C%D1%83%D1%80%D0%B8%D0%BD%D0%BE,%20%D0%9F%D0%B5%D1%82%D1%80%D0%BE%D0%B2%D1%81%D0%BA%D0%B8%D0%B9%20%D0%B1%D1%83%D0%BB%D1%8C%D0%B2%D0%B0%D1%80,%207&t-adr=%D0%9B%D0%B5%D0%BD%D0%B8%D0%BD%D0%B3%D1%80%D0%B0%D0%B4%D1%81%D0%BA%D0%B0%D1%8F%20%D0%BE%D0%B1%D0%BB%D0%B0%D1%81%D1%82%D1%8C,%20%D0%92%D1%81%D0%B5%D0%B2%D0%BE%D0%BB%D0%BE%D0%B6%D1%81%D0%BA%D0%B8%D0%B9%20%D1%80%D0%B0%D0%B9%D0%BE%D0%BD,%20%D0%9C%D1%83%D1%80%D0%B8%D0%BD%D0%BE,%20%D0%9F%D0%B5%D1%82%D1%80%D0%BE%D0%B2%D1%81%D0%BA%D0%B8%D0%B9%20%D0%B1%D1%83%D0%BB%D1%8C%D0%B2%D0%B0%D1%80,%207&t-gps=60.055816,30.431966&t-info=%D1%82%D0%B5%D1%81%D1%82&t-time=&t-rn14=&t-rn14-l=&t-kont=%D0%90%D0%BB%D0%B5%D0%BA%D1%81%D0%B0%D0%BD%D0%B4%D1%80%D0%BE%D0%B2%D0%B0%20%D0%90%D0%BD%D0%B0%D1%81%D1%82%D0%B0%D1%81%D0%B8%D1%8F%20%D0%A1%D0%B5%D1%80%D0%B3%D0%B5%D0%B5%D0%B2%D0%BD%D0%B0&t-rab=12&t-din=13&t-tel=+7(435)353-45-34&session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"delivery",
										"point",
										"1-7384689292"
									],
									"query": [
										{
											"key": "st",
											"value": "11"
										},
										{
											"key": "cls17",
											"value": "%D0%A1%D0%97%D0%A1%D0%9F%D0%91"
										},
										{
											"key": "t-code",
											"value": "7ecc223b-ea64-44fc-8153-ed5a6b9c6d4c"
										},
										{
											"key": "t-name",
											"value": "%D0%9B%D0%B5%D0%BD%D0%B8%D0%BD%D0%B3%D1%80%D0%B0%D0%B4%D1%81%D0%BA%D0%B0%D1%8F%20%D0%BE%D0%B1%D0%BB%D0%B0%D1%81%D1%82%D1%8C,%20%D0%92%D1%81%D0%B5%D0%B2%D0%BE%D0%BB%D0%BE%D0%B6%D1%81%D0%BA%D0%B8%D0%B9%20%D1%80%D0%B0%D0%B9%D0%BE%D0%BD,%20%D0%9C%D1%83%D1%80%D0%B8%D0%BD%D0%BE,%20%D0%9F%D0%B5%D1%82%D1%80%D0%BE%D0%B2%D1%81%D0%BA%D0%B8%D0%B9%20%D0%B1%D1%83%D0%BB%D1%8C%D0%B2%D0%B0%D1%80,%207"
										},
										{
											"key": "t-adr",
											"value": "%D0%9B%D0%B5%D0%BD%D0%B8%D0%BD%D0%B3%D1%80%D0%B0%D0%B4%D1%81%D0%BA%D0%B0%D1%8F%20%D0%BE%D0%B1%D0%BB%D0%B0%D1%81%D1%82%D1%8C,%20%D0%92%D1%81%D0%B5%D0%B2%D0%BE%D0%BB%D0%BE%D0%B6%D1%81%D0%BA%D0%B8%D0%B9%20%D1%80%D0%B0%D0%B9%D0%BE%D0%BD,%20%D0%9C%D1%83%D1%80%D0%B8%D0%BD%D0%BE,%20%D0%9F%D0%B5%D1%82%D1%80%D0%BE%D0%B2%D1%81%D0%BA%D0%B8%D0%B9%20%D0%B1%D1%83%D0%BB%D1%8C%D0%B2%D0%B0%D1%80,%207"
										},
										{
											"key": "t-gps",
											"value": "60.055816,30.431966"
										},
										{
											"key": "t-info",
											"value": "%D1%82%D0%B5%D1%81%D1%82"
										},
										{
											"key": "t-time",
											"value": ""
										},
										{
											"key": "t-rn14",
											"value": ""
										},
										{
											"key": "t-rn14-l",
											"value": ""
										},
										{
											"key": "t-kont",
											"value": "%D0%90%D0%BB%D0%B5%D0%BA%D1%81%D0%B0%D0%BD%D0%B4%D1%80%D0%BE%D0%B2%D0%B0%20%D0%90%D0%BD%D0%B0%D1%81%D1%82%D0%B0%D1%81%D0%B8%D1%8F%20%D0%A1%D0%B5%D1%80%D0%B3%D0%B5%D0%B5%D0%B2%D0%BD%D0%B0"
										},
										{
											"key": "t-rab",
											"value": "12"
										},
										{
											"key": "t-din",
											"value": "13"
										},
										{
											"key": "t-tel",
											"value": "+7(435)353-45-34"
										},
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "basket/order-delivery-card",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check basket/order-pickupLC\r",
											"var pay_doc4;\r",
											"pm.test(\"create order cdek doc\", function () {\r",
											"// Perform pay_doc1 and extract pay_doc1 from the response\r",
											"    pay_doc4=pm.response.json().data.pay_doc1;\r",
											"    pm.environment.set(\"pay_doc4\", pay_doc4);\r",
											"});\r",
											"console.log(pay_doc4);\r",
											"var doc_369_deli;\r",
											"pm.test(\"create order cdek doc369\", function () {\r",
											"// Perform pay_doc_369deli and extract doc_369 from the response\r",
											"    doc_369_deli=pm.response.json().data.doc_369;\r",
											"    pm.environment.set(\"doc_369_deli\", doc_369_deli);\r",
											"});\r",
											"console.log(doc_369_deli);\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "session-id",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{host1}}/api/ipro/basket/order?skl=1000&i_dogovor=000120230525093554&pay-type=card_now&s_rnd=r1&qpoint=1-7384689292&delivery=720",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"basket",
										"order"
									],
									"query": [
										{
											"key": "skl",
											"value": "1000"
										},
										{
											"key": "i_dogovor",
											"value": "000120230525093554"
										},
										{
											"key": "pay-type",
											"value": "card_now"
										},
										{
											"key": "s_rnd",
											"value": "r1"
										},
										{
											"key": "qpoint",
											"value": "1-7384689292"
										},
										{
											"key": "delivery",
											"value": "720"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "basket/sum0",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check invoice/iddoc/email\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test(\"sum in basket is empty\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.basket_sum).to.equal(\"0.00\");\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/basket/sum?session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"basket",
										"sum"
									],
									"query": [
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "invoice/id-doc/delivery",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check delivery/point/create-cdek-delivery\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"pm.collectionVariables.set(\"today\", moment().format(\"DD/MM/YYYY\"));\r",
											"//const dateNow = new Date();\r",
											"//pm.collectionVariables.set('currentDate', dateNow.toISOString());\r",
											"//const dateNow = require('dateNow');\r",
											"//pm.collectionVariables.set('currentDate',dateNow().format(\"DD/MM/YYYY\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "session-id",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "adr",
											"value": "1-7384689292",
											"type": "text"
										},
										{
											"key": "doc_369",
											"value": "{{doc_369_deli}}",
											"type": "text"
										},
										{
											"key": "time",
											"value": "10:00",
											"type": "text"
										},
										{
											"key": "phone",
											"value": "+7(543) 453 - 45 - 34",
											"type": "text"
										},
										{
											"key": "t525",
											"value": "600",
											"type": "text"
										},
										{
											"key": "vid",
											"value": "Стандартная: доставка по графику",
											"type": "text"
										},
										{
											"key": "ds_man",
											"value": "9035742",
											"type": "text"
										},
										{
											"key": "time_po",
											"value": "21:00",
											"type": "text"
										},
										{
											"key": "shabl",
											"value": "1359762520",
											"type": "text"
										},
										{
											"key": "deliv_cmp",
											"value": "440181753",
											"type": "text"
										},
										{
											"key": "applic_final",
											"value": "true",
											"type": "text"
										},
										{
											"key": "oper",
											"value": "add",
											"type": "text"
										},
										{
											"key": "RCP_NM",
											"value": "Крас Ал леон",
											"type": "text"
										},
										{
											"key": "date_z",
											"value": "{{today}}",
											"type": "text"
										},
										{
											"key": "date",
											"value": "{{today}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{host1}}/api/ipro/invoice/{{pay_doc4}}/delivery",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"invoice",
										"{{pay_doc4}}",
										"delivery"
									]
								}
							},
							"response": []
						},
						{
							"name": "invoice/pay_doc4/pay_card cdek",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//invoice/pay_doc4/pay_card\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/invoice/{{pay_doc4}}/pay_card?type=ipro&returnUrl=https%3A%2F%2Fidev.etm.ru%2Fipro3%2Fpayment%2Fsuccess%2F&failUrl=https%3A%2F%2Fidev.etm.ru%2Fipro3%2Fpayment%2Ffail%2F&doc_369={{doc_369_deli}}&amount=45.00&session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"invoice",
										"{{pay_doc4}}",
										"pay_card"
									],
									"query": [
										{
											"key": "type",
											"value": "ipro"
										},
										{
											"key": "returnUrl",
											"value": "https%3A%2F%2Fidev.etm.ru%2Fipro3%2Fpayment%2Fsuccess%2F"
										},
										{
											"key": "failUrl",
											"value": "https%3A%2F%2Fidev.etm.ru%2Fipro3%2Fpayment%2Ffail%2F"
										},
										{
											"key": "doc_369",
											"value": "{{doc_369_deli}}"
										},
										{
											"key": "amount",
											"value": "45.00"
										},
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "invoice/pay_doc1_pay_card/pay_card_check-cdek",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//invoice/pay_doc1/pay_card\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "session-id",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{host1}}/api/ipro/invoice/{{pay_doc4}}/pay_card_check",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"invoice",
										"{{pay_doc4}}",
										"pay_card_check"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "estimates",
			"item": [
				{
					"name": "in",
					"item": [
						{
							"name": "Create estimation",
							"item": [
								{
									"name": "Add to cart",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"adding to cart from est\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"})  ",
													"",
													"pm.test(\"Response has the required fields - status and data\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData).to.be.an('object');",
													"  pm.expect(responseData.status).to.exist;",
													"  pm.expect(responseData.data).to.exist;",
													"});",
													"",
													"",
													"pm.test(\"Status object contains code and message\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData.status).to.exist;",
													"  pm.expect(responseData.status.code).to.exist;",
													"  pm.expect(responseData.status.message).to.exist;",
													"});",
													"",
													"",
													"pm.test(\"Ensure that 'change_price' in the 'data' object is a boolean\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData.data).to.be.an('object');",
													"    pm.expect(responseData.data.change_price).to.be.a('boolean');",
													"});",
													"",
													"",
													"pm.test(\"Verify that basket_lines in the data object is a number\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData.data).to.be.an('object');",
													"    pm.expect(responseData.data.basket_lines).to.be.a('number');",
													"});",
													"",
													"",
													"pm.test(\"GdsList in data object is an array and is empty\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData.data.gdsList).to.be.an('array').that.is.empty;",
													"});",
													"",
													"// Test for response schema",
													"pm.test(\"Response schema is valid\", function () {",
													"  var schema = {",
													"    type: \"object\",",
													"    properties: {",
													"      status: {",
													"        type: \"object\",",
													"        properties: {",
													"          code: { type: \"number\" },",
													"          message: { type: \"string\" }",
													"        },",
													"        required: [\"code\", \"message\"]",
													"      },",
													"      data: {",
													"        type: \"object\",",
													"        properties: {",
													"          change_price: { type: \"boolean\" },",
													"          basket_last_line_num: { type: \"string\" },",
													"          basket_lines: { type: \"number\" },",
													"          basket_sum: { type: \"string\" },",
													"          gdsList: { type: \"array\" }",
													"        },",
													"        required: [\"change_price\", \"basket_last_line_num\", \"basket_lines\", \"basket_sum\", \"gdsList\"]",
													"      }",
													"    },",
													"    required: [\"status\", \"data\"]",
													"  };",
													"",
													"  var response = pm.response.json();",
													"  pm.expect(tv4.validate(response, schema)).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"session-id\": \"{{session}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{host1}}/api/ipro/estimate/1-2147350777/copy?session-id={{sessionToken}}",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"estimate",
												"1-2147350777",
												"copy"
											],
											"query": [
												{
													"key": "session",
													"value": "",
													"disabled": true
												},
												{
													"key": "session-id",
													"value": "{{sessionToken}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create est",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"create est\", function () {\r",
													"    let docNameEst = pm.response.json().data.docName;\r",
													"    pm.environment.set('docNameEst', docNameEst);\r",
													"    pm.response.to.have.status(200);\r",
													"})\r",
													"\r",
													"pm.test(\"create dates\", function(){\r",
													"    const now = require('moment');\r",
													"    pm.environment.set(\"now\", now().format(\"DD-MM-YYYY\"));\r",
													"\r",
													"    const current = require('moment');\r",
													"    pm.environment.set(\"current\", current.utc().add(3, 'hours').format('YYYY-MM-DD HH:mm:ss'));\r",
													"\r",
													"    const present = require(\"moment\")\r",
													"    pm.environment.set(\"present\", present().add(-6, 'month').format(\"DD-MM-YYYY\"))\r",
													"\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "https://{{host1}}/api/ipro/basket/estimate?tovzak=&pr_object=&i_dogovor=000120230525093554&session-id={{sessionToken}}",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"basket",
												"estimate"
											],
											"query": [
												{
													"key": "tovzak",
													"value": ""
												},
												{
													"key": "pr_object",
													"value": ""
												},
												{
													"key": "i_dogovor",
													"value": "000120230525093554"
												},
												{
													"key": "session-id",
													"value": "{{sessionToken}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find est and open",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"find est\", function () {",
													"    let listOfEst = pm.response.json().data.rows",
													"    for (let i = 0; i < 10; i++) {",
													"        if (listOfEst[i].num === pm.environment.get(\"docNameEst\")){",
													"            pm.environment.set('id_est', listOfEst[i].id);",
													"            break",
													"        }",
													"}",
													"    pm.response.to.have.status(200);",
													"})",
													"",
													"pm.test(\"Response has the required fields\", function () {",
													"    const responseData = pm.response.json().data.rows;",
													"",
													"    responseData.forEach(function(row) {",
													"        pm.expect(row).to.include.all.keys('id', 'folders', 'author', 'num', 'date', 'sum', 'sum98', 'oper', 'lines', 'ps', 'agreed', 'rowid835', 'pro_id', 'pro_name');",
													"    });",
													"});",
													"",
													"",
													"pm.test(\"Rows array should not be empty\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData.data.rows).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"",
													"pm.test(\"Records field is a non-negative integer\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.data.records).to.be.a('number').and.to.be.at.least(0);",
													"});",
													"",
													"",
													"pm.test(\"Ensure that status code is 200\", function () {",
													"  const responseData = pm.response.json();",
													"  pm.expect(responseData.status.code).to.equal(200);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{host1}}/api/ipro/estimate?author=&d1={{present}}&d2={{now}}&usr-inv-num=&status=e0&sidx=&sord=&page=1&rows=10&session-id={{sessionToken}}&pro_id=",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"estimate"
											],
											"query": [
												{
													"key": "author",
													"value": ""
												},
												{
													"key": "d1",
													"value": "{{present}}"
												},
												{
													"key": "d2",
													"value": "{{now}}"
												},
												{
													"key": "usr-inv-num",
													"value": ""
												},
												{
													"key": "status",
													"value": "e0"
												},
												{
													"key": "sidx",
													"value": ""
												},
												{
													"key": "sord",
													"value": ""
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "rows",
													"value": "10"
												},
												{
													"key": "session-id",
													"value": "{{sessionToken}}"
												},
												{
													"key": "pro_id",
													"value": ""
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Actions",
							"item": [
								{
									"name": "Name",
									"item": [
										{
											"name": "Open est and ...",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"response is ok\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{host1}}/api/ipro/estimate/{{id_est}}?session-id={{sessionToken}}",
													"protocol": "https",
													"host": [
														"{{host1}}"
													],
													"path": [
														"api",
														"ipro",
														"estimate",
														"{{id_est}}"
													],
													"query": [
														{
															"key": "session-id",
															"value": "{{sessionToken}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Change name POST",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"take info from response\", function () {\r",
															"    let signRowid = pm.response.json().data.signRowid\r",
															"    pm.environment.set('signRowid', signRowid);\r",
															"    pm.response.to.have.status(200);\r",
															"})\r",
															"\r",
															"pm.test(\"Response Content-Type is application/json\", function () {\r",
															"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(200);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Status object structure is correct\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"\r",
															"    pm.expect(responseData.status).to.exist.and.to.be.an('object');\r",
															"    pm.expect(responseData.status.code).to.exist.and.to.be.a('number');\r",
															"    pm.expect(responseData.status.message).to.exist.and.to.be.a('string');\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "https://{{host1}}/api/ipro/estimate/{{id_est}}/sign?val=НОВОЕ ИМЯ + {{current}}&sg-code=835&session-id={{sessionToken}}",
													"protocol": "https",
													"host": [
														"{{host1}}"
													],
													"path": [
														"api",
														"ipro",
														"estimate",
														"{{id_est}}",
														"sign"
													],
													"query": [
														{
															"key": "val",
															"value": "НОВОЕ ИМЯ + {{current}}"
														},
														{
															"key": "sg-code",
															"value": "835"
														},
														{
															"key": "session-id",
															"value": "{{sessionToken}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Change name PUT",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"changing name with PUT est\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"})\r",
															"\r",
															"\r",
															"pm.test(\"Response Content-Type is application/json\", function () {\r",
															"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Status code 0 indicates success\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"    \r",
															"    pm.expect(responseData.status.code).to.equal(200);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Data object contains all required fields\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"    \r",
															"    pm.expect(responseData.data).to.include.all.keys('typeApp', 'format', 'session-id', 'request_method', 'syf_prog', 'file-code', 'archive', 'fieldlist', 'invoice', 'val', 'signRowid', 'sysParam_REMOTE_ADDR', 'login_type', 'org', 'org-id', 'user-id', 'user_id', 'man', 'lpr_code', 'withoutArchive');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "https://{{host1}}/api/ipro/estimate/{{id_est}}/sign?val=НОВОЕ ИМЯ ДЛЯ PUT + {{current}}&signRowid={{signRowid}}&session-id={{sessionToken}}",
													"protocol": "https",
													"host": [
														"{{host1}}"
													],
													"path": [
														"api",
														"ipro",
														"estimate",
														"{{id_est}}",
														"sign"
													],
													"query": [
														{
															"key": "val",
															"value": "НОВОЕ ИМЯ ДЛЯ PUT + {{current}}"
														},
														{
															"key": "signRowid",
															"value": "{{signRowid}}"
														},
														{
															"key": "session-id",
															"value": "{{sessionToken}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Export",
									"item": [
										{
											"name": "Export est",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"export est\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "https://{{host1}}/api/ipro/estimate/{{id_est}}/print/40041456?session-id={{sessionToken}}",
													"protocol": "https",
													"host": [
														"{{host1}}"
													],
													"path": [
														"api",
														"ipro",
														"estimate",
														"{{id_est}}",
														"print",
														"40041456"
													],
													"query": [
														{
															"key": "session-id",
															"value": "{{sessionToken}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Place an order",
									"item": [
										{
											"name": "Add specification",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"add specification\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"})\r",
															"\r",
															"pm.test(\"Response Content-Type is 'application/json'\", function () {\r",
															"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(200);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Status object is present in the response\", function () {\r",
															"  const responseData = pm.response.json();\r",
															"  \r",
															"  pm.expect(responseData).to.have.property('status');\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Data object is present in the response\", function () {\r",
															"  const responseData = pm.response.json();\r",
															"  pm.expect(responseData.data).to.exist;\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Id field in the data object is a non-empty string\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"    \r",
															"    pm.expect(responseData).to.be.an('object');\r",
															"    pm.expect(responseData.data.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id field should be a non-empty string\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "https://{{host1}}/api/ipro/estimate/{{id_est}}/specification?session-id={{sessionToken}}",
													"protocol": "https",
													"host": [
														"{{host1}}"
													],
													"path": [
														"api",
														"ipro",
														"estimate",
														"{{id_est}}",
														"specification"
													],
													"query": [
														{
															"key": "session-id",
															"value": "{{sessionToken}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Check for existing spec(est)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('include', function () {\r",
															"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"docNameEst\"));\r",
															"});\r",
															"pm.test(\"response is ok\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"})\r",
															"pm.test(\"Rows array is present and contains at least one element\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"    \r",
															"    pm.expect(responseData).to.be.an('object');\r",
															"    pm.expect(responseData.data.rows).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Rows array should contain at least one element\");\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Status object is present and contains expected fields\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"    \r",
															"    pm.expect(responseData.status).to.exist;\r",
															"    pm.expect(responseData.status).to.have.property('code');\r",
															"    pm.expect(responseData.status).to.have.property('message');\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Content-Type header is set to application/json\", function () {\r",
															"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Data object contains expected fields\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"    \r",
															"    pm.expect(responseData).to.be.an('object');\r",
															"    pm.expect(responseData).to.have.property('data');\r",
															"    pm.expect(responseData.data).to.have.property('rows');\r",
															"    pm.expect(responseData.data).to.have.property('records');\r",
															"    pm.expect(responseData.data).to.have.property('limit');\r",
															"    pm.expect(responseData.data).to.have.property('inv_ankid');\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{host1}}/api/ipro/invoice?session-id={{sessionToken}}&page=1&rows=20&sidx=inv-date&sord=desc&d1={{present}}&d2={{now}}",
													"protocol": "https",
													"host": [
														"{{host1}}"
													],
													"path": [
														"api",
														"ipro",
														"invoice"
													],
													"query": [
														{
															"key": "session-id",
															"value": "{{sessionToken}}"
														},
														{
															"key": "page",
															"value": "1"
														},
														{
															"key": "rows",
															"value": "20"
														},
														{
															"key": "sidx",
															"value": "inv-date"
														},
														{
															"key": "sord",
															"value": "desc"
														},
														{
															"key": "d1",
															"value": "{{present}}"
														},
														{
															"key": "d2",
															"value": "{{now}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Object",
									"item": [
										{
											"name": "Find object",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"find est\", function () {\r",
															"    let codeObj = pm.response.json().data.rows[0].code\r",
															"    pm.environment.set('codeObj', codeObj);\r",
															"    pm.response.to.have.status(200);\r",
															"})\r",
															"\r",
															"pm.test(\"Response Content-Type is application/json\", function () {\r",
															"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Validate status object with code and message fields\", function () {\r",
															"  const responseData = pm.response.json();\r",
															"  \r",
															"  pm.expect(responseData.status).to.exist.and.to.be.an('object');\r",
															"  pm.expect(responseData.status.code).to.exist.and.to.be.a('number');\r",
															"  pm.expect(responseData.status.message).to.exist.and.to.be.a('string');\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Data object contains rows array and records field\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"    \r",
															"    pm.expect(responseData).to.be.an('object');\r",
															"    pm.expect(responseData.data).to.have.property('rows').that.is.an('array');\r",
															"    pm.expect(responseData.data).to.have.property('records');\r",
															"});\r",
															"\r",
															"pm.test(\"Schema is valid\", function () {\r",
															"  var schema = {\r",
															"    type: \"object\",\r",
															"    properties: {\r",
															"      status: {\r",
															"        type: \"object\",\r",
															"        properties: {\r",
															"          code: { type: \"number\" },\r",
															"          message: { type: \"string\" }\r",
															"        },\r",
															"        required: [\"code\", \"message\"]\r",
															"      },\r",
															"      data: {\r",
															"        type: \"object\",\r",
															"        properties: {\r",
															"          rows: { type: \"array\" },\r",
															"          records: { type: \"number\" }\r",
															"        },\r",
															"        required: [\"rows\", \"records\"]\r",
															"      }\r",
															"    },\r",
															"    required: [\"status\", \"data\"]\r",
															"  };\r",
															"\r",
															"  var response = pm.response.json();\r",
															"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{host1}}/api/ipro/info/object/60004392?session-id={{sessionToken}}",
													"protocol": "https",
													"host": [
														"{{host1}}"
													],
													"path": [
														"api",
														"ipro",
														"info",
														"object",
														"60004392"
													],
													"query": [
														{
															"key": "session-id",
															"value": "{{sessionToken}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Add object",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"add object and save est\", function () {\r",
															"    let id_est = pm.response.json().data.id\r",
															"    pm.environment.set('id_est', id_est);\r",
															"    pm.response.to.have.status(200);\r",
															"})\r",
															"\r",
															"pm.test(\"Response Content-Type is application/json\", function () {\r",
															"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(200);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Status object is present in the response\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"    \r",
															"    pm.expect(responseData.status).to.exist;\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Code in the status object is a non-negative integer\", function () {\r",
															"  const responseData = pm.response.json();\r",
															"  \r",
															"  pm.expect(responseData.status).to.exist.and.to.be.an('object');\r",
															"  pm.expect(responseData.status.code).to.exist.and.to.be.a('number').and.to.satisfy((code) => code >= 0, \"Code should be a non-negative integer\");\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Message in status object is a non-empty string\", function () {\r",
															"  const responseData = pm.response.json();\r",
															"\r",
															"  pm.expect(responseData.status).to.be.an('object');\r",
															"  pm.expect(responseData.status.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://{{host1}}/api/ipro/estimate/{{id_est}}?lines={{lines}}&data={{data}}&pr_object={{codeObj}}&session-id={{sessionToken}}",
													"protocol": "https",
													"host": [
														"{{host1}}"
													],
													"path": [
														"api",
														"ipro",
														"estimate",
														"{{id_est}}"
													],
													"query": [
														{
															"key": "lines",
															"value": "{{lines}}"
														},
														{
															"key": "data",
															"value": "{{data}}"
														},
														{
															"key": "pr_object",
															"value": "{{codeObj}}"
														},
														{
															"key": "session-id",
															"value": "{{sessionToken}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Notes",
									"item": [
										{
											"name": "Add note",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.sendRequest('https://' + pm.environment.get('host1') + '/api/ipro/estimate/' + pm.environment.get(\"id_est\") +  '/ps?session-id=' + pm.environment.get(\"sessionToken\"), (error, response) => {\r",
															"    if (error) throw new Error(error);\r",
															"    pm.test(\"check\", function () {\r",
															"        pm.expect(response.json().data.comments.at(-1).text).to.eql('Добавил примечение');\r",
															"    });\r",
															"\r",
															"});\r",
															"pm.test(\"response is ok\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"})\r",
															"\r",
															"pm.test(\"Response Content-Type is application/json\", function () {\r",
															"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(200);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Status object should exist in the response\", function () {\r",
															"  const responseData = pm.response.json();\r",
															"  \r",
															"  pm.expect(responseData).to.be.an('object');\r",
															"  pm.expect(responseData.status).to.exist.and.to.be.an('object');\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Data object is present in the response\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"    \r",
															"    pm.expect(responseData).to.have.property('data');\r",
															"});\r",
															"\r",
															"pm.test(\"Response has the required fields\", function () {\r",
															"  const responseData = pm.response.json();\r",
															"  \r",
															"  pm.expect(responseData).to.be.an('object');\r",
															"  pm.expect(responseData.status).to.exist;\r",
															"  pm.expect(responseData.data).to.exist;\r",
															"  pm.expect(responseData.data.msg).to.exist;\r",
															"  pm.expect(responseData.data.fio).to.exist;\r",
															"  pm.expect(responseData.data.date).to.exist;\r",
															"  pm.expect(responseData.data.time).to.exist;\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "https://{{host1}}/api/ipro/estimate/{{id_est}}/ps?session-id={{sessionToken}}&text=Добавил примечение",
													"protocol": "https",
													"host": [
														"{{host1}}"
													],
													"path": [
														"api",
														"ipro",
														"estimate",
														"{{id_est}}",
														"ps"
													],
													"query": [
														{
															"key": "session-id",
															"value": "{{sessionToken}}"
														},
														{
															"key": "text",
															"value": "Добавил примечение"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "agreement",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.sendRequest('https://' + pm.environment.get('host1') + '/api/ipro/estimate/' + pm.environment.get(\"id_est\") +  '/ps?session-id=' + pm.environment.get(\"sessionToken\"), (error, response) => {\r",
															"    if (error) throw new Error(error);\r",
															"\r",
															"    pm.test(\"check\", function () {\r",
															"        pm.expect(response.json().data.comments.at(-1).agreed).to.eql('1');\r",
															"        // let listOfEst = response.json().data.comments;\r",
															"        // for (let i = listOfEst.length - 1; i >= 0; i--) {\r",
															"        //     console.log(listOfEst[i])\r",
															"        //     pm.expect(listOfEst[i].agreed).to.include(\"1\");\r",
															"        //     break\r",
															"        // }\r",
															"    });\r",
															"});\r",
															"\r",
															"pm.test(\"Response status code is 200\", function () {\r",
															"  pm.expect(pm.response.to.have.status(200));\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Message is an empty string\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"    \r",
															"    pm.expect(responseData.data.msg).to.equal(\"\");\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Fio is a non-empty string\", function () {\r",
															"  const responseData = pm.response.json();\r",
															"  \r",
															"  pm.expect(responseData).to.be.an('object');\r",
															"  pm.expect(responseData.data.fio).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Fio should not be empty\");\r",
															"});\r",
															"\r",
															"pm.test(\"Response has the required fields\", function () {\r",
															"  const responseData = pm.response.json();\r",
															"  \r",
															"  pm.expect(responseData).to.be.an('object');\r",
															"  pm.expect(responseData.status).to.exist;\r",
															"  pm.expect(responseData.data).to.exist;\r",
															"  pm.expect(responseData.data.msg).to.exist;\r",
															"  pm.expect(responseData.data.fio).to.exist;\r",
															"  pm.expect(responseData.data.date).to.exist;\r",
															"  pm.expect(responseData.data.time).to.exist;\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "https://{{host1}}/api/ipro/estimate/{{id_est}}/ps?session-id={{sessionToken}}&sg=1",
													"protocol": "https",
													"host": [
														"{{host1}}"
													],
													"path": [
														"api",
														"ipro",
														"estimate",
														"{{id_est}}",
														"ps"
													],
													"query": [
														{
															"key": "session-id",
															"value": "{{sessionToken}}"
														},
														{
															"key": "sg",
															"value": "1"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "misalignment",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.sendRequest('https://idev.etm.ru/api/ipro/estimate/' + pm.environment.get(\"id_est\") +  '/ps?session-id=' + pm.environment.get(\"sessionToken\"), (error, response) => {\r",
															"    if (error) throw new Error(error);\r",
															"\r",
															"    pm.test(\"check\", function () {\r",
															"        pm.expect(response.json().data.comments.at(-1).agreed).to.eql('2');\r",
															"    });\r",
															"\r",
															"});\r",
															"\r",
															"pm.test(\"Response has the required fields\", function () {\r",
															"  const responseData = pm.response.json();\r",
															"  \r",
															"  pm.expect(responseData).to.be.an('object');\r",
															"  pm.expect(responseData.status).to.exist;\r",
															"  pm.expect(responseData.data).to.exist;\r",
															"  pm.expect(responseData.data.msg).to.exist;\r",
															"  pm.expect(responseData.data.fio).to.exist;\r",
															"  pm.expect(responseData.data.date).to.exist;\r",
															"  pm.expect(responseData.data.time).to.exist;\r",
															"});\r",
															"\r",
															"pm.test(\"Message is an empty string\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"    \r",
															"    pm.expect(responseData.data.msg).to.equal(\"\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(200);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Content-Type is application/json\", function () {\r",
															"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "https://{{host1}}/api/ipro/estimate/{{id_est}}/ps?session-id={{sessionToken}}&sg=2",
													"protocol": "https",
													"host": [
														"{{host1}}"
													],
													"path": [
														"api",
														"ipro",
														"estimate",
														"{{id_est}}",
														"ps"
													],
													"query": [
														{
															"key": "session-id",
															"value": "{{sessionToken}}"
														},
														{
															"key": "sg",
															"value": "2"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					],
					"description": "# **Тесты для проверки функционала внутри смет**"
				},
				{
					"name": "out",
					"item": [
						{
							"name": "Take document",
							"item": [
								{
									"name": "Take cpecification",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.expect(pm.response).to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Content-Type header is application/json\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Msg field is present and not empty\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData).to.have.property('msg').that.is.a('string').and.empty;\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Emails array is present and contains expected number of elements\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData.emails).to.exist;\r",
													"    pm.expect(responseData.emails).to.be.an('array');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Email in the 'emails' array is in a valid email format\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData.emails).to.be.an('array');\r",
													"    responseData.emails.forEach(function (emailObj) {\r",
													"        pm.expect(emailObj.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
													"    });\r",
													"});\r",
													"pm.test(\"Schema is valid\", function () {\r",
													"  var schema = {\r",
													"    type: \"object\",\r",
													"    properties: {\r",
													"      msg: {\r",
													"        type: \"string\",\r",
													"      },\r",
													"      invUsrInvNum: {\r",
													"        type: \"string\",\r",
													"      },\r",
													"      invStatus: {\r",
													"        type: \"string\",\r",
													"      },\r",
													"      invGdTypeCode: {\r",
													"        type: \"string\",\r",
													"      },\r",
													"      invCondFact: {\r",
													"        type: \"string\",\r",
													"      },\r",
													"      operations: {\r",
													"        type: \"string\",\r",
													"      },\r",
													"      invStatusPay: {\r",
													"        type: \"string\",\r",
													"      },\r",
													"      invPays: {\r",
													"        type: \"string\",\r",
													"      },\r",
													"      inviPro: {\r",
													"        type: \"string\",\r",
													"      },\r",
													"      invDelivery: {\r",
													"        type: \"string\",\r",
													"      },\r",
													"      invWriteInvDate: {\r",
													"        type: \"string\",\r",
													"      },\r",
													"      invInvDate: {\r",
													"        type: \"string\",\r",
													"      },\r",
													"      invFirmCode: {\r",
													"        type: \"string\",\r",
													"      },\r",
													"      invNetNum: {\r",
													"        type: \"string\",\r",
													"      },\r",
													"      invWhencre: {\r",
													"        type: \"string\",\r",
													"      },\r",
													"      invTimecre: {\r",
													"        type: \"string\",\r",
													"      },\r",
													"      invWhomcre: {\r",
													"        type: \"string\",\r",
													"      },\r",
													"      invWhenmod: {\r",
													"        type: \"string\",\r",
													"      },\r",
													"      invTimemod: {\r",
													"        type: \"string\",\r",
													"      },\r",
													"      invWhommod: {\r",
													"        type: \"string\",\r",
													"      },\r",
													"      invStoreSum: {\r",
													"        type: \"string\",\r",
													"      },\r",
													"      invContract: {\r",
													"        type: \"string\",\r",
													"      },\r",
													"      invFirm: {\r",
													"        type: \"string\",\r",
													"      },\r",
													"      gruz_pol: {\r",
													"        type: \"array\",\r",
													"      },\r",
													"      emails: {\r",
													"        type: \"array\",\r",
													"        items: {\r",
													"          type: \"object\",\r",
													"          properties: {\r",
													"            email: {\r",
													"              type: \"string\",\r",
													"              format: \"email\",\r",
													"            },\r",
													"            name: {\r",
													"              type: \"string\",\r",
													"            },\r",
													"          },\r",
													"          required: [\"email\", \"name\"],\r",
													"        },\r",
													"      },\r",
													"    },\r",
													"    required: [\"msg\", \"emails\"],\r",
													"  };\r",
													"\r",
													"  var response = pm.response.json();\r",
													"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{host1}}/api/ipro/invoice/{{id_est}}?session-id={{sessionToken}}",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"invoice",
												"{{id_est}}"
											],
											"query": [
												{
													"key": "session-id",
													"value": "{{sessionToken}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Take the tender documentation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"  pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Validate the structure of the status object\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.status).to.be.an('object');\r",
													"    pm.expect(responseData.status.code).to.exist.and.to.be.a('number');\r",
													"    pm.expect(responseData.status.message).to.exist.and.to.be.a('string');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Message in the response should be empty\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData.status.message).to.be.not.empty;\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Schema is valid\", function () {\r",
													"  var schema = {\r",
													"    type: \"object\",\r",
													"    properties: {\r",
													"      status: {\r",
													"        type: \"object\",\r",
													"        properties: {\r",
													"          code: { type: \"number\" },\r",
													"          message: { type: \"string\" }\r",
													"        },\r",
													"        required: [\"code\", \"message\"]\r",
													"      },\r",
													"      data: {\r",
													"        type: \"object\",\r",
													"        properties: {\r",
													"          typeApp: { type: \"string\" },\r",
													"          format: { type: \"string\" },\r",
													"          \"session-id\": { type: \"string\" },\r",
													"          request_method: { type: \"string\" },\r",
													"          syf_prog: { type: \"string\" },\r",
													"          \"file-code\": { type: \"string\" },\r",
													"          archive: { type: \"string\" },\r",
													"          fieldlist: { type: \"string\" },\r",
													"          invoice: { type: \"string\" },\r",
													"          \"sg-code\": { type: \"string\" },\r",
													"          ps: { type: \"string\" },\r",
													"          sysParam_REMOTE_ADDR: { type: \"string\" },\r",
													"          login_type: { type: \"string\" },\r",
													"          org: { type: \"string\" },\r",
													"          \"org-id\": { type: \"string\" },\r",
													"          \"user-id\": { type: \"string\" },\r",
													"          user_id: { type: \"string\" },\r",
													"          man: { type: \"string\" },\r",
													"          lpr_code: { type: \"string\" },\r",
													"          withoutArchive: { type: \"string\" },\r",
													"          signRowid: { type: \"string\" }\r",
													"        }\r",
													"      }\r",
													"    },\r",
													"    required: [\"status\", \"data\"]\r",
													"  };\r",
													"\r",
													"  var response = pm.response.json();\r",
													"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "https://{{host1}}/api/ipro/estimate/{{id_est}}/sign?sg-code=873&ps=doc_num%3D123%24obj_name%3D123%24build_type%3D123%24doc_name%3D123%24prj_state%3D%D0%9F&session-id={{sessionToken}}",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"estimate",
												"{{id_est}}",
												"sign"
											],
											"query": [
												{
													"key": "sg-code",
													"value": "873"
												},
												{
													"key": "ps",
													"value": "doc_num%3D123%24obj_name%3D123%24build_type%3D123%24doc_name%3D123%24prj_state%3D%D0%9F"
												},
												{
													"key": "session-id",
													"value": "{{sessionToken}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Grand Estimate",
							"item": [
								{
									"name": "GrandEstimateCurrentpricetag",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has the required fields\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData).to.have.property('status');\r",
													"    pm.expect(responseData).to.have.property('data');\r",
													"    pm.expect(responseData).to.have.property('error');\r",
													"    pm.expect(responseData).to.have.property('result');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Code in status object is a non-negative integer\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.status).to.be.an('object');\r",
													"    pm.expect(responseData.status.code).to.be.a('number').and.to.satisfy((code) => code >= 0, \"Code should be a non-negative integer\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Message in the status object is a non-empty string\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData.status).to.exist.and.to.be.an('object');\r",
													"    pm.expect(responseData.status.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Data is an empty object\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData.data).to.be.an('object').that.is.empty;\r",
													"});\r",
													"\r",
													"pm.test(\"Schema is valid\", function () {\r",
													"  var schema = {\r",
													"    type: \"object\",\r",
													"    properties: {\r",
													"      status: {\r",
													"        type: \"object\",\r",
													"        properties: {\r",
													"          code: { type: \"number\" },\r",
													"          message: { type: \"string\" }\r",
													"        },\r",
													"        required: [\"code\", \"message\"]\r",
													"      },\r",
													"      data: { type: \"object\" },\r",
													"      error: { type: \"string\" },\r",
													"      result: { type: \"string\" }\r",
													"    },\r",
													"    required: [\"status\", \"data\", \"error\", \"result\"]\r",
													"  };\r",
													"\r",
													"  var response = pm.response.json();\r",
													"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "https://{{host1}}/api/ipro/estimate/{{id_est}}/run/40102162?docType=0&withNDS=yes&mail=degtyarev_nv@etm.ru&actPrice=no&session-id={{sessionToken}}",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"estimate",
												"{{id_est}}",
												"run",
												"40102162"
											],
											"query": [
												{
													"key": "docType",
													"value": "0"
												},
												{
													"key": "withNDS",
													"value": "yes"
												},
												{
													"key": "mail",
													"value": "degtyarev_nv@etm.ru"
												},
												{
													"key": "actPrice",
													"value": "no"
												},
												{
													"key": "session-id",
													"value": "{{sessionToken}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GrandEstimateCurrentpricetagNoNDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has a valid Content-Type header\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Validate the status object\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData.status).to.exist.and.to.be.an('object');\r",
													"    pm.expect(responseData.status.code).to.exist.and.to.be.a('number');\r",
													"    pm.expect(responseData.status.message).to.exist.and.to.be.a('string');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Data object is present in the response\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData).to.have.property('data');\r",
													"});\r",
													"\r",
													"pm.test(\"Schema is valid\", function () {\r",
													"  var schema = {\r",
													"    type: \"object\",\r",
													"    properties: {\r",
													"      status: {\r",
													"        type: \"object\",\r",
													"        properties: {\r",
													"          code: { type: \"number\" },\r",
													"          message: { type: \"string\" }\r",
													"        },\r",
													"        required: [\"code\", \"message\"]\r",
													"      },\r",
													"      data: { type: \"object\" },\r",
													"      error: { type: \"string\" },\r",
													"      result: { type: \"string\" }\r",
													"    },\r",
													"    required: [\"status\", \"data\", \"error\", \"result\"]\r",
													"  };\r",
													"\r",
													"  var response = pm.response.json();\r",
													"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "https://{{host1}}/api/ipro/estimate/{{id_est}}/run/40102162?docType=0&withNDS=no&mail=degtyarev_nv@etm.ru&actPrice=no&session-id={{sessionToken}}",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"estimate",
												"{{id_est}}",
												"run",
												"40102162"
											],
											"query": [
												{
													"key": "docType",
													"value": "0"
												},
												{
													"key": "withNDS",
													"value": "no"
												},
												{
													"key": "mail",
													"value": "degtyarev_nv@etm.ru"
												},
												{
													"key": "actPrice",
													"value": "no"
												},
												{
													"key": "session-id",
													"value": "{{sessionToken}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GrandEstimateSmeta",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has the required fields\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData).to.have.property('status');\r",
													"    pm.expect(responseData).to.have.property('data');\r",
													"    pm.expect(responseData).to.have.property('error');\r",
													"    pm.expect(responseData).to.have.property('result');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Status object contains expected fields - code and message\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData.status).to.be.an('object');\r",
													"    pm.expect(responseData.status).to.have.property('code');\r",
													"    pm.expect(responseData.status).to.have.property('message');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Data object should be empty\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData.data).to.be.an('object').that.is.empty;\r",
													"});\r",
													"\r",
													"pm.test(\"Schema is valid\", function () {\r",
													"  var schema = {\r",
													"    type: \"object\",\r",
													"    properties: {\r",
													"      status: {\r",
													"        type: \"object\",\r",
													"        properties: {\r",
													"          code: { type: \"number\" },\r",
													"          message: { type: \"string\" }\r",
													"        },\r",
													"        required: [\"code\", \"message\"]\r",
													"      },\r",
													"      data: { type: \"object\" },\r",
													"      error: { type: \"string\" },\r",
													"      result: { type: \"string\" }\r",
													"    },\r",
													"    required: [\"status\", \"data\", \"error\", \"result\"]\r",
													"  };\r",
													"\r",
													"  var response = pm.response.json();\r",
													"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
													"});\r",
													"// Test for response content type\r",
													"pm.test(\"Response has content type application/json\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "https://{{host1}}/api/ipro/estimate/{{id_est}}/run/40102162?docType=1&withNDS=yes&mail=degtyarev_nv@etm.ru&actPrice=yes&session-id={{sessionToken}}",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"estimate",
												"{{id_est}}",
												"run",
												"40102162"
											],
											"query": [
												{
													"key": "docType",
													"value": "1"
												},
												{
													"key": "withNDS",
													"value": "yes"
												},
												{
													"key": "mail",
													"value": "degtyarev_nv@etm.ru"
												},
												{
													"key": "actPrice",
													"value": "yes"
												},
												{
													"key": "session-id",
													"value": "{{sessionToken}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GrandEstimateSmetaArtPriceNo",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"  pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has the required fields\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData).to.have.property('status');\r",
													"    pm.expect(responseData).to.have.property('data');\r",
													"    pm.expect(responseData).to.have.property('error');\r",
													"    pm.expect(responseData).to.have.property('result');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 0 and message is empty\", function () {\r",
													"  const responseData = pm.response.json();\r",
													"  \r",
													"  pm.expect(responseData.status.code).to.equal(200);\r",
													"  pm.expect(responseData.status.message).to.be.not.empty;\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Data object is not empty\", function () {\r",
													"  const responseData = pm.response.json();\r",
													"  \r",
													"  pm.expect(responseData.data).to.be.empty;\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Error and result should be empty strings\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData.error).to.be.a('string').and.to.be.empty;\r",
													"    pm.expect(responseData.result).to.be.a('string').and.to.be.not.empty;\r",
													"});\r",
													"\r",
													"// Test for response schema\r",
													"pm.test(\"Response schema is valid\", function () {\r",
													"  var schema = {\r",
													"    type: \"object\",\r",
													"    properties: {\r",
													"      status: {\r",
													"        type: \"object\",\r",
													"        properties: {\r",
													"          code: { type: \"number\" },\r",
													"          message: { type: \"string\" }\r",
													"        },\r",
													"        required: [\"code\", \"message\"]\r",
													"      },\r",
													"      data: { type: \"object\" },\r",
													"      error: { type: \"string\" },\r",
													"      result: { type: \"string\" }\r",
													"    },\r",
													"    required: [\"status\", \"data\", \"error\", \"result\"]\r",
													"  };\r",
													"\r",
													"  var response = pm.response.json();\r",
													"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "https://{{host1}}/api/ipro/estimate/{{id_est}}/run/40102162?docType=1&withNDS=yes&mail=degtyarev_nv@etm.ru&actPrice=no&session-id={{sessionToken}}",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"estimate",
												"{{id_est}}",
												"run",
												"40102162"
											],
											"query": [
												{
													"key": "docType",
													"value": "1"
												},
												{
													"key": "withNDS",
													"value": "yes"
												},
												{
													"key": "mail",
													"value": "degtyarev_nv@etm.ru"
												},
												{
													"key": "actPrice",
													"value": "no"
												},
												{
													"key": "session-id",
													"value": "{{sessionToken}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GrandEstimateSmetaNoNDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has the required fields\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData).to.have.property('status');\r",
													"    pm.expect(responseData).to.have.property('data');\r",
													"    pm.expect(responseData).to.have.property('error');\r",
													"    pm.expect(responseData).to.have.property('result');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Message is a non-empty string\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData.status.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Content-Type header is application/json\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Schema is valid\", function () {\r",
													"  var schema = {\r",
													"    type: \"object\",\r",
													"    properties: {\r",
													"      status: {\r",
													"        type: \"object\",\r",
													"        properties: {\r",
													"          code: { type: \"number\" },\r",
													"          message: { type: \"string\" }\r",
													"        },\r",
													"        required: [\"code\", \"message\"]\r",
													"      },\r",
													"      data: { type: \"object\" },\r",
													"      error: { type: \"string\" },\r",
													"      result: { type: \"string\" }\r",
													"    },\r",
													"    required: [\"status\", \"data\", \"error\", \"result\"]\r",
													"  };\r",
													"\r",
													"  var response = pm.response.json();\r",
													"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
													"});\r",
													"pm.test(\"Response time is within acceptable range\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "https://{{host1}}/api/ipro/estimate/{{id_est}}/run/40102162?docType=1&withNDS=no&mail=degtyarev_nv@etm.ru&actPrice=yes&session-id={{sessionToken}}",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"estimate",
												"{{id_est}}",
												"run",
												"40102162"
											],
											"query": [
												{
													"key": "docType",
													"value": "1"
												},
												{
													"key": "withNDS",
													"value": "no"
												},
												{
													"key": "mail",
													"value": "degtyarev_nv@etm.ru"
												},
												{
													"key": "actPrice",
													"value": "yes"
												},
												{
													"key": "session-id",
													"value": "{{sessionToken}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GrandEstimateSmetaNoArtPriceNoNDS",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "https://{{host1}}/api/ipro/estimate/{{id_est}}/run/40102162?docType=1&withNDS=no&mail=degtyarev_nv@etm.ru&actPrice=no&session-id={{sessionToken}}",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"estimate",
												"{{id_est}}",
												"run",
												"40102162"
											],
											"query": [
												{
													"key": "docType",
													"value": "1"
												},
												{
													"key": "withNDS",
													"value": "no"
												},
												{
													"key": "mail",
													"value": "degtyarev_nv@etm.ru"
												},
												{
													"key": "actPrice",
													"value": "no"
												},
												{
													"key": "session-id",
													"value": "{{sessionToken}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Unite",
							"item": [
								{
									"name": "Add to cart",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"adding to cart from est\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"})  ",
													"",
													"pm.test(\"Response has the required fields - status and data\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData).to.be.an('object');",
													"  pm.expect(responseData.status).to.exist;",
													"  pm.expect(responseData.data).to.exist;",
													"});",
													"",
													"",
													"pm.test(\"Status object contains code and message\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData.status).to.exist;",
													"  pm.expect(responseData.status.code).to.exist;",
													"  pm.expect(responseData.status.message).to.exist;",
													"});",
													"",
													"",
													"pm.test(\"Ensure that 'change_price' in the 'data' object is a boolean\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData.data).to.be.an('object');",
													"    pm.expect(responseData.data.change_price).to.be.a('boolean');",
													"});",
													"",
													"",
													"pm.test(\"Verify that basket_lines in the data object is a number\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData.data).to.be.an('object');",
													"    pm.expect(responseData.data.basket_lines).to.be.a('number');",
													"});",
													"",
													"",
													"pm.test(\"GdsList in data object is an array and is empty\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData.data.gdsList).to.be.an('array').that.is.empty;",
													"});",
													"",
													"// Test for response schema",
													"pm.test(\"Response schema is valid\", function () {",
													"  var schema = {",
													"    type: \"object\",",
													"    properties: {",
													"      status: {",
													"        type: \"object\",",
													"        properties: {",
													"          code: { type: \"number\" },",
													"          message: { type: \"string\" }",
													"        },",
													"        required: [\"code\", \"message\"]",
													"      },",
													"      data: {",
													"        type: \"object\",",
													"        properties: {",
													"          change_price: { type: \"boolean\" },",
													"          basket_last_line_num: { type: \"string\" },",
													"          basket_lines: { type: \"number\" },",
													"          basket_sum: { type: \"string\" },",
													"          gdsList: { type: \"array\" }",
													"        },",
													"        required: [\"change_price\", \"basket_last_line_num\", \"basket_lines\", \"basket_sum\", \"gdsList\"]",
													"      }",
													"    },",
													"    required: [\"status\", \"data\"]",
													"  };",
													"",
													"  var response = pm.response.json();",
													"  pm.expect(tv4.validate(response, schema)).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"session-id\": \"{{session}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{host1}}/api/ipro/estimate/1-2147350777/copy?session-id={{sessionToken}}",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"estimate",
												"1-2147350777",
												"copy"
											],
											"query": [
												{
													"key": "session",
													"value": "",
													"disabled": true
												},
												{
													"key": "session-id",
													"value": "{{sessionToken}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create est",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"create est\", function () {",
													"    let docNameForUnite = pm.response.json().data.docName",
													"    pm.environment.set('docNameForUnite', docNameForUnite);",
													"    pm.response.to.have.status(200);",
													"})",
													"",
													"pm.test(\"Response Content-Type is application/json\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"",
													"pm.test(\"Response includes status with code and message\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData.status).to.exist;",
													"    pm.expect(responseData.status.code).to.exist;",
													"    pm.expect(responseData.status.message).to.exist;",
													"});",
													"",
													"",
													"pm.test(\"Data section includes docName and docDate fields\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData.data).to.be.an('object');",
													"    pm.expect(responseData.data).to.have.property('docName');",
													"    pm.expect(responseData.data).to.have.property('docDate');",
													"});",
													"",
													"",
													"pm.test(\"DocNameForUnite variable is set in the environment\", function () {",
													"    pm.expect(pm.variables.get(\"docNameForUnite\")).to.exist;",
													"});",
													"",
													"// Test for response schema",
													"pm.test(\"Schema is valid\", function () {",
													"  var schema = {",
													"    type: \"object\",",
													"    properties: {",
													"      status: {",
													"        type: \"object\",",
													"        properties: {",
													"          code: { type: \"number\" },",
													"          message: { type: \"string\" }",
													"        },",
													"        required: [\"code\", \"message\"]",
													"      },",
													"      data: {",
													"        type: \"object\",",
													"        properties: {",
													"          docName: { type: \"string\" },",
													"          docDate: { type: \"string\" }",
													"        },",
													"        required: [\"docName\", \"docDate\"]",
													"      }",
													"    },",
													"    required: [\"status\", \"data\"]",
													"  };",
													"",
													"  var response = pm.response.json();",
													"  pm.expect(tv4.validate(response, schema)).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "https://{{host1}}/api/ipro/basket/estimate?tovzak=&pr_object=&i_dogovor=000120230525093554&session-id={{sessionToken}}",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"basket",
												"estimate"
											],
											"query": [
												{
													"key": "tovzak",
													"value": ""
												},
												{
													"key": "pr_object",
													"value": ""
												},
												{
													"key": "i_dogovor",
													"value": "000120230525093554"
												},
												{
													"key": "session-id",
													"value": "{{sessionToken}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find est and open",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"find est\", function () {",
													"    let listOfEst = pm.response.json().data.rows",
													"    for (let i = 0; i < 10; i++) {",
													"        if (listOfEst[i].num === pm.environment.get(\"docNameForUnite\")){",
													"            pm.environment.set('id_estForUnite', listOfEst[i].id);",
													"            break",
													"        }",
													"}",
													"    pm.response.to.have.status(200);",
													"})",
													"",
													"pm.test(\"Response has the required fields\", function () {",
													"    const responseData = pm.response.json().data.rows;",
													"",
													"    responseData.forEach(function(row) {",
													"        pm.expect(row).to.include.all.keys('id', 'folders', 'author', 'num', 'date', 'sum', 'sum98', 'oper', 'lines', 'ps', 'agreed', 'rowid835', 'pro_id', 'pro_name');",
													"    });",
													"});",
													"",
													"",
													"pm.test(\"Rows array should not be empty\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData.data.rows).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"",
													"pm.test(\"Records field is a non-negative integer\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.data.records).to.be.a('number').and.to.be.at.least(0);",
													"});",
													"",
													"",
													"pm.test(\"Ensure that status code is 200\", function () {",
													"  const responseData = pm.response.json();",
													"  pm.expect(responseData.status.code).to.equal(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{host1}}/api/ipro/estimate?author=&d1={{present}}&d2={{now}}&usr-inv-num=&status=e0&sidx=&sord=&page=1&rows=10&session-id={{sessionToken}}&pro_id=",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"estimate"
											],
											"query": [
												{
													"key": "author",
													"value": ""
												},
												{
													"key": "d1",
													"value": "{{present}}"
												},
												{
													"key": "d2",
													"value": "{{now}}"
												},
												{
													"key": "usr-inv-num",
													"value": ""
												},
												{
													"key": "status",
													"value": "e0"
												},
												{
													"key": "sidx",
													"value": ""
												},
												{
													"key": "sord",
													"value": ""
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "rows",
													"value": "10"
												},
												{
													"key": "session-id",
													"value": "{{sessionToken}}"
												},
												{
													"key": "pro_id",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Unite",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"  pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has the required fields - status, data, error, and result\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData).to.have.property('status');\r",
													"    pm.expect(responseData).to.have.property('data');\r",
													"    pm.expect(responseData).to.have.property('error');\r",
													"    pm.expect(responseData).to.have.property('result');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData.status.code).to.equal(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Error should be an empty string\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData.error).to.be.an('string').and.to.be.empty;\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Data is an empty object\", function () {\r",
													"  const responseData = pm.response.json();\r",
													"  \r",
													"  pm.expect(responseData).to.be.an('object');\r",
													"  pm.expect(responseData.data).to.eql({});\r",
													"});\r",
													"\r",
													"pm.test(\"Schema is valid\", function () {\r",
													"  var schema = {\r",
													"    type: \"object\",\r",
													"    properties: {\r",
													"      status: {\r",
													"        type: \"object\",\r",
													"        properties: {\r",
													"          code: { type: \"number\" },\r",
													"          message: { type: \"string\" }\r",
													"        },\r",
													"        required: [\"code\", \"message\"]\r",
													"      },\r",
													"      data: { type: \"object\" },\r",
													"      error: { type: \"string\" },\r",
													"      result: { type: \"string\" }\r",
													"    },\r",
													"    required: [\"status\", \"data\", \"error\", \"result\"]\r",
													"  };\r",
													"\r",
													"  var response = pm.response.json();\r",
													"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "https://{{host1}}/api/ipro/estimate/{{id_estForUnite}}/run/40102081?ch2={{id_est}}&session-id={{sessionToken}}",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"estimate",
												"{{id_estForUnite}}",
												"run",
												"40102081"
											],
											"query": [
												{
													"key": "ch2",
													"value": "{{id_est}}"
												},
												{
													"key": "session-id",
													"value": "{{sessionToken}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Search",
							"item": [
								{
									"name": "Search",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"  pm.expect(pm.response.to.have.status(200));\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Number of records not 0\", function () {\r",
													"  const responseData = pm.response.json();\r",
													"  \r",
													"  pm.expect(responseData.data.records).to.not.equal(0);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Code in status object is 200\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData.status.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Schema is valid\", function () {\r",
													"  var schema = {\r",
													"    type: \"object\",\r",
													"    properties: {\r",
													"      data: {\r",
													"        type: \"object\",\r",
													"        properties: {\r",
													"          rows: {\r",
													"            type: \"array\",\r",
													"            items: {\r",
													"              type: \"object\",\r",
													"              properties: {\r",
													"                id: { type: \"string\" },\r",
													"                folders: { type: \"array\" },\r",
													"                author: { type: \"string\" },\r",
													"                num: { type: \"string\" },\r",
													"                date: { type: \"string\" },\r",
													"                sum: { type: \"string\" },\r",
													"                sum98: { type: \"string\" },\r",
													"                oper: { type: \"string\" },\r",
													"                lines: { type: \"number\" },\r",
													"                ps: { type: \"string\" },\r",
													"                agreed: { type: \"string\" },\r",
													"                rowid835: { type: \"string\" },\r",
													"                pro_id: { type: \"number\" },\r",
													"                pro_name: { type: \"string\" }\r",
													"              },\r",
													"              required: [\"id\", \"folders\", \"author\", \"num\", \"date\", \"sum\", \"sum98\", \"oper\", \"lines\", \"ps\", \"agreed\", \"rowid835\", \"pro_id\", \"pro_name\"]\r",
													"            }\r",
													"          },\r",
													"          records: { type: \"number\" },\r",
													"          limit: { type: \"boolean\" },\r",
													"          inv_ankid: { type: \"number\" }\r",
													"        },\r",
													"        required: [\"rows\", \"records\", \"limit\", \"inv_ankid\"]\r",
													"      },\r",
													"      status: {\r",
													"        type: \"object\",\r",
													"        properties: {\r",
													"          code: { type: \"number\" },\r",
													"          message: { type: \"string\" }\r",
													"        },\r",
													"        required: [\"code\", \"message\"]\r",
													"      }\r",
													"    },\r",
													"    required: [\"data\", \"status\"]\r",
													"  };\r",
													"\r",
													"  var response = pm.response.json();\r",
													"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{host1}}/api/ipro/estimate?author=60004392dnv&d1={{present}}&d2={{now}}&usr-inv-num=&status=e0&sidx=&sord=&page=1&rows=10&session-id={{sessionToken}}&pro_id={{codeObj}}",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"estimate"
											],
											"query": [
												{
													"key": "author",
													"value": "60004392dnv"
												},
												{
													"key": "d1",
													"value": "{{present}}"
												},
												{
													"key": "d2",
													"value": "{{now}}"
												},
												{
													"key": "usr-inv-num",
													"value": ""
												},
												{
													"key": "status",
													"value": "e0"
												},
												{
													"key": "sidx",
													"value": ""
												},
												{
													"key": "sord",
													"value": ""
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "rows",
													"value": "10"
												},
												{
													"key": "session-id",
													"value": "{{sessionToken}}"
												},
												{
													"key": "pro_id",
													"value": "{{codeObj}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Reset the search",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Validate the data object\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData.data).to.exist.and.to.be.an('object');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"All properties are present in each object within the 'rows' array\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData.data.rows).to.be.an('array');\r",
													"    responseData.data.rows.forEach(function(row) {\r",
													"        pm.expect(row).to.include.all.keys('id', 'author', 'num', 'date', 'sum', 'sum98', 'oper', 'lines', 'ps', 'agreed', 'rowid835', 'pro_id', 'pro_name');\r",
													"    });\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Records and limit fields are present in the response\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData.data).to.have.property('records');\r",
													"    pm.expect(responseData.data).to.have.property('limit');\r",
													"});\r",
													"\r",
													"pm.test(\"Schema is valid\", function () {\r",
													"  var schema = {\r",
													"    type: \"object\",\r",
													"    properties: {\r",
													"      data: {\r",
													"        type: \"object\",\r",
													"        properties: {\r",
													"          rows: {\r",
													"            type: \"array\",\r",
													"            items: {\r",
													"              type: \"object\",\r",
													"              properties: {\r",
													"                id: { type: \"string\" },\r",
													"                author: { type: \"string\" },\r",
													"                num: { type: \"string\" },\r",
													"                date: { type: \"string\" },\r",
													"                sum: { type: \"string\" },\r",
													"                sum98: { type: \"string\" },\r",
													"                oper: { type: \"string\" },\r",
													"                lines: { type: \"number\" },\r",
													"                ps: { type: \"string\" },\r",
													"                agreed: { type: \"string\" },\r",
													"                rowid835: { type: \"string\" },\r",
													"                pro_id: { type: \"number\" },\r",
													"                pro_name: { type: \"string\" }\r",
													"              },\r",
													"              required: [\"id\", \"author\", \"num\", \"date\", \"sum\", \"sum98\", \"oper\", \"lines\", \"ps\", \"agreed\", \"rowid835\", \"pro_id\", \"pro_name\"]\r",
													"            }\r",
													"          },\r",
													"          records: { type: \"number\" },\r",
													"          limit: { type: \"boolean\" },\r",
													"          inv_ankid: { type: \"number\" }\r",
													"        },\r",
													"        required: [\"rows\", \"records\", \"limit\", \"inv_ankid\"]\r",
													"      },\r",
													"      status: {\r",
													"        type: \"object\",\r",
													"        properties: {\r",
													"          code: { type: \"number\" },\r",
													"          message: { type: \"string\" }\r",
													"        },\r",
													"        required: [\"code\", \"message\"]\r",
													"      }\r",
													"    },\r",
													"    required: [\"data\", \"status\"]\r",
													"  };\r",
													"\r",
													"  var response = pm.response.json();\r",
													"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{host1}}/api/ipro/estimate?author=&d1={{present}}&d2={{now}}&usr-inv-num=&status=e0&sidx=&sord=&page=1&rows=10&session-id={{sessionToken}}&pro_id=",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"estimate"
											],
											"query": [
												{
													"key": "author",
													"value": ""
												},
												{
													"key": "d1",
													"value": "{{present}}"
												},
												{
													"key": "d2",
													"value": "{{now}}"
												},
												{
													"key": "usr-inv-num",
													"value": ""
												},
												{
													"key": "status",
													"value": "e0"
												},
												{
													"key": "sidx",
													"value": ""
												},
												{
													"key": "sord",
													"value": ""
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "rows",
													"value": "10"
												},
												{
													"key": "session-id",
													"value": "{{sessionToken}}"
												},
												{
													"key": "pro_id",
													"value": ""
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete",
							"item": [
								{
									"name": "Delete",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Content type is application/json\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Validate the structure of the status object\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData.status).to.exist.and.to.be.an('object');\r",
													"    pm.expect(responseData.status.code).to.exist.and.to.be.a('number');\r",
													"    pm.expect(responseData.status.message).to.exist.and.to.be.a('string');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Data object has the correct structure\", function () {\r",
													"  const responseData = pm.response.json();\r",
													"  \r",
													"  pm.expect(responseData.data).to.be.an('object');\r",
													"  pm.expect(responseData.data.id).to.exist;\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Id in the data object must be a non-empty string\", function () {\r",
													"  const responseData = pm.response.json();\r",
													"  \r",
													"  pm.expect(responseData.data).to.be.an('object');\r",
													"  pm.expect(responseData.data.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
													"});\r",
													"\r",
													"pm.test(\"Schema is valid\", function () {\r",
													"  var schema = {\r",
													"    type: \"object\",\r",
													"    properties: {\r",
													"      status: {\r",
													"        type: \"object\",\r",
													"        properties: {\r",
													"          code: { type: \"number\" },\r",
													"          message: { type: \"string\" }\r",
													"        },\r",
													"        required: [\"code\", \"message\"]\r",
													"      },\r",
													"      data: {\r",
													"        type: \"object\",\r",
													"        properties: {\r",
													"          id: { type: \"string\" }\r",
													"        },\r",
													"        required: [\"id\"]\r",
													"      }\r",
													"    },\r",
													"    required: [\"status\", \"data\"]\r",
													"  };\r",
													"\r",
													"  var response = pm.response.json();\r",
													"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{host1}}/api/ipro/estimate/{{id_est}}?request_method=DELETE&session-id={{sessionToken}}",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"estimate",
												"{{id_est}}"
											],
											"query": [
												{
													"key": "request_method",
													"value": "DELETE"
												},
												{
													"key": "session-id",
													"value": "{{sessionToken}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteAgain",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"  pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Content-Type header is application/json\", function () {\r",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Validate the structure of the 'status' object\", function () {\r",
													"  const responseData = pm.response.json();\r",
													"\r",
													"  pm.expect(responseData).to.be.an('object');\r",
													"  pm.expect(responseData.status).to.exist.and.to.be.an('object');\r",
													"  pm.expect(responseData.status.code).to.exist.and.to.be.a('number');\r",
													"  pm.expect(responseData.status.message).to.exist.and.to.be.a('string');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Validate the value of the 'code' field in the 'status' object\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData.status).to.exist.and.to.be.an('object');\r",
													"    pm.expect(responseData.status.code).to.exist;\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Message field in status object is a non-empty string\", function () {\r",
													"  const responseData = pm.response.json();\r",
													"  \r",
													"  pm.expect(responseData.status).to.exist.and.to.be.an('object');\r",
													"  pm.expect(responseData.status.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
													"});\r",
													"\r",
													"pm.test(\"Schema is valid\", function () {\r",
													"  var schema = {\r",
													"    type: \"object\",\r",
													"    properties: {\r",
													"      status: {\r",
													"        type: \"object\",\r",
													"        properties: {\r",
													"          code: { type: \"number\" },\r",
													"          message: { type: \"string\" }\r",
													"        },\r",
													"        required: [\"code\", \"message\"]\r",
													"      }\r",
													"    },\r",
													"    required: [\"status\"]\r",
													"  };\r",
													"\r",
													"  var response = pm.response.json();\r",
													"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{host1}}/api/ipro/estimate/{{id_est}}?request_method=DELETE&session-id={{sessionToken}}",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"estimate",
												"{{id_est}}"
											],
											"query": [
												{
													"key": "request_method",
													"value": "DELETE"
												},
												{
													"key": "session-id",
													"value": "{{sessionToken}}"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"description": "# **Тесты для проверки функционала на главной странице смет**"
				}
			]
		},
		{
			"name": "Objects",
			"item": [
				{
					"name": "Create object",
					"item": [
						{
							"name": "auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Session management using session tokens\r",
											"pm.collectionVariables.get(\"variable_key\");\r",
											"var sessionToken;\r",
											"pm.test(\"Login and session management\", function () {\r",
											"    // Perform login and extract session token from the response\r",
											"    sessionToken = pm.response.json().data.session;\r",
											"    pm.environment.set(\"sessionToken\", sessionToken);\r",
											"});\r",
											"console.log(sessionToken);\r",
											"\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "log",
											"value": "60004392kal",
											"type": "text"
										},
										{
											"key": "pwd",
											"value": "qakras123",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{host1}}/api/ipro/user/login",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"user",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Macroobject list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"get pmoID\", function() {\r",
											"    pmoID = pm.response.json().data.rows[0].pmo_id;\r",
											"    pm.environment.set(\"pmoID\", pmoID);\r",
											"    console.log(pmoID);\r",
											"});\r",
											"\r",
											"pm.test(\"get pmoTransferID\", function() {\r",
											"    pmoTransferID = pm.response.json().data.rows[1].pmo_id;\r",
											"    pm.environment.set(\"pmoTransferID\", pmoTransferID);\r",
											"    console.log(pmoTransferID);\r",
											"});\r",
											"\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json; charset=utf-8"
									},
									{
										"key": "session-id",
										"value": "{{sessionToken}}"
									}
								],
								"url": {
									"raw": "{{host1}}/api/ipro/object/macroList",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"object",
										"macroList"
									]
								}
							},
							"response": []
						},
						{
							"name": "Step 1. Get macroobject",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host1}}/api/ipro/object/getMacroObj/{{pmoID}}?session-id={{sessionToken}}",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"object",
										"getMacroObj",
										"{{pmoID}}"
									],
									"query": [
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Step 2. Get branches",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host1}}/api/ipro/info/search/class/221?len_lim=2&showPS=yes",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"info",
										"search",
										"class",
										"221"
									],
									"query": [
										{
											"key": "len_lim",
											"value": "2"
										},
										{
											"key": "showPS",
											"value": "yes"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Step 2. Get purpose",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host1}}/api/ipro/info/search/class/221?term=02&len_lim=4&showPS=yes",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"info",
										"search",
										"class",
										"221"
									],
									"query": [
										{
											"key": "term",
											"value": "02"
										},
										{
											"key": "len_lim",
											"value": "4"
										},
										{
											"key": "showPS",
											"value": "yes"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Step 3. Get type object",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host1}}/api/ipro/info/search/class/221?term=0201&len_lim=6&showPS=yes",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"info",
										"search",
										"class",
										"221"
									],
									"query": [
										{
											"key": "term",
											"value": "0201"
										},
										{
											"key": "len_lim",
											"value": "6"
										},
										{
											"key": "showPS",
											"value": "yes"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Step 3. Get type building",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host1}}/api/ipro/info/search/class/281?len_lim=2",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"info",
										"search",
										"class",
										"281"
									],
									"query": [
										{
											"key": "len_lim",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Step 4. Stage",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host1}}/api/ipro/info/search/class/280?len_lim=2",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"info",
										"search",
										"class",
										"280"
									],
									"query": [
										{
											"key": "len_lim",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Step 4. Substage",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "authority",
										"value": "idev.etm.ru"
									},
									{
										"key": "accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "accept-language",
										"value": "ru,en;q=0.9,en-GB;q=0.8,en-US;q=0.7"
									},
									{
										"key": "cookie",
										"value": "_userGUID=0:lt4f7kvi:YYFtXMEFQRAnSvc8Ct7SqkM9Hn3ezVKj; popmechanic_sbjs_migrations=popmechanic_1418474375998%3D1%7C%7C%7C1471519752600%3D1%7C%7C%7C1471519752605%3D1; PHPSESSID=3daee01e8ec5e78dfcc77c30910d1caa; opros-doc=true; welcome_3.0=true; tmr_lvid=3a28f7d4a57a3fa73714466f37ffe261; tmr_lvidTS=1709715751164; _ym_uid=1709715751322905903; _ym_d=1709715751; city=78; _gid=GA1.2.812106523.1710135611; _fbp=fb.1.1710139495809.1030876876; popmechanic_sbjs_migrations=popmechanic_1418474375998%3D1%7C%7C%7C1471519752600%3D1%7C%7C%7C1471519752605%3D1; modeCat=false; _ga_03LSTWE70Z=GS1.2.1710160305.1.1.1710160358.0.0.0; _ga_9L8NF5QCN5=GS1.1.1710160305.1.1.1710160385.60.0.0; _ym_isad=2; _ga_KRXBFV3FBG=GS1.2.1710225226.4.1.1710226575.12.0.0; _ga_5J5GMQP0GB=GS1.2.1710228099.3.1.1710228104.0.0.0; _ga_ZKLDL3ZMBE=GS1.1.1710228099.3.1.1710228108.0.0.0; _ym_visorc=b; dSesn=3ec1b8b4-4e90-1fd2-347d-92dcea40786c; _dvs=0:ltoblmsi:0le6EtQF4etfGDgWeDKdPJgQuN1vT0hR; session-id=f38cd400-1c9e-c5a0-bf14-cf33f891bd28; userType=iPRO; digi_uc=W1sidiIsIjYzOTI1MzYiLDE3MTAyNDUzMzA0MjldLFsidiIsIjIzOTk4MTIiLDE3MTAyMzI4MDI2MzddLFsidiIsIjk5NDMwNDMiLDE3MTAyMzE1ODk1NzddLFsidiIsIjMzODQ4NzgiLDE3MTAyMzA2ODA0MDRdLFsidiIsIjQzNzM1ODQiLDE3MTAyMzA2NzYxNjRdLFsidiIsIjM0MDMxMzA0IiwxNzEwMjMwNjQ0NjU3XSxbInYiLCIzNDk0MTkyIiwxNzEwMjMwNjQ0Mjk3XSxbInYiLCIxMDY5NjcwMDUiLDE3MTAyMzA2NDI1NjFdLFsidiIsIjM0MDMxMzAzIiwxNzEwMjMwNjIyMzY2XSxbInYiLCI2MjA2MTc2IiwxNzEwMjMwNjIwNTIwXSxbInN2IiwiMzQwNjQzNSIsMTcxMDIyNzg2NjkxNl1d; _ga=GA1.2.1094035393.1709715751; _ga_R7FGYLMCPS=GS1.2.1710243425.13.1.1710245421.49.0.0; mindboxDeviceUUID=62e59704-7d1d-45f5-8a06-9a038c19c07a; directCrm-session=%7B%22deviceGuid%22%3A%2262e59704-7d1d-45f5-8a06-9a038c19c07a%22%7D; _ga_6YRMQ7RWXJ=GS1.1.1710243425.14.1.1710245422.0.0.0; tmr_detect=0%7C1710245424340"
									},
									{
										"key": "referer",
										"value": "https://idev.etm.ru/ipro3/objects_list?rows=10&page=1"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Microsoft Edge\";v=\"122\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "sec-fetch-dest",
										"value": "empty"
									},
									{
										"key": "sec-fetch-mode",
										"value": "cors"
									},
									{
										"key": "sec-fetch-site",
										"value": "same-origin"
									},
									{
										"key": "user-agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36 Edg/122.0.0.0"
									}
								],
								"url": {
									"raw": "{{host1}}/api/ipro/info/search/class/280?term=01&len_lim=4",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"info",
										"search",
										"class",
										"280"
									],
									"query": [
										{
											"key": "term",
											"value": "01"
										},
										{
											"key": "len_lim",
											"value": "4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Step 5. Create object",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"get pmoID\", function() {\r",
											"    proID = pm.response.json().data.pro_id;\r",
											"    pm.environment.set(\"proID\", proID);\r",
											"    console.log(proID);\r",
											"});\r",
											"\r",
											"pm.test(\"get obPersonRowid\", function() {\r",
											"    obPersonRowid = pm.response.json().data.ob_personRowid;\r",
											"    pm.environment.set(\"obPersonRowid\", obPersonRowid);\r",
											"    console.log(obPersonRowid);\r",
											"});\r",
											"\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{host1}}/api/ipro/object/saveObj?pmo_notrealadr=false&pmo_cladr=78000000000&pmo_address=2,3,&pmo_coord=59.938676,30.314494&pmo_name=релиз0503&pro_name={{$randomInt}}&pmo_brn=02&pmo_objtype=0201&pro_addtype=020101&pro_build=03&pro_stage=01&pro_substage=0101&status=wondering&pmo_id={{pmoID}}&session-id={{sessionToken}}",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"object",
										"saveObj"
									],
									"query": [
										{
											"key": "pmo_notrealadr",
											"value": "false"
										},
										{
											"key": "pmo_cladr",
											"value": "78000000000"
										},
										{
											"key": "pmo_address",
											"value": "2,3,"
										},
										{
											"key": "pmo_coord",
											"value": "59.938676,30.314494"
										},
										{
											"key": "pmo_name",
											"value": "релиз0503"
										},
										{
											"key": "pro_name",
											"value": "{{$randomInt}}"
										},
										{
											"key": "pmo_brn",
											"value": "02"
										},
										{
											"key": "pmo_objtype",
											"value": "0201"
										},
										{
											"key": "pro_addtype",
											"value": "020101"
										},
										{
											"key": "pro_build",
											"value": "03"
										},
										{
											"key": "pro_stage",
											"value": "01"
										},
										{
											"key": "pro_substage",
											"value": "0101"
										},
										{
											"key": "status",
											"value": "wondering"
										},
										{
											"key": "pmo_id",
											"value": "{{pmoID}}"
										},
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Step 5. Obj03",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host1}}/api/ipro/info/search/help/obj03",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"info",
										"search",
										"help",
										"obj03"
									]
								}
							},
							"response": []
						},
						{
							"name": "Stage 5. Save role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "authority",
										"value": "idev.etm.ru"
									},
									{
										"key": "accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "accept-language",
										"value": "ru,en;q=0.9,en-GB;q=0.8,en-US;q=0.7"
									},
									{
										"key": "content-type",
										"value": "application/json"
									},
									{
										"key": "cookie",
										"value": "_userGUID=0:lt4f7kvi:YYFtXMEFQRAnSvc8Ct7SqkM9Hn3ezVKj; popmechanic_sbjs_migrations=popmechanic_1418474375998%3D1%7C%7C%7C1471519752600%3D1%7C%7C%7C1471519752605%3D1; PHPSESSID=3daee01e8ec5e78dfcc77c30910d1caa; opros-doc=true; welcome_3.0=true; tmr_lvid=3a28f7d4a57a3fa73714466f37ffe261; tmr_lvidTS=1709715751164; _ym_uid=1709715751322905903; _ym_d=1709715751; city=78; _gid=GA1.2.812106523.1710135611; _fbp=fb.1.1710139495809.1030876876; popmechanic_sbjs_migrations=popmechanic_1418474375998%3D1%7C%7C%7C1471519752600%3D1%7C%7C%7C1471519752605%3D1; _ga_03LSTWE70Z=GS1.2.1710160305.1.1.1710160358.0.0.0; _ga_9L8NF5QCN5=GS1.1.1710160305.1.1.1710160385.60.0.0; _ym_isad=2; _ga_KRXBFV3FBG=GS1.2.1710225226.4.1.1710226575.12.0.0; _ga_5J5GMQP0GB=GS1.2.1710228099.3.1.1710228104.0.0.0; _ga_ZKLDL3ZMBE=GS1.1.1710228099.3.1.1710228108.0.0.0; _ym_visorc=b; modeCat=false; digi_uc=W1sidiIsIjQzNzM1ODQiLDE3MTAyNDcxNDkyMjVdLFsidiIsIjk5NDMwNDMiLDE3MTAyNDY5OTIxNzZdLFsidiIsIjYzOTI1MzYiLDE3MTAyNDUzMzA0MjldLFsidiIsIjIzOTk4MTIiLDE3MTAyMzI4MDI2MzddLFsidiIsIjMzODQ4NzgiLDE3MTAyMzA2ODA0MDRdLFsidiIsIjM0MDMxMzA0IiwxNzEwMjMwNjQ0NjU3XSxbInYiLCIzNDk0MTkyIiwxNzEwMjMwNjQ0Mjk3XSxbInYiLCIxMDY5NjcwMDUiLDE3MTAyMzA2NDI1NjFdLFsidiIsIjM0MDMxMzAzIiwxNzEwMjMwNjIyMzY2XSxbInYiLCI2MjA2MTc2IiwxNzEwMjMwNjIwNTIwXSxbInN2IiwiMzQwNjQzNSIsMTcxMDIyNzg2NjkxNl1d; dSesn=292f1547-dfa3-81c1-3b1f-e2369ffa5770; _dvs=0:ltog40ln:L2644qipqWWqnm23Io33AyAbtkZLbTBd; session-id=f38cd400-1c9e-c5a0-bf14-26353835dc5a; userType=iPRO; _ga=GA1.1.1094035393.1709715751; _ga_6YRMQ7RWXJ=GS1.1.1710243425.14.1.1710252797.0.0.0; _ga_R7FGYLMCPS=GS1.2.1710243425.13.1.1710252798.60.0.0; mindboxDeviceUUID=62e59704-7d1d-45f5-8a06-9a038c19c07a; directCrm-session=%7B%22deviceGuid%22%3A%2262e59704-7d1d-45f5-8a06-9a038c19c07a%22%7D; tmr_detect=0%7C1710252800982"
									},
									{
										"key": "origin",
										"value": "https://idev.etm.ru"
									},
									{
										"key": "referer",
										"value": "https://idev.etm.ru/ipro3/objects_list?rows=10&page=1"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Microsoft Edge\";v=\"122\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "sec-fetch-dest",
										"value": "empty"
									},
									{
										"key": "sec-fetch-mode",
										"value": "cors"
									},
									{
										"key": "sec-fetch-site",
										"value": "same-origin"
									},
									{
										"key": "user-agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36 Edg/122.0.0.0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "https://{{host1}}/api/ipro/object/saveRole?obj_type=pr_object&obj_id={{proID}}&obp_role=%D0%B3%D0%B5%D0%BD%D0%BF%D0%BE%D0%B4%D1%80%D1%8F%D0%B4%D1%87%D0%B8%D0%BA\n&obp_comment=&session-id={{sessionToken}}&ob_personRowid=",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"object",
										"saveRole"
									],
									"query": [
										{
											"key": "obj_type",
											"value": "pr_object"
										},
										{
											"key": "obj_id",
											"value": "{{proID}}"
										},
										{
											"key": "obp_role",
											"value": "%D0%B3%D0%B5%D0%BD%D0%BF%D0%BE%D0%B4%D1%80%D1%8F%D0%B4%D1%87%D0%B8%D0%BA\n"
										},
										{
											"key": "obp_comment",
											"value": ""
										},
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										},
										{
											"key": "ob_personRowid",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Edit/Transfer object",
					"item": [
						{
							"name": "auth WI",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Session management using session tokens\r",
											"pm.collectionVariables.get(\"variable_key\");\r",
											"var sessionWI;\r",
											"pm.test(\"Login and session management\", function () {\r",
											"    // Perform login and extract session token from the response\r",
											"    sessionWI = pm.response.json().data.session;\r",
											"    pm.environment.set(\"sessionWI\", sessionWI);\r",
											"});\r",
											"console.log(sessionWI);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "log",
											"value": "ayrapetova_ea_mopp",
											"type": "text"
										},
										{
											"key": "pwd",
											"value": "suut6494",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{host1}}/api/ipro/user/login",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"user",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Save changes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{host1}}/api/ipro/object/saveObj?pmo_notrealadr=false&pmo_cladr=78000000000&pmo_address=2,3,&pmo_coord=59.938676,30.314494&pmo_name=релиз0503&pro_name={{$randomInt}}&pmo_brn=02&pmo_objtype=0201&pro_addtype=020101&pro_build=03&pro_stage=04&pro_substage=0402&status=wondering&pmo_id={{pmoID}}&session-id={{sessionToken}}",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"object",
										"saveObj"
									],
									"query": [
										{
											"key": "pmo_notrealadr",
											"value": "false"
										},
										{
											"key": "pmo_cladr",
											"value": "78000000000"
										},
										{
											"key": "pmo_address",
											"value": "2,3,"
										},
										{
											"key": "pmo_coord",
											"value": "59.938676,30.314494"
										},
										{
											"key": "pmo_name",
											"value": "релиз0503"
										},
										{
											"key": "pro_name",
											"value": "{{$randomInt}}"
										},
										{
											"key": "pmo_brn",
											"value": "02"
										},
										{
											"key": "pmo_objtype",
											"value": "0201"
										},
										{
											"key": "pro_addtype",
											"value": "020101"
										},
										{
											"key": "pro_build",
											"value": "03"
										},
										{
											"key": "pro_stage",
											"value": "04"
										},
										{
											"key": "pro_substage",
											"value": "0402"
										},
										{
											"key": "status",
											"value": "wondering"
										},
										{
											"key": "pmo_id",
											"value": "{{pmoID}}"
										},
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Transfer object",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host1}}/api/ipro/object/transfer?transfer_pro_id={{proID}}&pmo_id={{pmoTransferID}}&session-id={{sessionToken}}",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"object",
										"transfer"
									],
									"query": [
										{
											"key": "transfer_pro_id",
											"value": "{{proID}}"
										},
										{
											"key": "pmo_id",
											"value": "{{pmoTransferID}}"
										},
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Files obj",
					"item": [
						{
							"name": "Upload file obj",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//upload\r",
											"var fileObj;\r",
											"pm.test(\"create specification spec price\", function () {\r",
											"// Perform file_name and extract file_name from the response\r",
											"    fileObj = pm.response.json().data.file_name;\r",
											"    pm.environment.set(\"fileObj\", fileObj);\r",
											"});\r",
											"console.log(fileObj);\r",
											"\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 2000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "session-id",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "num",
											"value": "{{$randomInt}}",
											"type": "text"
										},
										{
											"key": "rc",
											"value": "obj_document",
											"type": "text"
										},
										{
											"key": "fileToUpload",
											"type": "file",
											"src": "postman-cloud:///1eedbc38-6404-4a50-8154-e1e7168d1cc8"
										},
										{
											"key": "session-id",
											"value": "{{sessionToken}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{host1}}/api/ipro/file/upload",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"file",
										"upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add doc",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "session-id",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "pro_id",
											"value": "{{proID}}",
											"type": "text"
										},
										{
											"key": "name",
											"value": "PDFfinalCheck.pdf",
											"type": "text"
										},
										{
											"key": "objUploadedCat",
											"value": "project_doc",
											"type": "text"
										},
										{
											"key": "file",
											"value": "{{fileObj}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host1}}/api/ipro/object/addDoc",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"object",
										"addDoc"
									]
								}
							},
							"response": []
						},
						{
							"name": "Del doc",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "session-id",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "pro_id",
											"value": "150015",
											"type": "text"
										},
										{
											"key": "objUploadedCat",
											"value": "project_doc",
											"type": "text"
										},
										{
											"key": "file",
											"value": "{{fileObj}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host1}}/api/ipro/object/addDoc",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"object",
										"addDoc"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "authority",
								"value": "idev.etm.ru"
							},
							{
								"key": "accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "accept-language",
								"value": "ru,en;q=0.9,en-GB;q=0.8,en-US;q=0.7"
							},
							{
								"key": "cookie",
								"value": "_userGUID=0:lt4f7kvi:YYFtXMEFQRAnSvc8Ct7SqkM9Hn3ezVKj; popmechanic_sbjs_migrations=popmechanic_1418474375998%3D1%7C%7C%7C1471519752600%3D1%7C%7C%7C1471519752605%3D1; PHPSESSID=3daee01e8ec5e78dfcc77c30910d1caa; opros-doc=true; welcome_3.0=true; tmr_lvid=3a28f7d4a57a3fa73714466f37ffe261; tmr_lvidTS=1709715751164; _ym_uid=1709715751322905903; _ym_d=1709715751; _gid=GA1.2.812106523.1710135611; _fbp=fb.1.1710139495809.1030876876; popmechanic_sbjs_migrations=popmechanic_1418474375998%3D1%7C%7C%7C1471519752600%3D1%7C%7C%7C1471519752605%3D1; _ga_03LSTWE70Z=GS1.2.1710160305.1.1.1710160358.0.0.0; _ga_9L8NF5QCN5=GS1.1.1710160305.1.1.1710160385.60.0.0; _ga_KRXBFV3FBG=GS1.2.1710225226.4.1.1710226575.12.0.0; modeCat=false; _ym_isad=2; _ga_5J5GMQP0GB=GS1.2.1710311686.4.1.1710311689.0.0.0; _ga_ZKLDL3ZMBE=GS1.1.1710311686.4.1.1710311692.0.0.0; DIGI_CARTID=71811216406; digi_uc=W1sidiIsIjU3OTU4MDEiLDE3MTAzMjEyNTY2NTddLFsidiIsIjgzMDM4MjciLDE3MTAzMjA2MjAxNjldLFsidiIsIjQ5OTQxODciLDE3MTAzMjA0ODkwNDddLFsidiIsIjQzNzM1ODQiLDE3MTAyNDcxNDkyMjVdLFsidiIsIjk5NDMwNDMiLDE3MTAyNDY5OTIxNzZdLFsidiIsIjYzOTI1MzYiLDE3MTAyNDUzMzA0MjldLFsidiIsIjIzOTk4MTIiLDE3MTAyMzI4MDI2MzddLFsidiIsIjMzODQ4NzgiLDE3MTAyMzA2ODA0MDRdLFsidiIsIjM0MDMxMzA0IiwxNzEwMjMwNjQ0NjU3XSxbInYiLCIzNDk0MTkyIiwxNzEwMjMwNjQ0Mjk3XSxbInN2IiwiMzQwNjQzNSIsMTcxMDIyNzg2NjkxNl1d; city=78; _ym_visorc=b; dSesn=6be96692-4396-4155-ed0e-d541c5b164e5; _dvs=0:ltpqzmyw:kFvGjhG9fyNog7VycwCeLFg4RCdBhvwB; session-id=98f60482-8d68-8ca6-bf14-9b4360faba06; userType=iPRO; _ga=GA1.1.1094035393.1709715751; tmr_detect=0%7C1710332182156; _ga_R7FGYLMCPS=GS1.2.1710331120.17.1.1710332186.1.0.0; _ga_6YRMQ7RWXJ=GS1.1.1710331118.18.1.1710332187.0.0.0; mindboxDeviceUUID=62e59704-7d1d-45f5-8a06-9a038c19c07a; directCrm-session=%7B%22deviceGuid%22%3A%2262e59704-7d1d-45f5-8a06-9a038c19c07a%22%7D"
							},
							{
								"key": "referer",
								"value": "https://idev.etm.ru/ipro3/objects_list/150051?tab=info"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Microsoft Edge\";v=\"122\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"Windows\""
							},
							{
								"key": "sec-fetch-dest",
								"value": "empty"
							},
							{
								"key": "sec-fetch-mode",
								"value": "cors"
							},
							{
								"key": "sec-fetch-site",
								"value": "same-origin"
							},
							{
								"key": "user-agent",
								"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36 Edg/122.0.0.0"
							}
						],
						"url": {
							"raw": "https://idev.etm.ru/api/ipro/object/saveRole?ob_personRowid={{obPersonRowid}}&session-id={{sessionToken}}&request_method=DELETE",
							"protocol": "https",
							"host": [
								"idev",
								"etm",
								"ru"
							],
							"path": [
								"api",
								"ipro",
								"object",
								"saveRole"
							],
							"query": [
								{
									"key": "ob_personRowid",
									"value": "{{obPersonRowid}}"
								},
								{
									"key": "session-id",
									"value": "{{sessionToken}}"
								},
								{
									"key": "request_method",
									"value": "DELETE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Tov departs list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json; charset=utf-8"
							}
						],
						"url": {
							"raw": "{{host1}}/api/ipro/object/tovdepart?man=60004392&session-id={{sessionToken}}",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"object",
								"tovdepart"
							],
							"query": [
								{
									"key": "man",
									"value": "60004392"
								},
								{
									"key": "session-id",
									"value": "{{sessionToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Objects in Macrooibject",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// pm.test(\"get pmoID\", function() {\r",
									"//     pmoID = pm.response.json().data.rows[0].pmo_id;\r",
									"//     pm.collectionVariables.set(\"pmoID\", pmoID);\r",
									"//     console.log(pmoID);\r",
									"// });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json; charset=utf-8"
							},
							{
								"key": "session-id",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{host1}}/api/ipro/object/list/{{pmoID}}",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"object",
								"list",
								"{{pmoID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invoice list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{host1}}/api/ipro/object/invoiceList/{{proID}}",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"object",
								"invoiceList",
								"{{proID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Role list",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{host1}}/api/ipro/roleList?obj_type=0201&obj_id={{proID}}&session-id={{sessionToken}}",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"roleList"
							],
							"query": [
								{
									"key": "obj_type",
									"value": "0201"
								},
								{
									"key": "obj_id",
									"value": "{{proID}}"
								},
								{
									"key": "session-id",
									"value": "{{sessionToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MacroObj info",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{host1}}/api/ipro/object/getMacroObj/{{pmoID}}",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"object",
								"getMacroObj",
								"{{pmoID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "lpr",
			"item": [
				{
					"name": "Create",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let randomMail = Math.floor(Math.random() * (100000000 - 10000000 + 1)) + 10000000 + \"@mail.ru\"\r",
									"pm.environment.set('exm_email', randomMail);\r",
									"console.log(randomMail)\r",
									"let randomName = \"ЯТЕСТAPI\" + Math.floor(Math.random() * (1000 - 100 + 1)) + 100\r",
									"pm.environment.set('exm_nameI', randomName);\r",
									"let randomLastName = \"ЯТЕСТAPI\" + Math.floor(Math.random() * (1000 - 100 + 1)) + 100\r",
									"pm.environment.set('exm_nameF', randomLastName);\r",
									"let randomO = \"ЯТЕСТAPI\" + Math.floor(Math.random() * (1000 - 100 + 1)) + 100\r",
									"pm.environment.set('exm_nameO', randomO);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Fixed property names with '-' by replacing them with '_'\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has a valid Content-Type header\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Email is in a valid format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.data.exm_email).to.be.a('string').and.to.match(/^[^@]+@[^@]+\\.[a-zA-Z]{2,}$/);\r",
									"});\r",
									"\r",
									"// Test for response schema\r",
									"pm.test(\"Response has a valid schema\", function () {\r",
									"  var schema = {\r",
									"    type: \"object\",\r",
									"    properties: {\r",
									"      status: {\r",
									"        type: \"object\",\r",
									"        properties: {\r",
									"          code: { type: \"number\" },\r",
									"          message: { type: \"string\" }\r",
									"        },\r",
									"        required: [\"code\", \"message\"]\r",
									"      },\r",
									"      data: {\r",
									"        type: \"object\",\r",
									"        properties: {\r",
									"          \"cli-code\": { type: \"string\" },\r",
									"          exm_nameF: { type: \"string\" },\r",
									"          exm_nameI: { type: \"string\" },\r",
									"          exm_nameO: { type: \"string\" },\r",
									"          exm_phonem: { type: \"string\" },\r",
									"          exm_email: { type: \"string\" },\r",
									"          exw_position: { type: \"string\" },\r",
									"          exw_ps: { type: \"string\" },\r",
									"          \"session-id\": { type: \"string\" },\r",
									"          typeApp: { type: \"string\" },\r",
									"          format: { type: \"string\" },\r",
									"          syf_prog: { type: \"string\" },\r",
									"          request_method: { type: \"string\" },\r",
									"          mode: { type: \"string\" },\r",
									"          fieldlist: { type: \"string\" },\r",
									"          sysParam_REMOTE_ADDR: { type: \"string\" },\r",
									"          login_type: { type: \"string\" },\r",
									"          org: { type: \"string\" },\r",
									"          \"org-id\": { type: \"string\" },\r",
									"          \"user-id\": { type: \"string\" },\r",
									"          user_id: { type: \"string\" },\r",
									"          man: { type: \"string\" },\r",
									"          lpr_code: { type: \"string\" }\r",
									"        },\r",
									"        required: [\"cli-code\", \"exm_nameF\", \"exm_nameI\", \"exm_nameO\", \"exm_phonem\", \"exm_email\", \"exw_position\", \"exw_ps\", \"session-id\", \"typeApp\", \"format\", \"syf_prog\", \"request_method\", \"mode\", \"fieldlist\", \"sysParam_REMOTE_ADDR\", \"login_type\", \"org\", \"org-id\", \"user-id\", \"user_id\", \"man\", \"lpr_code\"]\r",
									"      }\r",
									"    },\r",
									"    required: [\"status\", \"data\"]\r",
									"  };\r",
									"\r",
									"  var response = pm.response.json();\r",
									"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "cli-code",
									"value": "{{cli-code}}",
									"type": "text"
								},
								{
									"key": "exm_nameF",
									"value": "{{exm_nameF}}",
									"type": "text"
								},
								{
									"key": "exm_nameI",
									"value": "{{exm_nameI}}",
									"type": "text"
								},
								{
									"key": "exm_nameO",
									"value": "{{exm_nameO}}",
									"type": "text"
								},
								{
									"key": "exm_phonem",
									"value": "{{exm_phonem}}",
									"type": "text"
								},
								{
									"key": "exm_email",
									"value": "{{exm_email}}",
									"type": "text"
								},
								{
									"key": "exw_position",
									"value": "{{exw_position}}",
									"type": "text"
								},
								{
									"key": "exw_ps",
									"value": "{{exw_ps}}",
									"type": "text"
								},
								{
									"key": "session-id",
									"value": "{{sessionToken}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{host1}}/api/ipro/lpr/lpr",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"lpr",
								"lpr"
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"find est\", function () {\r",
									"    let ex_workRowid = pm.response.json().data.rows[0].id\r",
									"    pm.environment.set('ex_workRowid', ex_workRowid);\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json().data.rows[0];\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.include.all.keys('id', 'RO_user_exist', 'RO_fio', 'exw_position', 'position', 'exm_phonem', 'exm_email', 'is_admin');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Rows array is present and contains expected number of elements\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data.rows).to.exist.and.to.be.an('array');\r",
									"    pm.expect(responseData.data.rows).to.have.lengthOf(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"  var schema = {\r",
									"    type: \"object\",\r",
									"    properties: {\r",
									"      status: {\r",
									"        type: \"object\",\r",
									"        properties: {\r",
									"          code: { type: \"number\" },\r",
									"          message: { type: \"string\" }\r",
									"        },\r",
									"        required: [\"code\", \"message\"]\r",
									"      },\r",
									"      data: {\r",
									"        type: \"object\",\r",
									"        properties: {\r",
									"          page: { type: \"string\" },\r",
									"          rows: {\r",
									"            type: \"array\",\r",
									"            items: {\r",
									"              type: \"object\",\r",
									"              properties: {\r",
									"                id: { type: \"string\" },\r",
									"                RO_user_exist: { type: \"string\" },\r",
									"                RO_fio: { type: \"string\" },\r",
									"                exw_position: { type: \"string\" },\r",
									"                position: { type: \"string\" },\r",
									"                exm_phonem: { type: \"string\" },\r",
									"                exm_email: { type: \"string\" },\r",
									"                is_admin: { type: \"string\" }\r",
									"              },\r",
									"              required: [\"id\", \"RO_user_exist\", \"RO_fio\", \"exw_position\", \"position\", \"exm_phonem\", \"exm_email\", \"is_admin\"]\r",
									"            }\r",
									"          },\r",
									"          total: { type: \"number\" },\r",
									"          records: { type: \"number\" },\r",
									"          userdata: {\r",
									"            type: \"object\",\r",
									"            properties: {\r",
									"              error: { type: \"string\" },\r",
									"              limit: { type: \"string\" }\r",
									"            }\r",
									"          }\r",
									"        },\r",
									"        required: [\"page\", \"rows\", \"total\", \"records\", \"userdata\"]\r",
									"      }\r",
									"    },\r",
									"    required: [\"status\", \"data\"]\r",
									"  };\r",
									"\r",
									"  var response = pm.response.json();\r",
									"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/lpr/lpr_list?cli-code={{cli-code}}&sidx=RO_user_exist&sord=desc&page=1&rows=20&_search=true&RO_fio={{exm_nameF}}&session-id={{sessionToken}}",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"lpr",
								"lpr_list"
							],
							"query": [
								{
									"key": "cli-code",
									"value": "{{cli-code}}"
								},
								{
									"key": "sidx",
									"value": "RO_user_exist"
								},
								{
									"key": "sord",
									"value": "desc"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "rows",
									"value": "20"
								},
								{
									"key": "_search",
									"value": "true"
								},
								{
									"key": "RO_fio",
									"value": "{{exm_nameF}}"
								},
								{
									"key": "session-id",
									"value": "{{sessionToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Find by ex_workRowid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check for exist\", function () {\r",
									"    console.log(pm.response.json().data.rows[0].exm_nameI)\r",
									"    pm.expect(pm.response.json().data.rows[0].exm_nameI).to.eql(pm.environment.get(\"exm_nameI\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Status object has code and message properties\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.status).to.exist.and.to.have.property('code');\r",
									"  pm.expect(responseData.status).to.exist.and.to.have.property('message');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Data object contains expected properties\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.data).to.be.an('object');\r",
									"    pm.expect(responseData.data).to.have.property('page');\r",
									"    pm.expect(responseData.data).to.have.property('rows');\r",
									"    pm.expect(responseData.data).to.have.property('total');\r",
									"    pm.expect(responseData.data).to.have.property('records');\r",
									"    pm.expect(responseData.data).to.have.property('userdata');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/lpr/lpr?ex_workRowid={{ex_workRowid}}&session-id={{sessionToken}}",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"lpr",
								"lpr"
							],
							"query": [
								{
									"key": "ex_workRowid",
									"value": "{{ex_workRowid}}"
								},
								{
									"key": "session-id",
									"value": "{{sessionToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Give access",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check for exist\", function () {\r",
									"    pm.expect(pm.response.json().data.RO_user_exist).to.eql(\"V\");\r",
									"});\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Status object has code and message properties\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.status).to.exist.and.to.be.an('object');\r",
									"  pm.expect(responseData.status.code).to.exist.and.to.be.a('number');\r",
									"  pm.expect(responseData.status.message).to.exist.and.to.be.a('string');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify the value of each property in the data object\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    const data = responseData.data;\r",
									"    \r",
									"    Object.keys(data).forEach(key => {\r",
									"        pm.expect(data[key]).to.exist;\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"  var schema = {\r",
									"    type: \"object\",\r",
									"    properties: {\r",
									"      status: {\r",
									"        type: \"object\",\r",
									"        properties: {\r",
									"          code: { type: \"number\" },\r",
									"          message: { type: \"string\" }\r",
									"        },\r",
									"        required: [\"code\", \"message\"]\r",
									"      },\r",
									"      data: {\r",
									"        type: \"object\",\r",
									"        properties: {\r",
									"          \"session-id\": { type: \"string\" },\r",
									"          \"ex_workRowid\": { type: \"string\" },\r",
									"          \"regid\": { type: \"string\" },\r",
									"          \"office\": { type: \"string\" },\r",
									"          \"typeApp\": { type: \"string\" },\r",
									"          \"format\": { type: \"string\" },\r",
									"          \"syf_prog\": { type: \"string\" },\r",
									"          \"mode\": { type: \"string\" },\r",
									"          \"sysParam_REMOTE_ADDR\": { type: \"string\" },\r",
									"          \"login_type\": { type: \"string\" },\r",
									"          \"org\": { type: \"string\" },\r",
									"          \"org-id\": { type: \"string\" },\r",
									"          \"user-id\": { type: \"string\" },\r",
									"          \"user_id\": { type: \"string\" },\r",
									"          \"man\": { type: \"string\" },\r",
									"          \"lpr_code\": { type: \"string\" },\r",
									"          \"sendMail\": { type: \"string\" },\r",
									"          \"noRunRSP\": { type: \"string\" },\r",
									"          \"withoutArchive\": { type: \"string\" },\r",
									"          \"clientsRowid\": { type: \"string\" },\r",
									"          \"newBossF\": { type: \"string\" },\r",
									"          \"newBossI\": { type: \"string\" },\r",
									"          \"newBossO\": { type: \"string\" },\r",
									"          \"pr_meetingRowid\": { type: \"string\" },\r",
									"          \"pr_meetprnRowid\": { type: \"string\" },\r",
									"          \"RO_user_exist\": { type: \"string\" }\r",
									"        },\r",
									"        required: [\r",
									"          \"session-id\",\r",
									"          \"ex_workRowid\",\r",
									"          \"regid\",\r",
									"          \"office\",\r",
									"          \"typeApp\",\r",
									"          \"format\",\r",
									"          \"syf_prog\",\r",
									"          \"mode\",\r",
									"          \"sysParam_REMOTE_ADDR\",\r",
									"          \"login_type\",\r",
									"          \"org\",\r",
									"          \"org-id\",\r",
									"          \"user-id\",\r",
									"          \"user_id\",\r",
									"          \"man\",\r",
									"          \"lpr_code\",\r",
									"          \"sendMail\",\r",
									"          \"noRunRSP\",\r",
									"          \"withoutArchive\",\r",
									"          \"clientsRowid\",\r",
									"          \"newBossF\",\r",
									"          \"newBossI\",\r",
									"          \"newBossO\",\r",
									"          \"pr_meetingRowid\",\r",
									"          \"pr_meetprnRowid\",\r",
									"          \"RO_user_exist\"\r",
									"        ]\r",
									"      }\r",
									"    },\r",
									"    required: [\"status\", \"data\"]\r",
									"  };\r",
									"\r",
									"  var response = pm.response.json();\r",
									"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "session-id",
									"value": "{{sessionToken}}",
									"type": "text"
								},
								{
									"key": "ex_workRowid",
									"value": "{{ex_workRowid}}",
									"type": "text"
								},
								{
									"key": "regid",
									"value": "{{regid}}",
									"type": "text"
								},
								{
									"key": "office",
									"value": "{{office}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{host1}}/api/ipro/lpr/cre_iPRO",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"lpr",
								"cre_iPRO"
							]
						}
					},
					"response": []
				},
				{
					"name": "Take access",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check for exist\", function () {",
									"    pm.expect(pm.response.json().data.RO_user_exist).to.eql(\"A\");",
									"});",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Response Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Status object has code and message properties\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.status).to.exist.and.to.be.an('object');",
									"  pm.expect(responseData.status.code).to.exist.and.to.be.a('number');",
									"  pm.expect(responseData.status.message).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"// Test for response schema",
									"pm.test(\"Response data has the required properties\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  // Check for the existence and type of properties in the response data",
									"  pm.expect(responseData).to.have.property('status').that.is.an('object');",
									"  pm.expect(responseData.status).to.have.property('code').that.is.a('number');",
									"  pm.expect(responseData.status).to.have.property('message').that.is.a('string');",
									"",
									"  pm.expect(responseData).to.have.property('data').that.is.an('object');",
									"  pm.expect(responseData.data).to.have.property('ex_workRowid');",
									"  pm.expect(responseData.data).to.have.property('session-id');",
									"  pm.expect(responseData.data).to.have.property('typeApp');",
									"  pm.expect(responseData.data).to.have.property('format');",
									"  pm.expect(responseData.data).to.have.property('syf_prog');",
									"  pm.expect(responseData.data).to.have.property('mode');",
									"  pm.expect(responseData.data).to.have.property('sysParam_REMOTE_ADDR');",
									"  pm.expect(responseData.data).to.have.property('login_type');",
									"  pm.expect(responseData.data).to.have.property('org');",
									"  pm.expect(responseData.data).to.have.property('org-id');",
									"  pm.expect(responseData.data).to.have.property('user-id');",
									"  pm.expect(responseData.data).to.have.property('user_id');",
									"  pm.expect(responseData.data).to.have.property('man');",
									"  pm.expect(responseData.data).to.have.property('lpr_code');",
									"  pm.expect(responseData.data).to.have.property('noRunRSP');",
									"  pm.expect(responseData.data).to.have.property('withoutArchive');",
									"  pm.expect(responseData.data).to.have.property('RO_user_exist');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "ex_workRowid",
									"value": "{{ex_workRowid}}",
									"type": "text"
								},
								{
									"key": "session-id",
									"value": "{{sessionToken}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{host1}}/api/ipro/lpr/del_iPRO",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"lpr",
								"del_iPRO"
							]
						}
					},
					"response": []
				},
				{
					"name": "Restore access",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check for exist\", function () {\r",
									"    pm.expect(pm.response.json().data.RO_user_exist).to.eql(\"V\");\r",
									"});\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response includes the status object with code and message properties\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.status).to.exist;\r",
									"    pm.expect(responseData.status.code).to.exist;\r",
									"    pm.expect(responseData.status.message).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"  var schema = {\r",
									"    type: \"object\",\r",
									"    properties: {\r",
									"      status: {\r",
									"        type: \"object\",\r",
									"        properties: {\r",
									"          code: { type: \"number\" },\r",
									"          message: { type: \"string\" },\r",
									"        },\r",
									"        required: [\"code\", \"message\"],\r",
									"      },\r",
									"      data: {\r",
									"        type: \"object\",\r",
									"        properties: {\r",
									"          typeApp: { type: \"string\" },\r",
									"          format: { type: \"string\" },\r",
									"          \"session-id\": { type: \"string\" },\r",
									"          syf_prog: { type: \"string\" },\r",
									"          mode: { type: \"string\" },\r",
									"          ex_workRowid: { type: \"string\" },\r",
									"          sysParam_REMOTE_ADDR: { type: \"string\" },\r",
									"          login_type: { type: \"string\" },\r",
									"          org: { type: \"string\" },\r",
									"          \"org-id\": { type: \"string\" },\r",
									"          \"user-id\": { type: \"string\" },\r",
									"          user_id: { type: \"string\" },\r",
									"          man: { type: \"string\" },\r",
									"          lpr_code: { type: \"string\" },\r",
									"          sendMail: { type: \"string\" },\r",
									"          noRunRSP: { type: \"string\" },\r",
									"          withoutArchive: { type: \"string\" },\r",
									"          RO_user_exist: { type: \"string\" },\r",
									"        },\r",
									"      },\r",
									"    },\r",
									"    required: [\"status\", \"data\"],\r",
									"  };\r",
									"\r",
									"  var response = pm.response.json();\r",
									"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "ex_workRowid",
									"value": "{{ex_workRowid}}",
									"type": "text"
								},
								{
									"key": "session-id",
									"value": "{{sessionToken}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{host1}}/api/ipro/lpr/restore_iPRO",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"lpr",
								"restore_iPRO"
							]
						}
					},
					"response": []
				},
				{
					"name": "Fire user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the structure of the status object\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.status).to.exist.and.to.be.an('object');\r",
									"    pm.expect(responseData.status.code).to.exist.and.to.be.a('number');\r",
									"    pm.expect(responseData.status.message).to.exist.and.to.be.a('string');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Data object structure is valid\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data).to.exist.and.to.be.an('object');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Code field in the status object is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.status).to.be.an('object');\r",
									"    pm.expect(responseData.status.code).to.be.a('number').and.to.be.at.least(0, \"Code should be a non-negative integer\");\r",
									"});\r",
									"\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"  var schema = {\r",
									"    type: \"object\",\r",
									"    properties: {\r",
									"      status: {\r",
									"        type: \"object\",\r",
									"        properties: {\r",
									"          code: { type: \"number\" },\r",
									"          message: { type: \"string\" }\r",
									"        },\r",
									"        required: [\"code\", \"message\"]\r",
									"      },\r",
									"      data: { type: \"object\" }\r",
									"    },\r",
									"    required: [\"status\", \"data\"]\r",
									"  };\r",
									"\r",
									"  var response = pm.response.json();\r",
									"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "ex_workRowid",
									"value": "{{ex_workRowid}}",
									"type": "text"
								},
								{
									"key": "session-id",
									"value": "{{sessionToken}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{host1}}/api/ipro/lpr/fire",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"lpr",
								"fire"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "brand_page",
			"item": [
				{
					"name": "subcat_brands_val_mnf",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('valid response format json', function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.test(\"status code 200 in body of json\", function(){",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status.code).to.equal(200);",
									"});",
									"",
									"pm.test('Response is valid JSON', function () {",
									"    pm.expect(pm.response.json()).to.be.an('object');",
									"});",
									"",
									"pm.test('Response time is less than 1000ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{base_url}}/catalog/subcat_brands?val={{val}}&mnf={{mnf}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"catalog",
								"subcat_brands"
							],
							"query": [
								{
									"key": "val",
									"value": "{{val}}"
								},
								{
									"key": "mnf",
									"value": "{{mnf}}"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "subcat_brands_mnf",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('valid response format json', function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.test(\"status code 200 in body of json\", function(){",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status.code).to.equal(200);",
									"});",
									"",
									"pm.test('Response is valid JSON', function () {",
									"    pm.expect(pm.response.json()).to.be.an('object');",
									"});",
									"",
									"pm.test('Response time is less than 1000ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{base_url}}/catalog/subcat_brands?mnf={{mnf}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"catalog",
								"subcat_brands"
							],
							"query": [
								{
									"key": "mnf",
									"value": "{{mnf}}"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "subcat_brands_val_mnf&hits=1&rows=12",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('valid response format json', function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.test(\"status code 200 in body of json\", function(){",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status.code).to.equal(200);",
									"});",
									"",
									"pm.test('Response is valid JSON', function () {",
									"    pm.expect(pm.response.json()).to.be.an('object');",
									"});",
									"",
									"pm.test('Response time is less than 1000ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{base_url}}/catalog/subcat_brands?mnf={{mnf}}&hits=1&rows=12",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"catalog",
								"subcat_brands"
							],
							"query": [
								{
									"key": "mnf",
									"value": "{{mnf}}"
								},
								{
									"key": "hits",
									"value": "1"
								},
								{
									"key": "rows",
									"value": "12"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "/catalog/brands?id=mnf",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('valid response format json', function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.test(\"status code 200 in body of json\", function(){",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status.code).to.equal(200);",
									"});",
									"",
									"pm.test('Response is valid JSON', function () {",
									"    pm.expect(pm.response.json()).to.be.an('object');",
									"});",
									"",
									"pm.test('Response time is less than 1000ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{base_url}}/catalog/brands?id={{mnf}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"catalog",
								"brands"
							],
							"query": [
								{
									"key": "id",
									"value": "{{mnf}}"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "/catalog/brands?id=mnf&type=ser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('valid response format json', function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.test(\"status code 200 in body of json\", function(){",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status.code).to.equal(200);",
									"});",
									"",
									"pm.test('Response is valid JSON', function () {",
									"    pm.expect(pm.response.json()).to.be.an('object');",
									"});",
									"",
									"pm.test('Response time is less than 1000ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{base_url}}/catalog/brands?id={{mnf}}&type=ser",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"catalog",
								"brands"
							],
							"query": [
								{
									"key": "id",
									"value": "{{mnf}}"
								},
								{
									"key": "type",
									"value": "ser"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "/info/library/docs?srchMnf=&rows=40",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('valid response format json', function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.test(\"status code 200 in body of json\", function(){",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status.code).to.equal(200);",
									"});",
									"",
									"pm.test('Response is valid JSON', function () {",
									"    pm.expect(pm.response.json()).to.be.an('object');",
									"});",
									"",
									"pm.test('Response time is less than 1000ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{base_url}}/info/library/docs?srchMnf={{mnf}}&rows=40",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"info",
								"library",
								"docs"
							],
							"query": [
								{
									"key": "srchMnf",
									"value": "{{mnf}}"
								},
								{
									"key": "rows",
									"value": "40"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "/info/action?mnfCode=mnf",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('valid response format json', function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.test(\"status code 200 in body of json\", function(){",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status.code).to.equal(200);",
									"});",
									"",
									"pm.test('Response is valid JSON', function () {",
									"    pm.expect(pm.response.json()).to.be.an('object');",
									"});",
									"",
									"pm.test('Response time is less than 1000ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{base_url}}/info/action?mnfCode={{mnf}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"info",
								"action"
							],
							"query": [
								{
									"key": "mnfCode",
									"value": "{{mnf}}"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "/info/news?code=22&mnfCode=mnf",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('valid response format json', function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.test(\"status code 200 in body of json\", function(){",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status.code).to.equal(200);",
									"});",
									"",
									"pm.test('Response is valid JSON', function () {",
									"    pm.expect(pm.response.json()).to.be.an('object');",
									"});",
									"",
									"pm.test('Response time is less than 1000ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{base_url}}/info/news?code=22&mnfCode={{mnf}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"info",
								"news"
							],
							"query": [
								{
									"key": "code",
									"value": "22"
								},
								{
									"key": "mnfCode",
									"value": "{{mnf}}"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "/info/news?code=23&mnfCode=mnf",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('valid response format json', function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.test(\"status code 200 in body of json\", function(){",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status.code).to.equal(200);",
									"});",
									"",
									"pm.test('Response is valid JSON', function () {",
									"    pm.expect(pm.response.json()).to.be.an('object');",
									"});",
									"",
									"pm.test('Response time is less than 1000ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{base_url}}/info/news?code=23&mnfCode={{mnf}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"info",
								"news"
							],
							"query": [
								{
									"key": "code",
									"value": "23"
								},
								{
									"key": "mnfCode",
									"value": "{{mnf}}"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "/info/news?code=28&mnfCode=mnf",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('valid response format json', function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.test(\"status code 200 in body of json\", function(){",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status.code).to.equal(200);",
									"});",
									"",
									"pm.test('Response is valid JSON', function () {",
									"    pm.expect(pm.response.json()).to.be.an('object');",
									"});",
									"",
									"pm.test('Response time is less than 1000ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{base_url}}/info/news?code=28&mnfCode={{mnf}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"info",
								"news"
							],
							"query": [
								{
									"key": "code",
									"value": "28"
								},
								{
									"key": "mnfCode",
									"value": "{{mnf}}"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "/info/news?code=25&mnfCode=mnf",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('valid response format json', function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.test(\"status code 200 in body of json\", function(){",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status.code).to.equal(200);",
									"});",
									"",
									"pm.test('Response is valid JSON', function () {",
									"    pm.expect(pm.response.json()).to.be.an('object');",
									"});",
									"",
									"pm.test('Response time is less than 1000ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{base_url}}/info/news?code=25&mnfCode={{mnf}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"info",
								"news"
							],
							"query": [
								{
									"key": "code",
									"value": "25"
								},
								{
									"key": "mnfCode",
									"value": "{{mnf}}"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "/info/resource?type=catalog&doc-type=30&mnf=&cnt=2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('valid response format json', function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.test(\"status code 200 in body of json\", function(){",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status.code).to.equal(200);",
									"});",
									"",
									"pm.test('Response is valid JSON', function () {",
									"    pm.expect(pm.response.json()).to.be.an('object');",
									"});",
									"",
									"pm.test('Response time is less than 1000ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{base_url}}/info/resource?type=catalog&doc-type=30&mnf={{mnf}}&cnt=2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"info",
								"resource"
							],
							"query": [
								{
									"key": "type",
									"value": "catalog"
								},
								{
									"key": "doc-type",
									"value": "30"
								},
								{
									"key": "mnf",
									"value": "{{mnf}}"
								},
								{
									"key": "cnt",
									"value": "2"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "/info/resource?type=catalog&doc-type=30&mnf=&cnt=2 Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('valid response format json', function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.test(\"status code 200 in body of json\", function(){",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status.code).to.equal(200);",
									"});",
									"",
									"pm.test('Response is valid JSON', function () {",
									"    pm.expect(pm.response.json()).to.be.an('object');",
									"});",
									"",
									"pm.test('Response time is less than 1000ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{base_url}}/info/resource?type=catalog&doc-type=32&mnf={{mnf}}&cnt=2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"info",
								"resource"
							],
							"query": [
								{
									"key": "type",
									"value": "catalog"
								},
								{
									"key": "doc-type",
									"value": "32"
								},
								{
									"key": "mnf",
									"value": "{{mnf}}"
								},
								{
									"key": "cnt",
									"value": "2"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "/v1/members/cli_chl_false/events?finish=false&page=1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('valid response format json', function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.test('Response is valid JSON', function () {",
									"    pm.expect(pm.response.json()).to.be.an('object');",
									"});",
									"",
									"pm.test('Response time is less than 1000ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{skillsadm}}/v1/members/{{cli_chl_false}}/events?finish=false&page=1",
							"host": [
								"{{skillsadm}}"
							],
							"path": [
								"v1",
								"members",
								"{{cli_chl_false}}",
								"events"
							],
							"query": [
								{
									"key": "finish",
									"value": "false"
								},
								{
									"key": "page",
									"value": "1"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				}
			]
		},
		{
			"name": "catalog",
			"item": [
				{
					"name": "search requests",
					"item": [
						{
							"name": "subcat_brands",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validate the status object\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.status).to.exist.and.to.be.an('object');\r",
											"    pm.expect(responseData.status.code).to.exist.and.to.be.a('number');\r",
											"    pm.expect(responseData.status.message).to.exist.and.to.be.a('string');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verify the data object contains classes, cls_cnt_select, goods, and manufs\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.data).to.have.property('classes');\r",
											"    pm.expect(responseData.data).to.have.property('cls_cnt_select');\r",
											"    pm.expect(responseData.data).to.have.property('goods');\r",
											"    pm.expect(responseData.data).to.have.property('manufs');\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is within acceptable range\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Schema is valid\", function () {\r",
											"  var schema = {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      status: {\r",
											"        type: \"object\",\r",
											"        properties: {\r",
											"          code: { type: \"number\" },\r",
											"          message: { type: \"string\" }\r",
											"        },\r",
											"        required: [\"code\", \"message\"]\r",
											"      },\r",
											"      data: {\r",
											"        type: \"object\",\r",
											"        properties: {\r",
											"          classes: {\r",
											"            type: \"array\",\r",
											"            items: {\r",
											"              type: \"object\",\r",
											"              properties: {\r",
											"                id: { type: \"string\" },\r",
											"                cnt: { type: \"string\" },\r",
											"                cls: { type: \"string\" },\r",
											"                value: { type: \"string\" },\r",
											"                link: { type: \"string\" },\r",
											"                cls3c: { type: \"string\" },\r",
											"                cls3n: { type: \"string\" },\r",
											"                cls3l: { type: \"string\" },\r",
											"                cls2c: { type: \"string\" },\r",
											"                cls2n: { type: \"string\" },\r",
											"                cls2l: { type: \"string\" },\r",
											"                cls1c: { type: \"string\" },\r",
											"                cls1n: { type: \"string\" },\r",
											"                cls1l: { type: \"string\" }\r",
											"              },\r",
											"              required: [\"id\", \"cnt\", \"cls\", \"value\", \"link\", \"cls3c\", \"cls3n\", \"cls3l\", \"cls2c\", \"cls2n\", \"cls2l\", \"cls1c\", \"cls1n\", \"cls1l\"]\r",
											"            }\r",
											"          },\r",
											"          cls_cnt_select: { type: \"string\" },\r",
											"          goods: { type: \"array\" },\r",
											"          manufs: {\r",
											"            type: \"array\",\r",
											"            items: {\r",
											"              type: \"object\",\r",
											"              properties: {\r",
											"                id: { type: \"string\" },\r",
											"                value: { type: \"string\" },\r",
											"                cnt: { type: \"string\" },\r",
											"                link: { type: \"string\" }\r",
											"              },\r",
											"              required: [\"id\", \"value\", \"cnt\", \"link\"]\r",
											"            }\r",
											"          }\r",
											"        },\r",
											"        required: [\"classes\", \"cls_cnt_select\", \"goods\", \"manufs\"]\r",
											"      }\r",
											"    },\r",
											"    required: [\"status\", \"data\"]\r",
											"  };\r",
											"\r",
											"  var response = pm.response.json();\r",
											"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/catalog/subcat_brands?val=болт",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"catalog",
										"subcat_brands"
									],
									"query": [
										{
											"key": "val",
											"value": "болт"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "configurator",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validate the structure of the status object\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData).to.be.an('object');\r",
											"  pm.expect(responseData.status).to.exist.and.to.be.an('object');\r",
											"  pm.expect(responseData.status.code).to.exist.and.to.be.a('number');\r",
											"  pm.expect(responseData.status.message).to.exist.and.to.be.a('string');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Data object is present in the response\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.have.property('data');\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Schema is valid\", function () {\r",
											"  var schema = {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      status: {\r",
											"        type: \"object\",\r",
											"        properties: {\r",
											"          code: { type: \"number\" },\r",
											"          message: { type: \"string\" }\r",
											"        },\r",
											"        required: [\"code\", \"message\"]\r",
											"      },\r",
											"      data: {\r",
											"        type: \"object\",\r",
											"        properties: {\r",
											"          class: { type: \"string\" },\r",
											"          sum: { type: \"string\" },\r",
											"          ConfigChars: {\r",
											"            type: \"array\",\r",
											"            items: {\r",
											"              type: \"object\",\r",
											"              properties: {\r",
											"                ConfigCharCode: { type: \"string\" },\r",
											"                ConfigCharShow: { type: \"boolean\" },\r",
											"                ConfigCharName: { type: \"string\" },\r",
											"                ConfigCharContent: {\r",
											"                  type: \"array\",\r",
											"                  items: {\r",
											"                    type: \"object\",\r",
											"                    properties: {\r",
											"                      ConfigCharIdVal: { type: \"string\" },\r",
											"                      ConfigCharVal: { type: \"string\" },\r",
											"                      selected: { type: \"boolean\" }\r",
											"                    },\r",
											"                    required: [\"ConfigCharIdVal\", \"ConfigCharVal\", \"selected\"]\r",
											"                  }\r",
											"                }\r",
											"              },\r",
											"              required: [\"ConfigCharCode\", \"ConfigCharShow\", \"ConfigCharName\", \"ConfigCharContent\"]\r",
											"            }\r",
											"          }\r",
											"        },\r",
											"        required: [\"class\", \"sum\", \"ConfigChars\"]\r",
											"      }\r",
											"    },\r",
											"    required: [\"status\", \"data\"]\r",
											"  };\r",
											"\r",
											"  var response = pm.response.json();\r",
											"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/catalog/configurator?class=F0301101",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"catalog",
										"configurator"
									],
									"query": [
										{
											"key": "class",
											"value": "F0301101"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "catalog",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Schema is valid\", function () {\r",
											"  var schema = {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      status: {\r",
											"        type: \"object\",\r",
											"        properties: {\r",
											"          code: { type: \"number\" },\r",
											"          message: { type: \"string\" }\r",
											"        },\r",
											"        required: [\"code\", \"message\"]\r",
											"      },\r",
											"      data: {\r",
											"        type: \"object\",\r",
											"        properties: {\r",
											"          rows: {\r",
											"            type: \"array\",\r",
											"            items: {\r",
											"              type: \"object\"\r",
											"            }\r",
											"          },\r",
											"          records: { type: \"number\" },\r",
											"          limit: { type: \"boolean\" },\r",
											"          timeX: { type: \"number\" },\r",
											"          timeY: { type: \"number\" },\r",
											"          memkey: { type: \"string\" },\r",
											"          str_fnd: { type: \"string\" },\r",
											"          str_sys: { type: \"string\" },\r",
											"          result_desc: { type: \"string\" },\r",
											"          result_improve: { type: \"string\" },\r",
											"          result_tooltip: { type: \"string\" },\r",
											"          result_key: { type: \"string\" },\r",
											"          str: { type: \"string\" }\r",
											"        },\r",
											"        required: [\"rows\", \"records\", \"limit\", \"timeX\", \"timeY\", \"memkey\", \"str_fnd\", \"str_sys\", \"result_desc\", \"result_improve\", \"result_tooltip\", \"result_key\", \"str\"]\r",
											"      }\r",
											"    },\r",
											"    required: [\"status\", \"data\"]\r",
											"  };\r",
											"\r",
											"  var response = pm.response.json();\r",
											"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
											"});\r",
											"// Test for response time within acceptable range\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/catalog?val=болт",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"catalog"
									],
									"query": [
										{
											"key": "val",
											"value": "болт"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "tag page",
					"item": [
						{
							"name": "configurator",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"ConfigChars is an array with at least one element\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.data.ConfigChars).to.be.an('array').and.to.have.lengthOf.at.least(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Schema is valid\", function () {\r",
											"  var schema = {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      status: {\r",
											"        type: \"object\",\r",
											"        properties: {\r",
											"          code: { type: \"number\" },\r",
											"          message: { type: \"string\" }\r",
											"        },\r",
											"        required: [\"code\", \"message\"]\r",
											"      },\r",
											"      data: {\r",
											"        type: \"object\",\r",
											"        properties: {\r",
											"          class: { type: \"string\" },\r",
											"          sum: { type: \"string\" },\r",
											"          ConfigChars: {\r",
											"            type: \"array\",\r",
											"            items: {\r",
											"              type: \"object\",\r",
											"              properties: {\r",
											"                ConfigCharCode: { type: \"string\" },\r",
											"                ConfigCharShow: { type: \"boolean\" },\r",
											"                ConfigCharName: { type: \"string\" },\r",
											"                ConfigCharContent: {\r",
											"                  type: \"array\",\r",
											"                  items: {\r",
											"                    type: \"object\",\r",
											"                    properties: {\r",
											"                      ConfigCharIdVal: { type: \"string\" },\r",
											"                      ConfigCharVal: { type: \"string\" },\r",
											"                      selected: { type: \"boolean\" }\r",
											"                    },\r",
											"                    required: [\"ConfigCharIdVal\", \"ConfigCharVal\", \"selected\"]\r",
											"                  }\r",
											"                }\r",
											"              },\r",
											"              required: [\"ConfigCharCode\", \"ConfigCharShow\", \"ConfigCharName\", \"ConfigCharContent\"]\r",
											"            }\r",
											"          }\r",
											"        },\r",
											"        required: [\"class\", \"sum\", \"ConfigChars\"]\r",
											"      }\r",
											"    },\r",
											"    required: [\"status\", \"data\"]\r",
											"  };\r",
											"\r",
											"  var response = pm.response.json();\r",
											"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/catalog/configurator?class=101010",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"catalog",
										"configurator"
									],
									"query": [
										{
											"key": "class",
											"value": "101010"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "count",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/catalog/count?session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"catalog",
										"count"
									],
									"query": [
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "subcat_brands",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Classes array is present and contains the expected number of elements\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.data.classes).to.be.an('array').and.to.have.lengthOf(1);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Data object contains all the required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.have.property('data');\r",
											"    pm.expect(responseData.data).to.have.property('classes');\r",
											"    pm.expect(responseData.data).to.have.property('cls_cnt_select');\r",
											"    pm.expect(responseData.data).to.have.property('goods');\r",
											"    pm.expect(responseData.data).to.have.property('manufs');\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is within acceptable range\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
											"});\r",
											"pm.test(\"Schema is valid\", function () {\r",
											"  var schema = {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      status: {\r",
											"        type: \"object\",\r",
											"        properties: {\r",
											"          code: { type: \"number\" },\r",
											"          message: { type: \"string\" }\r",
											"        },\r",
											"        required: [\"code\", \"message\"]\r",
											"      },\r",
											"      data: {\r",
											"        type: \"object\",\r",
											"        properties: {\r",
											"          classes: { type: \"array\" },\r",
											"          cls_cnt_select: { type: \"string\" },\r",
											"          goods: { type: \"array\" },\r",
											"          manufs: { type: \"array\" }\r",
											"        },\r",
											"        required: [\"classes\", \"cls_cnt_select\", \"goods\", \"manufs\"]\r",
											"      }\r",
											"    },\r",
											"    required: [\"status\", \"data\"]\r",
											"  };\r",
											"\r",
											"  var response = pm.response.json();\r",
											"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/catalog/subcat_brands?class=101010&cnt_cls=100",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"catalog",
										"subcat_brands"
									],
									"query": [
										{
											"key": "class",
											"value": "101010"
										},
										{
											"key": "cnt_cls",
											"value": "100"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "avail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields - status, data\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('status');\r",
											"    pm.expect(responseData).to.have.property('data');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Map array is present and contains at least one element\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.data.map).to.exist.and.to.be.an('array').that.is.not.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is within acceptable range\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Schema is valid\", function () {\r",
											"  var schema = {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      status: {\r",
											"        type: \"object\",\r",
											"        properties: {\r",
											"          code: { type: \"number\" },\r",
											"          message: { type: \"string\" }\r",
											"        },\r",
											"        required: [\"code\", \"message\"]\r",
											"      },\r",
											"      data: {\r",
											"        type: \"object\",\r",
											"        properties: {\r",
											"          name: { type: \"string\" },\r",
											"          sum: { type: \"string\" },\r",
											"          cnt: { type: \"string\" },\r",
											"          map: {\r",
											"            type: \"array\",\r",
											"            items: {\r",
											"              type: \"object\",\r",
											"              properties: {\r",
											"                id: { type: \"string\" },\r",
											"                v: { type: \"number\" },\r",
											"                c: { type: \"number\" }\r",
											"              },\r",
											"              required: [\"id\", \"v\", \"c\"]\r",
											"            }\r",
											"          }\r",
											"        },\r",
											"        required: [\"name\", \"sum\", \"cnt\", \"map\"]\r",
											"      }\r",
											"    },\r",
											"    required: [\"status\", \"data\"]\r",
											"  };\r",
											"\r",
											"  var response = pm.response.json();\r",
											"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/catalog/configurator/avail?val=82$56532|&pars=mnf,55,989,82,79,80,132,1251,177,176,96,184,416,185,180,0,4,12,18,21,32,33,34,37,41,42,43,129,168,181,207,240,417,431,545,546,548,592,1012,1121,1139,1328,1469,1531,1753",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"catalog",
										"configurator",
										"avail"
									],
									"query": [
										{
											"key": "val",
											"value": "82$56532|"
										},
										{
											"key": "pars",
											"value": "mnf,55,989,82,79,80,132,1251,177,176,96,184,416,185,180,0,4,12,18,21,32,33,34,37,41,42,43,129,168,181,207,240,417,431,545,546,548,592,1012,1121,1139,1328,1469,1531,1753"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "my filter",
					"item": [
						{
							"name": "filter list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let numOfRecords = pm.response.json().data.records\r",
											"pm.environment.set('numOfRecords', numOfRecords);\r",
											"\r",
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validate the structure of the status object\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.status).to.be.an('object');\r",
											"    pm.expect(responseData.status.code).to.exist.and.to.be.a('number');\r",
											"    pm.expect(responseData.status.message).to.exist.and.to.be.a('string');\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is within acceptable range\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Schema is valid\", function () {\r",
											"  var schema = {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      status: {\r",
											"        type: \"object\",\r",
											"        properties: {\r",
											"          code: { type: \"number\" },\r",
											"          message: { type: \"string\" }\r",
											"        },\r",
											"        required: [\"code\", \"message\"]\r",
											"      },\r",
											"      data: {\r",
											"        type: \"object\",\r",
											"        properties: {\r",
											"          page: { type: \"string\" },\r",
											"          rows: {\r",
											"            type: \"array\",\r",
											"            items: {\r",
											"              type: \"object\",\r",
											"              properties: {\r",
											"                id: { type: \"string\" },\r",
											"                add_name: { type: \"string\" },\r",
											"                fl_name: { type: \"string\" },\r",
											"                extra1: { type: \"string\" },\r",
											"                firm_code: { type: \"string\" },\r",
											"                RO_filter_params: {\r",
											"                  type: \"array\",\r",
											"                  items: {\r",
											"                    type: \"object\",\r",
											"                    properties: {\r",
											"                      ConfigCharCode: { type: \"string\" },\r",
											"                      ConfigCharName: { type: \"string\" },\r",
											"                      ConfigCharIdVal: { type: \"string\" },\r",
											"                      ConfigCharVal: { type: \"string\" }\r",
											"                    }\r",
											"                  }\r",
											"                },\r",
											"                RO_filter_class: { type: \"string\" }\r",
											"              },\r",
											"            },\r",
											"          },\r",
											"          total: { type: \"number\" },\r",
											"          records: { type: \"number\" },\r",
											"          userdata: {\r",
											"            type: \"object\",\r",
											"            properties: {\r",
											"              error: { type: \"string\" },\r",
											"              limit: { type: \"string\" }\r",
											"            }\r",
											"          }\r",
											"        },\r",
											"        required: [\"page\", \"rows\", \"total\", \"records\", \"userdata\"]\r",
											"      }\r",
											"    },\r",
											"    required: [\"status\", \"data\"]\r",
											"  };\r",
											"\r",
											"  var response = pm.response.json();\r",
											"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/catalog/filter?session-id={{sessionToken}}&page=1",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"catalog",
										"filter"
									],
									"query": [
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										},
										{
											"key": "page",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "add filter",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.sendRequest('https://' + pm.environment.get('host1') + '/api/ipro/catalog/filter?session-id=' + pm.environment.get(\"sessionToken\"), (error, response) => {\r",
											"    if (error) throw new Error(error);\r",
											"\r",
											"    pm.test(\"check for creating new filter\", function () {\r",
											"        console.log(response.json().data.records);\r",
											"        pm.expect(response.json().data.records).to.eql((pm.environment.get(\"numOfRecords\"))+1);\r",
											"    });\r",
											"});\r",
											"\r",
											"let add_name = pm.response.json().data.add_name\r",
											"pm.environment.set('add_name', add_name);\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is within acceptable range\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000); // adjust the time as per acceptable range\r",
											"});\r",
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Schema is valid\", function () {\r",
											"  var schema = {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      status: {\r",
											"        type: \"object\",\r",
											"        properties: {\r",
											"          code: { type: \"number\" },\r",
											"          message: { type: \"string\" }\r",
											"        },\r",
											"        required: [\"code\", \"message\"]\r",
											"      },\r",
											"      data: {\r",
											"        type: \"object\",\r",
											"        properties: {\r",
											"          \"fl-name\": { type: \"string\" },\r",
											"          extra1: { type: \"string\" },\r",
											"          class: { type: \"string\" },\r",
											"          \"session-id\": { type: \"string\" },\r",
											"          typeApp: { type: \"string\" },\r",
											"          format: { type: \"string\" },\r",
											"          request_method: { type: \"string\" },\r",
											"          syf_prog: { type: \"string\" },\r",
											"          fieldlist: { type: \"string\" },\r",
											"          \"pr-name\": { type: \"string\" },\r",
											"          withoutArchive: { type: \"string\" },\r",
											"          find_add_name: { type: \"string\" },\r",
											"          sysParam_REMOTE_ADDR: { type: \"string\" },\r",
											"          login_type: { type: \"string\" },\r",
											"          org: { type: \"string\" },\r",
											"          \"org-id\": { type: \"string\" },\r",
											"          \"user-id\": { type: \"string\" },\r",
											"          user_id: { type: \"string\" },\r",
											"          man: { type: \"string\" },\r",
											"          lpr_code: { type: \"string\" },\r",
											"          helpindRowid: { type: \"string\" },\r",
											"          add_name: { type: \"string\" }\r",
											"        },\r",
											"        required: [\"fl-name\", \"session-id\"] // Add more required properties as needed\r",
											"      }\r",
											"    },\r",
											"    required: [\"status\", \"data\"]\r",
											"  };\r",
											"\r",
											"  var response = pm.response.json();\r",
											"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "fl-name",
											"value": "мой фильтр",
											"type": "text"
										},
										{
											"key": "extra1",
											"value": "conf=55$2216|&cls=101010",
											"type": "text"
										},
										{
											"key": "class",
											"value": "101010",
											"type": "text"
										},
										{
											"key": "session-id",
											"value": "{{sessionToken}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{host1}}/api/ipro/catalog/filter",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"catalog",
										"filter"
									]
								}
							},
							"response": []
						},
						{
							"name": "change name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"search for new name\", function () {\r",
											"    pm.expect(pm.response.text()).to.include('new name');\r",
											"});\r",
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields - status, data\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('status');\r",
											"    pm.expect(responseData).to.have.property('data');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status code is a non-negative integer\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.status.code).to.be.a('number');\r",
											"    pm.expect(responseData.status.code).to.be.at.least(0);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type header is set to application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is within acceptable range\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Schema is valid\", function () {\r",
											"  var schema = {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      status: {\r",
											"        type: \"object\",\r",
											"        properties: {\r",
											"          code: { type: \"number\" },\r",
											"          message: { type: \"string\" }\r",
											"        },\r",
											"        required: [\"code\", \"message\"]\r",
											"      },\r",
											"      data: {\r",
											"        type: \"object\",\r",
											"        properties: {\r",
											"          request_method: { type: \"string\" },\r",
											"          \"session-id\": { type: \"string\" },\r",
											"          add_name: { type: \"string\" },\r",
											"          \"fl-name\": { type: \"string\" },\r",
											"          cls: { type: \"string\" },\r",
											"          extra1: { type: \"string\" },\r",
											"          typeApp: { type: \"string\" },\r",
											"          format: { type: \"string\" },\r",
											"          syf_prog: { type: \"string\" },\r",
											"          fieldlist: { type: \"string\" },\r",
											"          \"pr-name\": { type: \"string\" },\r",
											"          withoutArchive: { type: \"string\" },\r",
											"          find_add_name: { type: \"string\" },\r",
											"          sysParam_REMOTE_ADDR: { type: \"string\" },\r",
											"          login_type: { type: \"string\" },\r",
											"          org: { type: \"string\" },\r",
											"          \"org-id\": { type: \"string\" },\r",
											"          \"user-id\": { type: \"string\" },\r",
											"          user_id: { type: \"string\" },\r",
											"          man: { type: \"string\" },\r",
											"          lpr_code: { type: \"string\" }\r",
											"        },\r",
											"        required: [\"request_method\", \"session-id\", \"add_name\", \"fl-name\", \"cls\", \"extra1\", \"typeApp\", \"format\", \"syf_prog\", \"fieldlist\", \"pr-name\", \"withoutArchive\", \"find_add_name\", \"sysParam_REMOTE_ADDR\", \"login_type\", \"org\", \"org-id\", \"user-id\", \"user_id\", \"man\", \"lpr_code\"]\r",
											"      }\r",
											"    },\r",
											"    required: [\"status\", \"data\"]\r",
											"  };\r",
											"\r",
											"  var response = pm.response.json();\r",
											"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "request_method",
											"value": "PUT",
											"type": "text"
										},
										{
											"key": "session-id",
											"value": "{{sessionToken}}",
											"type": "text"
										},
										{
											"key": "add_name",
											"value": "{{add_name}}",
											"type": "text"
										},
										{
											"key": "fl-name",
											"value": "new name",
											"type": "text"
										},
										{
											"key": "cls",
											"value": "101010",
											"type": "text"
										},
										{
											"key": "extra1",
											"value": "conf=55%242216%7C&cls=101010",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{host1}}/api/ipro/catalog/filter",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"catalog",
										"filter"
									]
								}
							},
							"response": []
						},
						{
							"name": "del filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.sendRequest('https://' + pm.environment.get('host1') + '/api/ipro/catalog/filter?session-id=' + pm.environment.get(\"sessionToken\"), (error, response) => {\r",
											"    if (error) throw new Error(error);\r",
											"\r",
											"    pm.test(\"check for deleting new filter\", function () {\r",
											"        console.log(response.json().data.records);\r",
											"        pm.expect(response.json().data.records).to.eql((pm.environment.get(\"numOfRecords\")));\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200 in the response status\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.status.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Response time is within acceptable range\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Schema is valid\", function () {\r",
											"  var schema = {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      status: {\r",
											"        type: \"object\",\r",
											"        properties: {\r",
											"          code: { type: \"number\" },\r",
											"          message: { type: \"string\" }\r",
											"        },\r",
											"        required: [\"code\", \"message\"]\r",
											"      },\r",
											"      data: {\r",
											"        type: \"object\",\r",
											"        properties: {\r",
											"          typeApp: { type: \"string\" },\r",
											"          format: { type: \"string\" },\r",
											"          \"session-id\": { type: \"string\" },\r",
											"          request_method: { type: \"string\" },\r",
											"          syf_prog: { type: \"string\" },\r",
											"          fieldlist: { type: \"string\" },\r",
											"          \"pr-name\": { type: \"string\" },\r",
											"          withoutArchive: { type: \"string\" },\r",
											"          find_add_name: { type: \"string\" },\r",
											"          add_name: { type: \"string\" },\r",
											"          sysParam_REMOTE_ADDR: { type: \"string\" },\r",
											"          login_type: { type: \"string\" },\r",
											"          org: { type: \"string\" },\r",
											"          \"org-id\": { type: \"string\" },\r",
											"          \"user-id\": { type: \"string\" },\r",
											"          user_id: { type: \"string\" },\r",
											"          man: { type: \"string\" },\r",
											"          lpr_code: { type: \"string\" }\r",
											"        },\r",
											"        required: [\"typeApp\", \"format\", \"session-id\", \"request_method\", \"syf_prog\", \"fieldlist\", \"pr-name\", \"withoutArchive\", \"find_add_name\", \"add_name\", \"sysParam_REMOTE_ADDR\", \"login_type\", \"org\", \"org-id\", \"user-id\", \"user_id\", \"man\", \"lpr_code\"]\r",
											"      }\r",
											"    },\r",
											"    required: [\"status\", \"data\"]\r",
											"  };\r",
											"\r",
											"  var response = pm.response.json();\r",
											"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/catalog/filter?request_method=DELETE&session-id={{sessionToken}}&add_name={{add_name}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"catalog",
										"filter"
									],
									"query": [
										{
											"key": "request_method",
											"value": "DELETE"
										},
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										},
										{
											"key": "add_name",
											"value": "{{add_name}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Product card",
			"item": [
				{
					"name": "Analog(Remains)",
					"item": [
						{
							"name": "Get card with analog",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check gdsAvailOP or gdsAvailLC is not null\", function () {   \r",
											"    var jsonData = pm.response.json();       \r",
											"    var gdsAvailOP = jsonData.data.rows[0].gdsAvailOP;\r",
											"    var gdsAvailLC = jsonData.data.rows[0].gdsAvailLC;            \r",
											"    pm.expect(gdsAvailOP !== \"\" || gdsAvailLC !== \"\").to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Extract numeric value from code and set as environment variable\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    var codeValue = responseBody.data.rows[0].code;\r",
											"    var analogCardID = codeValue.replace(\"ETM\", \"\");\r",
											"    pm.environment.set(\"analogCardID\", analogCardID);\r",
											"    pm.expect(analogCardID).to.not.equal(codeValue);\r",
											"    pm.expect(analogCardID).to.be.a('string');\r",
											"});\r",
											"\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json; charset=utf-8"
									}
								],
								"url": {
									"raw": "https://{{host1}}/api/ipro/catalog?val=ETM6206176&for_card=true",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"catalog"
									],
									"query": [
										{
											"key": "val",
											"value": "ETM6206176"
										},
										{
											"key": "for_card",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get analogs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "authority",
										"value": "idev.etm.ru"
									},
									{
										"key": "accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "accept-language",
										"value": "ru,en;q=0.9,en-GB;q=0.8,en-US;q=0.7"
									},
									{
										"key": "cookie",
										"value": "market=ddf49009-8300-442d-898d-8a19bb13290a; userType=; _userGUID=0:ltybdnda:uKWrGh3SNTC0cUgRqYX5Z3tvHVq8oWC~; _ym_uid=1710849097998999753; _ym_d=1710849097; _gid=GA1.2.35489245.1710849097; tmr_lvid=cdf8c477895a9e4868e50d4d6d552486; tmr_lvidTS=1710849097029; _ym_isad=2; popmechanic_sbjs_migrations=popmechanic_1418474375998%3D1%7C%7C%7C1471519752600%3D1%7C%7C%7C1471519752605%3D1; popmechanic_sbjs_migrations=popmechanic_1418474375998%3D1%7C%7C%7C1471519752600%3D1%7C%7C%7C1471519752605%3D1; _ym_visorc=b; city=78; dSesn=817305e3-82f9-6abc-f8a8-6b5120e13106; _dvs=0:ltyd2cbt:iDw2vMry5FyRkuCsgxVRRCGXjUQ_Gcem; _ga_6YRMQ7RWXJ=GS1.1.1710851793.10.1.1710851930.0.0.0; digi_uc=W1sidiIsIjYzOTI1MzYiLDE3MTA4NTE5MzE4NzBdXQ==; _ga=GA1.2.1859581936.1710849097; _ga_R7FGYLMCPS=GS1.2.1710851794.2.1.1710851932.56.0.0; mindboxDeviceUUID=3ab07496-f9a6-4f79-8a70-fef01af2030d; directCrm-session=%7B%22deviceGuid%22%3A%223ab07496-f9a6-4f79-8a70-fef01af2030d%22%7D; tmr_detect=0%7C1710851934048"
									},
									{
										"key": "referer",
										"value": "https://idev.etm.ru/cat/nn/6392536?city=78"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Microsoft Edge\";v=\"122\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "sec-fetch-dest",
										"value": "empty"
									},
									{
										"key": "sec-fetch-mode",
										"value": "cors"
									},
									{
										"key": "sec-fetch-site",
										"value": "same-origin"
									},
									{
										"key": "user-agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36 Edg/122.0.0.0"
									}
								],
								"url": {
									"raw": "https://{{host1}}/api/ipro/catalog?page=1&rows=20&zamena={{analogCardID}}&hide_no_post=1&city=78",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"catalog"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "rows",
											"value": "20"
										},
										{
											"key": "zamena",
											"value": "{{analogCardID}}"
										},
										{
											"key": "hide_no_post",
											"value": "1"
										},
										{
											"key": "city",
											"value": "78"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Remains",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('check store name', function () {\r",
											"    var jsonData = pm.response.json();       \r",
											"    var storeName = jsonData.data.InfoStores[1].StoreName;\r",
											"    pm.environment.set('storeName', storeName);\r",
											"});\r",
											"\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "authority",
										"value": "idev.etm.ru"
									},
									{
										"key": "accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "accept-language",
										"value": "ru,en;q=0.9,en-GB;q=0.8,en-US;q=0.7"
									},
									{
										"key": "cookie",
										"value": "market=ddf49009-8300-442d-898d-8a19bb13290a; userType=; _userGUID=0:ltybdnda:uKWrGh3SNTC0cUgRqYX5Z3tvHVq8oWC~; _ym_uid=1710849097998999753; _ym_d=1710849097; _gid=GA1.2.35489245.1710849097; tmr_lvid=cdf8c477895a9e4868e50d4d6d552486; tmr_lvidTS=1710849097029; _ym_isad=2; popmechanic_sbjs_migrations=popmechanic_1418474375998%3D1%7C%7C%7C1471519752600%3D1%7C%7C%7C1471519752605%3D1; popmechanic_sbjs_migrations=popmechanic_1418474375998%3D1%7C%7C%7C1471519752600%3D1%7C%7C%7C1471519752605%3D1; _ym_visorc=b; city=78; dSesn=817305e3-82f9-6abc-f8a8-6b5120e13106; _dvs=0:ltyd2cbt:iDw2vMry5FyRkuCsgxVRRCGXjUQ_Gcem; digi_uc=W1sidiIsIjE3MDg2MjEiLDE3MTA4NTMzNDc5MTFdLFsidiIsIjYzOTI1MzYiLDE3MTA4NTMzODAyMjRdXQ==; _ga=GA1.1.1859581936.1710849097; _ga_6YRMQ7RWXJ=GS1.1.1710851793.10.1.1710853382.0.0.0; _ga_R7FGYLMCPS=GS1.2.1710851794.2.1.1710853382.47.0.0; mindboxDeviceUUID=3ab07496-f9a6-4f79-8a70-fef01af2030d; directCrm-session=%7B%22deviceGuid%22%3A%223ab07496-f9a6-4f79-8a70-fef01af2030d%22%7D; tmr_detect=0%7C1710853384333"
									},
									{
										"key": "referer",
										"value": "https://idev.etm.ru/cat/nn/6392536?city=78"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Microsoft Edge\";v=\"122\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "sec-fetch-dest",
										"value": "empty"
									},
									{
										"key": "sec-fetch-mode",
										"value": "cors"
									},
									{
										"key": "sec-fetch-site",
										"value": "same-origin"
									},
									{
										"key": "user-agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36 Edg/122.0.0.0"
									}
								],
								"url": {
									"raw": "https://idev.etm.ru/api/ipro/goods/{{analogCardID}}/remains?city=78",
									"protocol": "https",
									"host": [
										"idev",
										"etm",
										"ru"
									],
									"path": [
										"api",
										"ipro",
										"goods",
										"{{analogCardID}}",
										"remains"
									],
									"query": [
										{
											"key": "city",
											"value": "78"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "CDEK remains",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "accept-language",
										"value": "ru,en;q=0.9,en-GB;q=0.8,en-US;q=0.7"
									},
									{
										"key": "content-type",
										"value": "application/json"
									},
									{
										"key": "cookie",
										"value": "tmr_lvid=6468fb79ddfd24f7bef57eb7996f2a19; tmr_lvidTS=1711609375865; _ym_uid=1711609376660256361; _ym_d=1711609376; popmechanic_sbjs_migrations=popmechanic_1418474375998%3D1%7C%7C%7C1471519752600%3D1%7C%7C%7C1471519752605%3D1; _userGUID=0:luaw187k:g1f1um5zdrSpx7qyPW6nfBlJ2Vc0Ve3c; city=78; _fbp=fb.1.1711616344832.615296143; popmechanic_sbjs_migrations=popmechanic_1418474375998%3D1%7C%7C%7C1471519752600%3D1%7C%7C%7C1471519752605%3D1; opros-doc=true; welcome_3.0=true; _gid=GA1.2.1474022003.1711950727; _ym_isad=2; DIGI_CARTID=62587425961; _ym_visorc=w; _ga_KRXBFV3FBG=GS1.2.1711973729.7.1.1711975461.60.0.0; dSesn=f34b7320-c839-9666-2026-64343f26d00b; _dvs=0:luh0rkkq:wHeJknOZd5Tgyz9Vx0cuoN1VFnmhG1x0; _gat=1; userType=; market=a6a30c51-d233-433b-9e56-ea2ddb7d72a6; _ga_6YRMQ7RWXJ=GS1.1.1711973840.13.1.1711980301.0.0.0; digi_uc=W1sidiIsIjYyMDYxNzYiLDE3MTE5ODAzMDQ3MzddLFsidiIsIjQzOTg1ODEiLDE3MTE5Nzc5NzAzNTldLFsidiIsIjE1MTczNjAiLDE3MTE5NzY5NTIxMDhdLFsidiIsIjc1ODUyNDUiLDE3MTE5NzY2MTYwMTBdLFsidiIsIjc4MTg0NjIiLDE3MTE5NzUxMzgwODJdLFsidiIsIjEyODczMTciLDE3MTE5NzQyMTMxNDVdLFsidiIsIjU3MzU4ODQiLDE3MTE5NzM4NDIwNDJdLFsidiIsIjExMjkyMzciLDE3MTE2Mzc3NDIxMDBdLFsidiIsIjI2Njg5MTIiLDE3MTE2Mzc2MzgyMDldLFsidiIsIjM4MTc4OTIiLDE3MTE2Mzc2Mjg3NjZdXQ==; _ga=GA1.2.818506287.1711609376; _ga_R7FGYLMCPS=GS1.2.1711973842.11.1.1711980304.16.0.0; mindboxDeviceUUID=b2521b86-0b33-47c4-83d7-c1d1db29de5b; directCrm-session=%7B%22deviceGuid%22%3A%22b2521b86-0b33-47c4-83d7-c1d1db29de5b%22%7D; tmr_detect=0%7C1711980307157"
									},
									{
										"key": "origin",
										"value": "https://idev.etm.ru"
									},
									{
										"key": "referer",
										"value": "https://idev.etm.ru/cat/nn/6206176?city=78"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Microsoft Edge\";v=\"123\", \"Not:A-Brand\";v=\"8\", \"Chromium\";v=\"123\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "sec-fetch-dest",
										"value": "empty"
									},
									{
										"key": "sec-fetch-mode",
										"value": "cors"
									},
									{
										"key": "sec-fetch-site",
										"value": "same-origin"
									},
									{
										"key": "user-agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36 Edg/123.0.0.0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"from_location\":{\"address\":\"пос. Шушары, Ленсоветовская дорога, Центральный склад ЛЦ\"},\"packages\":[{\"height\":5,\"length\":100,\"weight\":10,\"width\":1}],\"tariff_code\":136,\"to_location\":{\"address\":\"Санкт-Петербург и ЛО\"}}"
								},
								"url": {
									"raw": "https://{{host1}}/api/ipro/delivery/request/cdek?csurl=https://api.cdek.ru/v2/calculator/tariff",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"delivery",
										"request",
										"cdek"
									],
									"query": [
										{
											"key": "csurl",
											"value": "https://api.cdek.ru/v2/calculator/tariff"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Remains Change city",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('check changed store name', function () {\r",
											"    var jsonData = pm.response.json();       \r",
											"    var storeChangedName = jsonData.data.InfoStores[1].StoreName;       \r",
											"    pm.environment.set('storeChangedName', storeChangedName);\r",
											"});\r",
											"\r",
											"pm.test('Compare store names with different cities', function () {\r",
											"    var firstCity = pm.environment.get(\"storeName\");\r",
											"    var secondCity = pm.environment.get(\"storeChangedName\");   \r",
											"    pm.expect(firstCity).not.to.eql(secondCity);\r",
											"});\r",
											"\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "authority",
										"value": "idev.etm.ru"
									},
									{
										"key": "accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "accept-language",
										"value": "ru,en;q=0.9,en-GB;q=0.8,en-US;q=0.7"
									},
									{
										"key": "cookie",
										"value": "market=ddf49009-8300-442d-898d-8a19bb13290a; userType=; _userGUID=0:ltybdnda:uKWrGh3SNTC0cUgRqYX5Z3tvHVq8oWC~; _ym_uid=1710849097998999753; _ym_d=1710849097; _gid=GA1.2.35489245.1710849097; tmr_lvid=cdf8c477895a9e4868e50d4d6d552486; tmr_lvidTS=1710849097029; _ym_isad=2; popmechanic_sbjs_migrations=popmechanic_1418474375998%3D1%7C%7C%7C1471519752600%3D1%7C%7C%7C1471519752605%3D1; popmechanic_sbjs_migrations=popmechanic_1418474375998%3D1%7C%7C%7C1471519752600%3D1%7C%7C%7C1471519752605%3D1; _ym_visorc=b; city=78; dSesn=817305e3-82f9-6abc-f8a8-6b5120e13106; _dvs=0:ltyd2cbt:iDw2vMry5FyRkuCsgxVRRCGXjUQ_Gcem; digi_uc=W1sidiIsIjE3MDg2MjEiLDE3MTA4NTMzNDc5MTFdLFsidiIsIjYzOTI1MzYiLDE3MTA4NTMzODAyMjRdXQ==; _ga=GA1.1.1859581936.1710849097; _ga_6YRMQ7RWXJ=GS1.1.1710851793.10.1.1710853382.0.0.0; _ga_R7FGYLMCPS=GS1.2.1710851794.2.1.1710853382.47.0.0; mindboxDeviceUUID=3ab07496-f9a6-4f79-8a70-fef01af2030d; directCrm-session=%7B%22deviceGuid%22%3A%223ab07496-f9a6-4f79-8a70-fef01af2030d%22%7D; tmr_detect=0%7C1710853384333"
									},
									{
										"key": "referer",
										"value": "https://idev.etm.ru/cat/nn/6392536?city=78"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Microsoft Edge\";v=\"122\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "sec-fetch-dest",
										"value": "empty"
									},
									{
										"key": "sec-fetch-mode",
										"value": "cors"
									},
									{
										"key": "sec-fetch-site",
										"value": "same-origin"
									},
									{
										"key": "user-agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36 Edg/122.0.0.0"
									}
								],
								"url": {
									"raw": "https://idev.etm.ru/api/ipro/goods/{{analogCardID}}/remains?city=10",
									"protocol": "https",
									"host": [
										"idev",
										"etm",
										"ru"
									],
									"path": [
										"api",
										"ipro",
										"goods",
										"{{analogCardID}}",
										"remains"
									],
									"query": [
										{
											"key": "city",
											"value": "10"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Analog faster",
					"item": [
						{
							"name": "Get card with analog faster",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check gdsAvailOP or gdsAvailLC is null\", function () {   \r",
											"    var jsonData = pm.response.json();       \r",
											"    var gdsAvailOP = jsonData.data.rows[0].gdsAvailOP;\r",
											"    var gdsAvailLC = jsonData.data.rows[0].gdsAvailLC;          \r",
											"    pm.expect(gdsAvailOP == \"\" && gdsAvailLC == \"\").to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Extract numeric value from code and set as environment variable\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    var codeValue = responseBody.data.rows[0].code;\r",
											"    var analogFasterCardID = codeValue.replace(\"ETM\", \"\");\r",
											"    pm.environment.set(\"analogFasterCardID\", analogFasterCardID);\r",
											"    pm.expect(analogFasterCardID).to.not.equal(codeValue);\r",
											"    pm.expect(analogFasterCardID).to.be.a('string');\r",
											"});\r",
											"\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json; charset=utf-8"
									}
								],
								"url": {
									"raw": "https://{{host1}}/api/ipro/catalog?val=ETM2399812&for_card=true",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"catalog"
									],
									"query": [
										{
											"key": "val",
											"value": "ETM2399812"
										},
										{
											"key": "for_card",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get analogs faster",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "authority",
										"value": "idev.etm.ru"
									},
									{
										"key": "accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "accept-language",
										"value": "ru,en;q=0.9,en-GB;q=0.8,en-US;q=0.7"
									},
									{
										"key": "cookie",
										"value": "market=ddf49009-8300-442d-898d-8a19bb13290a; userType=; _userGUID=0:ltybdnda:uKWrGh3SNTC0cUgRqYX5Z3tvHVq8oWC~; _ym_uid=1710849097998999753; _ym_d=1710849097; _gid=GA1.2.35489245.1710849097; tmr_lvid=cdf8c477895a9e4868e50d4d6d552486; tmr_lvidTS=1710849097029; _ym_isad=2; popmechanic_sbjs_migrations=popmechanic_1418474375998%3D1%7C%7C%7C1471519752600%3D1%7C%7C%7C1471519752605%3D1; popmechanic_sbjs_migrations=popmechanic_1418474375998%3D1%7C%7C%7C1471519752600%3D1%7C%7C%7C1471519752605%3D1; _ym_visorc=b; city=78; dSesn=817305e3-82f9-6abc-f8a8-6b5120e13106; _dvs=0:ltyd2cbt:iDw2vMry5FyRkuCsgxVRRCGXjUQ_Gcem; _ga_6YRMQ7RWXJ=GS1.1.1710851793.10.1.1710851930.0.0.0; digi_uc=W1sidiIsIjYzOTI1MzYiLDE3MTA4NTE5MzE4NzBdXQ==; _ga=GA1.2.1859581936.1710849097; _ga_R7FGYLMCPS=GS1.2.1710851794.2.1.1710851932.56.0.0; mindboxDeviceUUID=3ab07496-f9a6-4f79-8a70-fef01af2030d; directCrm-session=%7B%22deviceGuid%22%3A%223ab07496-f9a6-4f79-8a70-fef01af2030d%22%7D; tmr_detect=0%7C1710851934048"
									},
									{
										"key": "referer",
										"value": "https://idev.etm.ru/cat/nn/6392536?city=78"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Microsoft Edge\";v=\"122\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "sec-fetch-dest",
										"value": "empty"
									},
									{
										"key": "sec-fetch-mode",
										"value": "cors"
									},
									{
										"key": "sec-fetch-site",
										"value": "same-origin"
									},
									{
										"key": "user-agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36 Edg/122.0.0.0"
									}
								],
								"url": {
									"raw": "https://{{host1}}/api/ipro/catalog?page=1&rows=20&zamena={{analogFasterCardID}}&hide_no_post=1&city=78&analog_faster=1",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"catalog"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "rows",
											"value": "20"
										},
										{
											"key": "zamena",
											"value": "{{analogFasterCardID}}"
										},
										{
											"key": "hide_no_post",
											"value": "1"
										},
										{
											"key": "city",
											"value": "78"
										},
										{
											"key": "analog_faster",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Remains",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "authority",
										"value": "idev.etm.ru"
									},
									{
										"key": "accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "accept-language",
										"value": "ru,en;q=0.9,en-GB;q=0.8,en-US;q=0.7"
									},
									{
										"key": "cookie",
										"value": "market=ddf49009-8300-442d-898d-8a19bb13290a; userType=; _userGUID=0:ltybdnda:uKWrGh3SNTC0cUgRqYX5Z3tvHVq8oWC~; _ym_uid=1710849097998999753; _ym_d=1710849097; _gid=GA1.2.35489245.1710849097; tmr_lvid=cdf8c477895a9e4868e50d4d6d552486; tmr_lvidTS=1710849097029; _ym_isad=2; popmechanic_sbjs_migrations=popmechanic_1418474375998%3D1%7C%7C%7C1471519752600%3D1%7C%7C%7C1471519752605%3D1; popmechanic_sbjs_migrations=popmechanic_1418474375998%3D1%7C%7C%7C1471519752600%3D1%7C%7C%7C1471519752605%3D1; _ym_visorc=b; city=78; dSesn=817305e3-82f9-6abc-f8a8-6b5120e13106; _dvs=0:ltyd2cbt:iDw2vMry5FyRkuCsgxVRRCGXjUQ_Gcem; digi_uc=W1sidiIsIjE3MDg2MjEiLDE3MTA4NTMzNDc5MTFdLFsidiIsIjYzOTI1MzYiLDE3MTA4NTMzODAyMjRdXQ==; _ga=GA1.1.1859581936.1710849097; _ga_6YRMQ7RWXJ=GS1.1.1710851793.10.1.1710853382.0.0.0; _ga_R7FGYLMCPS=GS1.2.1710851794.2.1.1710853382.47.0.0; mindboxDeviceUUID=3ab07496-f9a6-4f79-8a70-fef01af2030d; directCrm-session=%7B%22deviceGuid%22%3A%223ab07496-f9a6-4f79-8a70-fef01af2030d%22%7D; tmr_detect=0%7C1710853384333"
									},
									{
										"key": "referer",
										"value": "https://idev.etm.ru/cat/nn/6392536?city=78"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Microsoft Edge\";v=\"122\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "sec-fetch-dest",
										"value": "empty"
									},
									{
										"key": "sec-fetch-mode",
										"value": "cors"
									},
									{
										"key": "sec-fetch-site",
										"value": "same-origin"
									},
									{
										"key": "user-agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36 Edg/122.0.0.0"
									}
								],
								"url": {
									"raw": "https://idev.etm.ru/api/ipro/goods/{{analogFasterCardID}}/remains?city=78",
									"protocol": "https",
									"host": [
										"idev",
										"etm",
										"ru"
									],
									"path": [
										"api",
										"ipro",
										"goods",
										"{{analogFasterCardID}}",
										"remains"
									],
									"query": [
										{
											"key": "city",
											"value": "78"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Not supplied",
					"item": [
						{
							"name": "Get card not supplied",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check gdsAvailOP or gdsAvailLC is null\", function () {   \r",
											"    var jsonData = pm.response.json();       \r",
											"    var gdsCommonAvail = jsonData.data.rows[0].gdsCommonAvail;           \r",
											"    pm.expect(gdsCommonAvail == \"На заказ\").to.be.true;    \r",
											"});\r",
											"\r",
											"pm.test(\"Extract numeric value from code and set as environment variable\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    var codeValue = responseBody.data.rows[0].code;\r",
											"    var analogCardID = codeValue.replace(\"ETM\", \"\");\r",
											"    pm.environment.set(\"analogCardID\", analogCardID);\r",
											"    pm.expect(analogCardID).to.not.equal(codeValue);\r",
											"    pm.expect(analogCardID).to.be.a('string');\r",
											"});\r",
											"\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json; charset=utf-8"
									}
								],
								"url": {
									"raw": "https://{{host1}}/api/ipro/catalog?val=ETM5735884&for_card=true",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"catalog"
									],
									"query": [
										{
											"key": "val",
											"value": "ETM5735884"
										},
										{
											"key": "for_card",
											"value": "true"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Certificates and materials",
					"item": [
						{
							"name": "Get card with certificate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check certificates is not null\", function () {   \r",
											"    var jsonData = pm.response.json();       \r",
											"    var certificate = jsonData.data.rows[0].add_info_card.certificates[0].file;\r",
											"    pm.expect(certificate !== \"\").to.be.true;\r",
											"    pm.environment.set(\"certificateFilePath\", certificate);    \r",
											"});\r",
											"\r",
											"pm.test(\"Check certificates URL\", function () {       \r",
											"    var certificatePath = pm.environment.get(\"certificateFilePath\");\r",
											"    var certificateURL = \"https://www.etm.ru\" + certificatePath;        \r",
											"    \r",
											"    pm.sendRequest(certificateURL, function (err, response) {\r",
											"        if (err) {\r",
											"            console.error(err);\r",
											"            return;\r",
											"        }\r",
											"        \r",
											"        var statusCode = response.code;        \r",
											"        pm.expect(statusCode).to.equal(200); \r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json; charset=utf-8"
									}
								],
								"url": {
									"raw": "https://{{host1}}/api/ipro/catalog?val=ETM1287317&for_card=true",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"catalog"
									],
									"query": [
										{
											"key": "val",
											"value": "ETM1287317"
										},
										{
											"key": "for_card",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get card with materials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check materials are not null\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var materials = jsonData.data.rows[0].add_info_card.gdsTechDescInt[0].gdsTechIntSrc;\r",
											"    pm.expect(materials !== \"\").to.be.true;\r",
											"    pm.environment.set(\"materialPath\", materials); \r",
											"    console.log(materials);\r",
											"});\r",
											"\r",
											"pm.test(\"Check materials URL\", function () {\r",
											"    var materialPath = pm.environment.get(\"materialPath\"); \r",
											"\r",
											"    pm.sendRequest(materialPath, function (err, response) {\r",
											"        if (err) {\r",
											"            console.error(err);\r",
											"            return;\r",
											"        }\r",
											"        \r",
											"        var statusCode = response.code;        \r",
											"        pm.expect(statusCode).to.equal(200); \r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json; charset=utf-8"
									}
								],
								"url": {
									"raw": "https://{{host1}}/api/ipro/catalog?val=ETM1287317&for_card=true",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"catalog"
									],
									"query": [
										{
											"key": "val",
											"value": "ETM1287317"
										},
										{
											"key": "for_card",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "kcc file name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check materials are not null\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var kccFileName = jsonData.data.rows[0].add_info_card.kcc_file_name;\r",
											"    pm.expect(kccFileName !== \"\").to.be.true;\r",
											"    pm.environment.set(\"kccFileName\", kccFileName); \r",
											"    console.log(kccFileName);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json; charset=utf-8"
									}
								],
								"url": {
									"raw": "https://{{host1}}/api/ipro/catalog?val=ETM7818462 &for_card=true",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"catalog"
									],
									"query": [
										{
											"key": "val",
											"value": "ETM7818462 "
										},
										{
											"key": "for_card",
											"value": "true"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Videos",
					"item": [
						{
							"name": "Video",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check videos are not null\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var video = jsonData.data.rows[0].add_info_card.gdsVideos[0].gdsVidSrc;\r",
											"    pm.expect(video !== \"\").to.be.true;\r",
											"    pm.environment.set(\"video\", video); \r",
											"    console.log(video);\r",
											"});\r",
											"\r",
											"pm.test(\"Check video URL\", function () {\r",
											"    var videoPath = pm.environment.get(\"video\"); \r",
											"\r",
											"    pm.sendRequest(videoPath, function (err, response) {\r",
											"        if (err) {\r",
											"            console.error(err);\r",
											"            return;\r",
											"        }\r",
											"        \r",
											"        var statusCode = response.code;        \r",
											"        pm.expect(statusCode).to.equal(200); \r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json; charset=utf-8"
									}
								],
								"url": {
									"raw": "https://{{host1}}/api/ipro/catalog?val=ETM7585245&for_card=true",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"catalog"
									],
									"query": [
										{
											"key": "val",
											"value": "ETM7585245"
										},
										{
											"key": "for_card",
											"value": "true"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Configurator",
					"item": [
						{
							"name": "Conf",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check gdsAvailOP or gdsAvailLC is not null\", function () {   \r",
											"    var jsonData = pm.response.json();       \r",
											"    var confMnfType = jsonData.data.rows[0].conf_mnf_type;\r",
											"    var confMnfUrl  = jsonData.data.rows[0].conf_mnf_url;            \r",
											"    pm.expect(confMnfType !== \"\" && confMnfUrl !== \"\").to.be.true;\r",
											"    pm.environment.set(\"confMnfUrl\", confMnfUrl); \r",
											"});\r",
											"\r",
											"pm.test(\"Check configurator URL\", function () {\r",
											"    var mnfUrl = pm.environment.get(\"confMnfUrl\"); \r",
											"\r",
											"    pm.sendRequest(mnfUrl, function (err, response) {\r",
											"        if (err) {\r",
											"            console.error(err);\r",
											"            return;\r",
											"        }        \r",
											"        var statusCode = response.code;        \r",
											"        pm.expect(statusCode).to.equal(200); \r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json; charset=utf-8"
									}
								],
								"url": {
									"raw": "https://{{host1}}/api/ipro/catalog?val=ETM3337224&for_card=true",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"catalog"
									],
									"query": [
										{
											"key": "val",
											"value": "ETM3337224"
										},
										{
											"key": "for_card",
											"value": "true"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Info resource",
					"item": [
						{
							"name": "Info resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check info is not null\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var infoHtml = jsonData.data.rows[0].html;\r",
											"    pm.expect(infoHtml !== \"\").to.be.true;       \r",
											"});\r",
											"\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/info/resource?type=catalog&doc-type=35&mnf=432&cnt=2",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"info",
										"resource"
									],
									"query": [
										{
											"key": "type",
											"value": "catalog"
										},
										{
											"key": "doc-type",
											"value": "35"
										},
										{
											"key": "mnf",
											"value": "432"
										},
										{
											"key": "cnt",
											"value": "2"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Constructor",
					"item": [
						{
							"name": "Constructor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json; charset=utf-8"
									}
								],
								"url": {
									"raw": "https://{{host1}}/api/ipro/goods/8860569/constructor",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"goods",
										"8860569",
										"constructor"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Tag card",
					"item": [
						{
							"name": "Tag card",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check tags is not null\", function () {   \r",
											"    var jsonData = pm.response.json();       \r",
											"    var tag = jsonData.data.rows[0].add_info_card.tag;\r",
											"    pm.expect(tag !== \"\").to.be.true;      \r",
											"});\r",
											"\r",
											"pm.test(\"Check certificates is not null\", function () {   \r",
											"    var jsonData = pm.response.json();       \r",
											"    var tagLink = jsonData.data.rows[0].add_info_card.tag[0].ctt_link;\r",
											"    pm.expect(tagLink !== \"\").to.be.true;\r",
											"    pm.environment.set(\"tagLink\", tagLink);           \r",
											"});\r",
											"\r",
											"pm.test(\"Check certificates URL\", function () {       \r",
											"    var tagLink = pm.environment.get(\"tagLink\");           \r",
											"    \r",
											"    pm.sendRequest(tagLink, function (err, response) {\r",
											"        if (err) {\r",
											"            console.error(err);\r",
											"            return;\r",
											"        }\r",
											"        \r",
											"        var statusCode = response.code;        \r",
											"        pm.expect(statusCode).to.equal(200); \r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json; charset=utf-8"
									}
								],
								"url": {
									"raw": "https://{{host1}}/api/ipro/catalog?val=ETM5636925&for_card=true",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"catalog"
									],
									"query": [
										{
											"key": "val",
											"value": "ETM5636925"
										},
										{
											"key": "for_card",
											"value": "true"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "My code",
					"item": [
						{
							"name": "Card with my code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check my code is null\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var myCode = jsonData.data.rows[0].my_code;   \r",
											"    pm.environment.set(\"myCode\", myCode);      \r",
											"    pm.expect(myCode == \"\").to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Get card number\", function () {    \r",
											"    var jsonData = pm.response.json();\r",
											"    var myCodeCardID = jsonData.data.rows[0].gdscode;\r",
											"    pm.environment.set(\"myCodeCardID\", myCodeCardID);\r",
											"    \r",
											"});\r",
											"\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json; charset=utf-8"
									},
									{
										"key": "session-id",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{host1}}/api/ipro/catalog?val=ETM6629329&for_card=true",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"catalog"
									],
									"query": [
										{
											"key": "val",
											"value": "ETM6629329"
										},
										{
											"key": "for_card",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Post my code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{sessionToken}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "session-id",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "accept-language",
										"value": "ru,en;q=0.9,en-GB;q=0.8,en-US;q=0.7"
									},
									{
										"key": "cookie",
										"value": "tmr_lvid=6468fb79ddfd24f7bef57eb7996f2a19; tmr_lvidTS=1711609375865; _ym_uid=1711609376660256361; _ym_d=1711609376; popmechanic_sbjs_migrations=popmechanic_1418474375998%3D1%7C%7C%7C1471519752600%3D1%7C%7C%7C1471519752605%3D1; _userGUID=0:luaw187k:g1f1um5zdrSpx7qyPW6nfBlJ2Vc0Ve3c; city=78; _fbp=fb.1.1711616344832.615296143; popmechanic_sbjs_migrations=popmechanic_1418474375998%3D1%7C%7C%7C1471519752600%3D1%7C%7C%7C1471519752605%3D1; opros-doc=true; welcome_3.0=true; _ga_KRXBFV3FBG=GS1.2.1712223090.16.1.1712224650.60.0.0; _ym_isad=2; _gid=GA1.2.1135968146.1712555228; domain_sid=W4ZtvVtvjyQ_bpkk1SejW%3A1712555231098; DIGI_CARTID=15688277127; embedded_ipro2=true; _dvs=0:luqwc0kc:C7dvsh~0pu_FH8A2fz5zjLB7w3ZsAXqn; _ym_visorc=b; session-id=cf228aec-dfa8-caa4-c014-0adcc8c29dbc; userType=iPRO; _ga_6YRMQ7RWXJ=GS1.1.1712577158.38.1.1712579157.0.0.0; dSesn=61bc60a2-363c-df47-01c7-e5aa4e666e14; _ga=GA1.2.818506287.1711609376; _gat=1; _ga_R7FGYLMCPS=GS1.2.1712577345.38.1.1712579166.60.0.0; tmr_detect=0%7C1712579169772; digi_uc=W1sidiIsIjY2MjkzMjkiLDE3MTI1NzkxNzMyMzJdLFsidiIsIjU3MzU4ODQiLDE3MTI1NzczODI4NjJdLFsidiIsIjQ1Nzk2MjIiLDE3MTI1NjkxNDg3NzVdLFsidiIsIjk5NDMwNDMiLDE3MTIyOTY3Mzk3MDBdLFsidiIsIjkzNzk2NDEiLDE3MTIyMzg2ODE0NDddLFsidiIsIjE3MDg2MjEiLDE3MTIyMzY5ODY2MjJdLFsidiIsIjc1ODUyNDUiLDE3MTIyMjkyMDYzMDhdLFsidiIsIjU2MzY5MjUiLDE3MTIwNTkyNzc1MzBdLFsidiIsIjQzOTg1ODEiLDE3MTE5OTIxNDcwNDFdLFsidiIsIjMyNjEwMTYiLDE3MTE5ODE3NTQ4MTBdXQ==; mindboxDeviceUUID=b2521b86-0b33-47c4-83d7-c1d1db29de5b; directCrm-session=%7B%22deviceGuid%22%3A%22b2521b86-0b33-47c4-83d7-c1d1db29de5b%22%7D"
									},
									{
										"key": "origin",
										"value": "https://idev.etm.ru"
									},
									{
										"key": "referer",
										"value": "https://idev.etm.ru/cat/nn/6629329"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Microsoft Edge\";v=\"123\", \"Not:A-Brand\";v=\"8\", \"Chromium\";v=\"123\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "sec-fetch-dest",
										"value": "empty"
									},
									{
										"key": "sec-fetch-mode",
										"value": "cors"
									},
									{
										"key": "sec-fetch-site",
										"value": "same-origin"
									},
									{
										"key": "session-id",
										"value": "cf228aec-dfa8-caa4-c014-0adcc8c29dbc"
									},
									{
										"key": "user-agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36 Edg/123.0.0.0"
									},
									{
										"key": "session-id",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "EtmGdsCode",
											"value": "{{myCodeCardID}}",
											"type": "text"
										},
										{
											"key": "CliGdsCode",
											"value": "{{$randomInt}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://idev.etm.ru/api/ipro/catalog/mapping",
									"protocol": "https",
									"host": [
										"idev",
										"etm",
										"ru"
									],
									"path": [
										"api",
										"ipro",
										"catalog",
										"mapping"
									]
								}
							},
							"response": []
						},
						{
							"name": "My code after post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"get code\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var oldMyCode = jsonData.data.rows[0].my_code;       \r",
											"    pm.environment.set(\"oldMyCode\", oldMyCode);        \r",
											"});\r",
											"\r",
											"pm.test(\"Get card number\", function () {    \r",
											"    var jsonData = pm.response.json();\r",
											"    var myCodeCardID = jsonData.data.rows[0].gdscode;\r",
											"    pm.environment.set(\"myCodeCardID\", myCodeCardID);\r",
											"    \r",
											"});\r",
											"\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json; charset=utf-8"
									},
									{
										"key": "session-id",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{host1}}/api/ipro/catalog?val=ETM6629329&for_card=true",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"catalog"
									],
									"query": [
										{
											"key": "val",
											"value": "ETM6629329"
										},
										{
											"key": "for_card",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Change code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "accept-language",
										"value": "ru,en;q=0.9,en-GB;q=0.8,en-US;q=0.7"
									},
									{
										"key": "cookie",
										"value": "tmr_lvid=6468fb79ddfd24f7bef57eb7996f2a19; tmr_lvidTS=1711609375865; _ym_uid=1711609376660256361; _ym_d=1711609376; popmechanic_sbjs_migrations=popmechanic_1418474375998%3D1%7C%7C%7C1471519752600%3D1%7C%7C%7C1471519752605%3D1; _userGUID=0:luaw187k:g1f1um5zdrSpx7qyPW6nfBlJ2Vc0Ve3c; city=78; _fbp=fb.1.1711616344832.615296143; popmechanic_sbjs_migrations=popmechanic_1418474375998%3D1%7C%7C%7C1471519752600%3D1%7C%7C%7C1471519752605%3D1; opros-doc=true; welcome_3.0=true; _ga_KRXBFV3FBG=GS1.2.1712223090.16.1.1712224650.60.0.0; _ym_isad=2; _gid=GA1.2.1135968146.1712555228; domain_sid=W4ZtvVtvjyQ_bpkk1SejW%3A1712555231098; DIGI_CARTID=15688277127; embedded_ipro2=true; dSesn=6165fa3b-92a8-b772-dc35-cd114fb0930b; _dvs=0:luqwc0kc:C7dvsh~0pu_FH8A2fz5zjLB7w3ZsAXqn; _ym_visorc=b; session-id=cf228aec-dfa8-caa4-c014-0adcc8c29dbc; userType=iPRO; _ga_6YRMQ7RWXJ=GS1.1.1712577158.38.1.1712578088.0.0.0; digi_uc=W1sidiIsIjY2MjkzMjkiLDE3MTI1NzgwOTc5MTJdLFsidiIsIjU3MzU4ODQiLDE3MTI1NzczODI4NjJdLFsidiIsIjQ1Nzk2MjIiLDE3MTI1NjkxNDg3NzVdLFsidiIsIjk5NDMwNDMiLDE3MTIyOTY3Mzk3MDBdLFsidiIsIjkzNzk2NDEiLDE3MTIyMzg2ODE0NDddLFsidiIsIjE3MDg2MjEiLDE3MTIyMzY5ODY2MjJdLFsidiIsIjc1ODUyNDUiLDE3MTIyMjkyMDYzMDhdLFsidiIsIjU2MzY5MjUiLDE3MTIwNTkyNzc1MzBdLFsidiIsIjQzOTg1ODEiLDE3MTE5OTIxNDcwNDFdLFsidiIsIjMyNjEwMTYiLDE3MTE5ODE3NTQ4MTBdXQ==; _ga=GA1.2.818506287.1711609376; _gat=1; _ga_R7FGYLMCPS=GS1.2.1712577345.38.1.1712578098.60.0.0; mindboxDeviceUUID=b2521b86-0b33-47c4-83d7-c1d1db29de5b; directCrm-session=%7B%22deviceGuid%22%3A%22b2521b86-0b33-47c4-83d7-c1d1db29de5b%22%7D; tmr_detect=0%7C1712578099985"
									},
									{
										"key": "origin",
										"value": "https://idev.etm.ru"
									},
									{
										"key": "referer",
										"value": "https://idev.etm.ru/cat/nn/6629329"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Microsoft Edge\";v=\"123\", \"Not:A-Brand\";v=\"8\", \"Chromium\";v=\"123\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "sec-fetch-dest",
										"value": "empty"
									},
									{
										"key": "sec-fetch-mode",
										"value": "cors"
									},
									{
										"key": "sec-fetch-site",
										"value": "same-origin"
									},
									{
										"key": "session-id",
										"value": "{{sessionToken}}"
									},
									{
										"key": "user-agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36 Edg/123.0.0.0"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "EtmGdsCode",
											"value": "{{myCodeCardID}}",
											"type": "text"
										},
										{
											"key": "CliGdsCode",
											"value": "{{$randomInt}}",
											"type": "text"
										},
										{
											"key": "OldCliGdsCode",
											"value": "{{oldMyCode}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://idev.etm.ru/api/ipro/catalog/mapping",
									"protocol": "https",
									"host": [
										"idev",
										"etm",
										"ru"
									],
									"path": [
										"api",
										"ipro",
										"catalog",
										"mapping"
									]
								}
							},
							"response": []
						},
						{
							"name": "My code after change",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"get new code\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var newMyCode = jsonData.data.rows[0].my_code;       \r",
											"    pm.environment.set(\"newMyCode\", newMyCode);        \r",
											"});\r",
											"\r",
											"pm.test(\"Check new code is not equal to old one\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var newMyCode = jsonData.data.rows[0].my_code;   \r",
											"    var oldMyCode = pm.environment.get(\"oldMyCode\");\r",
											"    pm.expect(newMyCode != oldMyCode).to.be.true;    \r",
											"    pm.environment.set(\"newMyCode\", newMyCode);        \r",
											"});\r",
											"\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json; charset=utf-8"
									},
									{
										"key": "session-id",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{host1}}/api/ipro/catalog?val=ETM6629329&for_card=true",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"catalog"
									],
									"query": [
										{
											"key": "val",
											"value": "ETM6629329"
										},
										{
											"key": "for_card",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete my code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "accept-language",
										"value": "ru,en;q=0.9,en-GB;q=0.8,en-US;q=0.7"
									},
									{
										"key": "cookie",
										"value": "tmr_lvid=6468fb79ddfd24f7bef57eb7996f2a19; tmr_lvidTS=1711609375865; _ym_uid=1711609376660256361; _ym_d=1711609376; popmechanic_sbjs_migrations=popmechanic_1418474375998%3D1%7C%7C%7C1471519752600%3D1%7C%7C%7C1471519752605%3D1; _userGUID=0:luaw187k:g1f1um5zdrSpx7qyPW6nfBlJ2Vc0Ve3c; city=78; _fbp=fb.1.1711616344832.615296143; popmechanic_sbjs_migrations=popmechanic_1418474375998%3D1%7C%7C%7C1471519752600%3D1%7C%7C%7C1471519752605%3D1; opros-doc=true; welcome_3.0=true; _ga_KRXBFV3FBG=GS1.2.1712223090.16.1.1712224650.60.0.0; _ym_isad=2; _gid=GA1.2.1135968146.1712555228; domain_sid=W4ZtvVtvjyQ_bpkk1SejW%3A1712555231098; DIGI_CARTID=15688277127; embedded_ipro2=true; _dvs=0:luqwc0kc:C7dvsh~0pu_FH8A2fz5zjLB7w3ZsAXqn; _ym_visorc=b; session-id=cf228aec-dfa8-caa4-c014-0adcc8c29dbc; userType=iPRO; dSesn=61bc60a2-363c-df47-01c7-e5aa4e666e14; tmr_detect=0%7C1712579362760; _ga_6YRMQ7RWXJ=GS1.1.1712577158.38.1.1712579417.0.0.0; digi_uc=W1sidiIsIjY2MjkzMjkiLDE3MTI1Nzk0MTgwMDddLFsidiIsIjU3MzU4ODQiLDE3MTI1NzczODI4NjJdLFsidiIsIjQ1Nzk2MjIiLDE3MTI1NjkxNDg3NzVdLFsidiIsIjk5NDMwNDMiLDE3MTIyOTY3Mzk3MDBdLFsidiIsIjkzNzk2NDEiLDE3MTIyMzg2ODE0NDddLFsidiIsIjE3MDg2MjEiLDE3MTIyMzY5ODY2MjJdLFsidiIsIjc1ODUyNDUiLDE3MTIyMjkyMDYzMDhdLFsidiIsIjU2MzY5MjUiLDE3MTIwNTkyNzc1MzBdLFsidiIsIjQzOTg1ODEiLDE3MTE5OTIxNDcwNDFdLFsidiIsIjMyNjEwMTYiLDE3MTE5ODE3NTQ4MTBdXQ==; _ga=GA1.2.818506287.1711609376; _gat=1; _ga_R7FGYLMCPS=GS1.2.1712577345.38.1.1712579418.60.0.0; mindboxDeviceUUID=b2521b86-0b33-47c4-83d7-c1d1db29de5b; directCrm-session=%7B%22deviceGuid%22%3A%22b2521b86-0b33-47c4-83d7-c1d1db29de5b%22%7D"
									},
									{
										"key": "origin",
										"value": "https://idev.etm.ru"
									},
									{
										"key": "referer",
										"value": "https://idev.etm.ru/cat/nn/6629329"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Microsoft Edge\";v=\"123\", \"Not:A-Brand\";v=\"8\", \"Chromium\";v=\"123\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "sec-fetch-dest",
										"value": "empty"
									},
									{
										"key": "sec-fetch-mode",
										"value": "cors"
									},
									{
										"key": "sec-fetch-site",
										"value": "same-origin"
									},
									{
										"key": "session-id",
										"value": "{{sessionToken}}"
									},
									{
										"key": "user-agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36 Edg/123.0.0.0"
									}
								],
								"url": {
									"raw": "https://idev.etm.ru/api/ipro/catalog/mapping?EtmGdsCode={{myCodeCardID}}&CliGdsCode={{newMyCode}}",
									"protocol": "https",
									"host": [
										"idev",
										"etm",
										"ru"
									],
									"path": [
										"api",
										"ipro",
										"catalog",
										"mapping"
									],
									"query": [
										{
											"key": "EtmGdsCode",
											"value": "{{myCodeCardID}}"
										},
										{
											"key": "CliGdsCode",
											"value": "{{newMyCode}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "My code after delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check my code is null\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var myCode = jsonData.data.rows[0].my_code;   \r",
											"    pm.environment.set(\"myCode\", myCode);        \r",
											"    pm.expect(myCode == \"\").to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Get card number\", function () {    \r",
											"    var jsonData = pm.response.json();\r",
											"    var myCodeCardID = jsonData.data.rows[0].gdscode;\r",
											"    pm.environment.set(\"myCodeCardID\", myCodeCardID);\r",
											"    \r",
											"});\r",
											"\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json; charset=utf-8"
									},
									{
										"key": "session-id",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{host1}}/api/ipro/catalog?val=ETM6629329&for_card=true",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"catalog"
									],
									"query": [
										{
											"key": "val",
											"value": "ETM6629329"
										},
										{
											"key": "for_card",
											"value": "true"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "contacts",
			"item": [
				{
					"name": "cladr",
					"item": [
						{
							"name": "take class17 from cladr",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let rgCodeForCladr = pm.response.json().data[0].class17\r",
											"pm.environment.set(\"rgCodeForCladr\", rgCodeForCladr)\r",
											"\r",
											"let cityForCladr = pm.response.json().data[0].city\r",
											"pm.environment.set(\"cityForCladr\", cityForCladr)\r",
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Data array is present and contains at least one element\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"});\r",
											"// Test for response time\r",
											"pm.test(\"Response time is within acceptable range\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"// Verify the length of data array\r",
											"pm.test(\"The data array length must be greater than zero\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    const data = responseData.data;\r",
											"   \r",
											"    pm.expect(data.length).to.be.greaterThan(0, \"Data array should not be empty\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/info/cladr?session-id={{sessionToken}}&term=костомукша&clicode=11",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"info",
										"cladr"
									],
									"query": [
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										},
										{
											"key": "term",
											"value": "костомукша"
										},
										{
											"key": "clicode",
											"value": "11"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "set new city",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validate the structure of the 'status' object\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.exist.and.to.be.an('object');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is within acceptable range\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/user/set?param=region&val={{rgCodeForCladr}}&session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"user",
										"set"
									],
									"query": [
										{
											"key": "param",
											"value": "region"
										},
										{
											"key": "val",
											"value": "{{rgCodeForCladr}}"
										},
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "compare city id and class17",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check rg\", function () {\r",
											"    pm.expect(pm.response.json().data.rg).to.equal(pm.environment.get(\"rgCodeForCladr\"));\r",
											"});\r",
											"\r",
											"pm.test(\"check city\", function () {\r",
											"    pm.expect(pm.response.json().data.city).to.equal(pm.environment.get(\"cityForCladr\"));\r",
											"});\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Org list array is present and has the expected structure\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/user/session/get?session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"user",
										"session",
										"get"
									],
									"query": [
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "check stores",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check for existin store\", function () {\r",
											"    // pm.expect(pm.response.json().data.rows[0].address).to.equal(\"г. Петрозаводск, ул.Мелентьевой, д.50А\");\r",
											"    pm.expect(pm.response.text()).to.include('г. Петрозаводск, ул.Мелентьевой, д.50А');\r",
											"});\r",
											"pm.test(\"Response time is within acceptable range\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Rows array is present and contains the expected number of elements\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData).to.be.an('object');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/info/stores?class17={{rgCodeForCladr}}&all_stores=1&no_cache=1",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"info",
										"stores"
									],
									"query": [
										{
											"key": "class17",
											"value": "{{rgCodeForCladr}}"
										},
										{
											"key": "all_stores",
											"value": "1"
										},
										{
											"key": "no_cache",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "cities",
					"item": [
						{
							"name": "info city",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let listOfCities = pm.response.json().data.rows\r",
											"\r",
											"listOfCities.forEach(function(row) {\r",
											"    if (row.name === \"Москва и МО\") {\r",
											"        pm.environment.set(\"rgCode\", row.class17)\r",
											"    }\r",
											"})\r",
											"\r",
											"pm.test(\"rgCode created\", function () {\r",
											"    pm.expect(pm.environment.get(\"rgCode\")).is.not.empty;\r",
											"});\r",
											"pm.test(\"Response time is within acceptable range\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status object has the correct structure\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.exist.and.to.be.an('object');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/info/city?no_cache=1",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"info",
										"city"
									],
									"query": [
										{
											"key": "no_cache",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "set new city",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validate the structure of the status object\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData).to.be.an('object');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test('Response time is within acceptable range', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000, \"Response time should be less than 1000ms\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/user/set?param=region&val={{rgCode}}&session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"user",
										"set"
									],
									"query": [
										{
											"key": "param",
											"value": "region"
										},
										{
											"key": "val",
											"value": "{{rgCode}}"
										},
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "compare city id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let cityCode = pm.response.json().data.city\r",
											"pm.environment.set(\"cityCode\", cityCode)\r",
											"\r",
											"pm.test(\"check rg\", function () {\r",
											"    pm.expect(pm.response.json().data.rg).to.equal(pm.environment.get(\"rgCode\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Data object contains expected fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.data).to.exist.and.to.be.an('object');\r",
											"    pm.expect(responseData.data).to.include.all.keys(\"basket_lines\", \"verified\", \"name\", \"phone\", \"org_list\", \"rights\", \"show_ipro3\", \"manufs\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/user/session/get?session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"user",
										"session",
										"get"
									],
									"query": [
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "check class17",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check rg\", function () {\r",
											"    pm.expect(pm.response.json().data.class17).to.equal(pm.environment.get(\"rgCode\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"});\r",
											"// Test for response time within acceptable range\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/info/city/{{cityCode}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"info",
										"city",
										"{{cityCode}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check stores",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check for existin store\", function () {\r",
											"    // pm.expect(pm.response.json().data.rows[0].address).to.equal(\"г. Москва, ул. 5-я кабельная д.2 стр.1\");\r",
											"    pm.expect(pm.response.text()).to.include('г. Москва, ул. 5-я кабельная д.2 стр.1');\r",
											"});\r",
											"pm.test(\"Response time is within acceptable range\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Rows array is present and contains the expected number of elements\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData).to.be.an('object');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/info/stores?class17={{rgCode}}&all_stores=1&no_cache=1",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"info",
										"stores"
									],
									"query": [
										{
											"key": "class17",
											"value": "{{rgCode}}"
										},
										{
											"key": "all_stores",
											"value": "1"
										},
										{
											"key": "no_cache",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "client",
			"item": [
				{
					"name": "pick lpr",
					"item": [
						{
							"name": "login as WI",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var sessionToken;\r",
											"pm.test(\"Login and session management\", function () {\r",
											"    // Perform login and extract session token from the response\r",
											"    sessionToken = pm.response.json().data.session;\r",
											"    pm.environment.set(\"sessionTokenWI\", sessionToken);\r",
											"});\r",
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status object is present with expected code and message fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.status).to.exist;\r",
											"    pm.expect(responseData.status.code).to.exist;\r",
											"    pm.expect(responseData.status.message).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Data object is present and contains expected fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.data).to.exist;\r",
											"\r",
											"    const expectedFields = [\"basket_lines\", \"session\", \"sms\", \"change_pwd\", \"verified\", \"name\", \"phone\", \"position\", \"st\", \"email\"];\r",
											"    expectedFields.forEach(field => {\r",
											"        pm.expect(responseData.data).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"pm.test(\"Response time is within acceptable range\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000); // Adjust the time threshold as per the application's requirements\r",
											"});\r",
											"pm.test(\"Schema is valid\", function () {\r",
											"  var schema = {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      status: {\r",
											"        type: \"object\",\r",
											"        properties: {\r",
											"          code: { type: \"number\" },\r",
											"          message: { type: \"string\" }\r",
											"        },\r",
											"        required: [\"code\", \"message\"]\r",
											"      },\r",
											"      data: {\r",
											"        type: \"object\",\r",
											"        properties: {\r",
											"          basket_lines: { type: \"number\" },\r",
											"          session: { type: \"string\" },\r",
											"          sms: { type: \"string\" },\r",
											"          change_pwd: { type: \"string\" },\r",
											"          verified: { type: \"boolean\" },\r",
											"          name: { type: \"string\" },\r",
											"          phone: { type: \"string\" },\r",
											"          position: { type: \"string\" },\r",
											"          st: { type: \"string\" },\r",
											"          email: { type: \"string\" }\r",
											"        },\r",
											"        required: [\"basket_lines\", \"session\", \"sms\", \"change_pwd\", \"verified\", \"name\", \"phone\", \"position\", \"st\", \"email\"]\r",
											"      }\r",
											"    },\r",
											"    required: [\"status\", \"data\"]\r",
											"  };\r",
											"\r",
											"  var response = pm.response.json();\r",
											"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "log",
											"value": "degtyarev_nv",
											"type": "text"
										},
										{
											"key": "pwd",
											"value": "boimanager",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{host1}}/api/ipro/user/login",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"user",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "find lpr",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 4000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"// Test for response content type\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"pm.test(\"Schema is valid\", function () {\r",
											"  var schema = {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      status: {\r",
											"        type: \"object\",\r",
											"        properties: {\r",
											"          code: { type: \"number\" },\r",
											"          message: { type: \"string\" },\r",
											"        },\r",
											"        required: [\"code\", \"message\"],\r",
											"      },\r",
											"      data: {\r",
											"        type: \"object\",\r",
											"        properties: {\r",
											"          page: { type: \"string\" },\r",
											"          rows: {\r",
											"            type: \"array\",\r",
											"            items: {\r",
											"              type: \"object\",\r",
											"            },\r",
											"          },\r",
											"          total: { type: \"number\" },\r",
											"          records: { type: \"number\" },\r",
											"        },\r",
											"        required: [\"page\", \"rows\", \"total\", \"records\"],\r",
											"      },\r",
											"    },\r",
											"    required: [\"status\", \"data\"],\r",
											"  };\r",
											"\r",
											"  var response = pm.response.json();\r",
											"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/info/client?sord=asc&sidx=cli-name&search_value=60004392&session-id={{sessionTokenWI}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"info",
										"client"
									],
									"query": [
										{
											"key": "sord",
											"value": "asc"
										},
										{
											"key": "sidx",
											"value": "cli-name"
										},
										{
											"key": "search_value",
											"value": "60004392"
										},
										{
											"key": "session-id",
											"value": "{{sessionTokenWI}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "select",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields - status, code, and message\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.status).to.exist;\r",
											"    pm.expect(responseData.status.code).to.exist;\r",
											"    pm.expect(responseData.status.message).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Code is a non-negative integer\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.status.code).to.be.a('number');\r",
											"  pm.expect(responseData.status.code).to.be.at.least(0);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is within acceptable range\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"// Test for response schema\r",
											"pm.test(\"Schema is valid\", function () {\r",
											"  var schema = {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      status: {\r",
											"        type: \"object\",\r",
											"        properties: {\r",
											"          code: { type: \"number\" },\r",
											"          message: { type: \"string\" }\r",
											"        },\r",
											"        required: [\"code\", \"message\"]\r",
											"      }\r",
											"    },\r",
											"    required: [\"status\"]\r",
											"  };\r",
											"\r",
											"  var response = pm.response.json();\r",
											"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "session-id",
											"value": "{{sessionTokenWI}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{host1}}/api/ipro/client/60004392/select",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"client",
										"60004392",
										"select"
									]
								}
							},
							"response": []
						},
						{
							"name": "email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Email and name are non-empty strings\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.data.rows).to.be.an('array');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"pm.test(\"Schema is valid\", function () {\r",
											"  var schema = {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      status: {\r",
											"        type: \"object\",\r",
											"        properties: {\r",
											"          code: { type: \"number\" },\r",
											"          message: { type: \"string\" }\r",
											"        },\r",
											"        required: [\"code\", \"message\"]\r",
											"      },\r",
											"      data: {\r",
											"        type: \"object\",\r",
											"        properties: {\r",
											"          rows: {\r",
											"            type: \"array\",\r",
											"            items: {\r",
											"              type: \"object\",\r",
											"              properties: {\r",
											"                email: { type: \"string\" },\r",
											"                name: { type: \"string\" }\r",
											"              },\r",
											"              required: [\"email\", \"name\"]\r",
											"            }\r",
											"          }\r",
											"        },\r",
											"        required: [\"rows\"]\r",
											"      }\r",
											"    },\r",
											"    required: [\"status\", \"data\"]\r",
											"  };\r",
											"\r",
											"  var response = pm.response.json();\r",
											"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "session-id",
											"value": "{{sessionTokenWI}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{host1}}/api/ipro/client/emails",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"client",
										"emails"
									]
								}
							},
							"response": []
						},
						{
							"name": "banks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Validate the structure of the status object\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.status).to.exist.and.to.be.an('object');",
											"    pm.expect(responseData.status.code).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.status.message).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"Rows array is present and contains the expected number of elements\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.data.rows).to.be.an('array');",
											"    pm.expect(responseData.data.rows).to.not.empty;",
											"});",
											"",
											"pm.test(\"Response time is within acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);",
											"});",
											"pm.test(\"Schema is valid\", function () {",
											"  var schema = {",
											"    type: \"object\",",
											"    properties: {",
											"      status: {",
											"        type: \"object\",",
											"        properties: {",
											"          code: { type: \"number\" },",
											"          message: { type: \"string\" }",
											"        },",
											"        required: [\"code\", \"message\"]",
											"      },",
											"      data: {",
											"        type: \"object\",",
											"        properties: {",
											"          page: { type: \"string\" },",
											"          rows: {",
											"            type: \"array\",",
											"            items: {",
											"              type: \"object\",",
											"              properties: {",
											"                id: { type: \"string\" },",
											"                accnt: { type: \"string\" },",
											"                bankname: { type: \"string\" }",
											"              },",
											"              required: [\"id\", \"accnt\", \"bankname\"]",
											"            }",
											"          },",
											"          total: { type: \"number\" },",
											"          records: { type: \"number\" },",
											"          userdata: {",
											"            type: \"object\",",
											"            properties: {",
											"              error: { type: \"string\" },",
											"              limit: { type: \"string\" }",
											"            }",
											"          }",
											"        },",
											"        required: [\"page\", \"rows\", \"total\", \"records\", \"userdata\"]",
											"      }",
											"    },",
											"    required: [\"status\", \"data\"]",
											"  };",
											"",
											"  var response = pm.response.json();",
											"  pm.expect(tv4.validate(response, schema)).to.be.true;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "https://{{host1}}/api/ipro/client/banks?session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"client",
										"banks"
									],
									"query": [
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get card",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "session-id",
										"value": "{{sessionTokenWI}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "session-id",
											"value": "{{sessionTokenWI}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{host1}}/api/ipro/client/getCard/1",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"client",
										"getCard",
										"1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "in documents",
					"item": [
						{
							"name": "contracts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const now = require('moment');\r",
											"pm.environment.set(\"data for act now\", now().format(\"YYYY-MM-DD\"));\r",
											"\r",
											"const present = require(\"moment\")\r",
											"pm.environment.set(\"data for act present\", present().add(-6, 'month').format(\"YYYY-MM-DD\"))\r",
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    \r",
											"    const requiredFields = ['id', 'num', 'from', 'to'];\r",
											"    requiredFields.forEach(field => {\r",
											"        pm.expect(responseData.contracts[0]).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Each contract's id is a non-empty string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.contracts).to.be.an('array');\r",
											"    responseData.contracts.forEach(function(contract) {\r",
											"        pm.expect(contract.id).to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
											"    });\r",
											"});\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"pm.test(\"Schema is valid\", function () {\r",
											"  var schema = {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      contracts: {\r",
											"        type: \"array\",\r",
											"        items: {\r",
											"          type: \"object\",\r",
											"          properties: {\r",
											"            id: { type: \"string\", minLength: 1 },\r",
											"            num: { type: \"string\", minLength: 1 },\r",
											"            from: { type: \"string\", minLength: 1 },\r",
											"            to: { type: \"string\", minLength: 1 },\r",
											"            credit: { type: \"string\" },\r",
											"            srok_dosr: { type: \"string\" },\r",
											"            delay: { type: \"string\" },\r",
											"            main: { type: \"boolean\" },\r",
											"            receivables: { type: \"string\" },\r",
											"            isactive: { type: \"string\" },\r",
											"            issigned: { type: \"string\" }\r",
											"          },\r",
											"          required: [\"id\", \"num\", \"from\", \"to\", \"main\"]\r",
											"        }\r",
											"      },\r",
											"      firms: {\r",
											"        type: \"array\",\r",
											"        items: {\r",
											"          type: \"object\",\r",
											"          properties: {\r",
											"            code: { type: \"string\" },\r",
											"            firmname: { type: \"string\" }\r",
											"          },\r",
											"          required: [\"code\", \"firmname\"]\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    required: [\"contracts\", \"firms\"]\r",
											"  };\r",
											"\r",
											"  var response = pm.response.json();\r",
											"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "session-id",
											"value": "{{sessionToken}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{host1}}/api/ipro/client/contracts",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"client",
										"contracts"
									]
								}
							},
							"response": []
						},
						{
							"name": "act",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.include.all.keys('Type', 'OrganizationCode', 'PartnerCode', 'StartDate', 'EndDate', 'Data');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Number is a non-empty string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.Data).to.be.an('array');\r",
											"    \r",
											"    responseData.Data.forEach(function(item) {\r",
											"        pm.expect(item.Number).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Number should be a non-empty string\");\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Date is in a valid date format\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    responseData.Data.forEach(function(dataItem) {\r",
											"        pm.expect(dataItem.Date).to.match(/^\\d{4}/);\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Amount is a non-negative integer\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.Data).to.be.an('array');\r",
											"    \r",
											"    responseData.Data.forEach(function(data) {\r",
											"        pm.expect(data.Amount).to.be.a('number').and.to.satisfy((value) => value >= 0, \"Amount must be a non-negative integer\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is within acceptable range\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000, \"Response time should be less than 1000ms\");\r",
											"});\r",
											"pm.test(\"Schema is valid\", function () {\r",
											"  var schema = {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      Type: { type: \"string\" },\r",
											"      OrganizationCode: { type: \"string\" },\r",
											"      PartnerCode: { type: \"string\" },\r",
											"      StartDate: { type: \"string\", format: \"date\" },\r",
											"      EndDate: { type: \"string\", format: \"date\" },\r",
											"      Data: {\r",
											"        type: \"array\",\r",
											"        items: {\r",
											"          type: \"object\",\r",
											"          properties: {\r",
											"            Number: { type: \"string\", minLength: 1 },\r",
											"            Date: { type: \"string\", format: \"date\" },\r",
											"            PartnerCode: { type: \"string\" },\r",
											"            ID: { type: \"string\" },\r",
											"            Amount: { type: \"number\", minimum: 0 },\r",
											"            StartDate: { type: \"string\", format: \"date\" },\r",
											"            EndDate: { type: \"string\", format: \"date\" },\r",
											"            ReconciliationAgreed: { type: \"boolean\" },\r",
											"            StatusEDO: { type: \"string\" }\r",
											"          },\r",
											"          required: [\"Number\", \"Date\", \"PartnerCode\", \"ID\", \"Amount\", \"StartDate\", \"EndDate\", \"ReconciliationAgreed\", \"StatusEDO\"]\r",
											"        }\r",
											"      }\r",
											"    },\r",
											"    required: [\"Type\", \"OrganizationCode\", \"PartnerCode\", \"StartDate\", \"EndDate\", \"Data\"]\r",
											"  };\r",
											"\r",
											"  var response = pm.response.json();\r",
											"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/client/act?session-id={{sessionToken}}&OrganizationCode=202&StartDate={{data for act present}}&EndDate={{data for act now}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"client",
										"act"
									],
									"query": [
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										},
										{
											"key": "OrganizationCode",
											"value": "202"
										},
										{
											"key": "StartDate",
											"value": "{{data for act present}}"
										},
										{
											"key": "EndDate",
											"value": "{{data for act now}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "act post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"\r",
											"  pm.expect(responseData).to.be.an('object');\r",
											"  pm.expect(responseData.EndDate).to.exist;\r",
											"  pm.expect(responseData.StartDate).to.exist;\r",
											"  pm.expect(responseData.PartnerCode).to.exist;\r",
											"  pm.expect(responseData.OrganizationCode).to.exist;\r",
											"  pm.expect(responseData.Error).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"End date is in a valid date format\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.EndDate).to.match(/^\\d{4}/);\r",
											"});\r",
											"\r",
											"pm.test(\"Start date is in a valid date format\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.StartDate).to.match(/^\\d{4}/);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"PartnerCode and OrganizationCode should be non-empty strings\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData).to.be.an('object');\r",
											"  pm.expect(responseData.PartnerCode).to.be.a('string').and.to.have.lengthOf.at.least(1, \"PartnerCode should not be empty\");\r",
											"  pm.expect(responseData.OrganizationCode).to.be.a('string').and.to.have.lengthOf.at.least(1, \"OrganizationCode should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Error should be either an empty string or a descriptive error message\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData).to.be.an('object');\r",
											"  pm.expect(responseData.Error).to.satisfy(function (error) {\r",
											"    return typeof error === 'string' && (error === \"\" || error.length > 0);\r",
											"  }, \"Error should be either an empty string or a descriptive error message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(3500);\r",
											"});\r",
											"pm.test(\"Schema is valid\", function () {\r",
											"  var schema = {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      EndDate: { type: \"string\" },\r",
											"      StartDate: { type: \"string\" },\r",
											"      PartnerCode: { type: \"string\" },\r",
											"      OrganizationCode: { type: \"string\" },\r",
											"      Error: { type: \"string\" }\r",
											"    },\r",
											"    required: [\"EndDate\", \"StartDate\", \"PartnerCode\", \"OrganizationCode\", \"Error\"]\r",
											"  };\r",
											"\r",
											"  var response = pm.response.json();\r",
											"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/client/act?session-id={{sessionToken}}&OrganizationCode=202&StartDate={{data for act present}}&EndDate={{data for act now}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"client",
										"act"
									],
									"query": [
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										},
										{
											"key": "OrganizationCode",
											"value": "202"
										},
										{
											"key": "StartDate",
											"value": "{{data for act present}}"
										},
										{
											"key": "EndDate",
											"value": "{{data for act now}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "advance",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields - status and data\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('status');\r",
											"    pm.expect(responseData).to.have.property('data');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Records field in the data object is a non-negative integer\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.data).to.be.an('object');\r",
											"    pm.expect(responseData.data.records).to.be.a('number').and.to.be.at.least(0);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Rows array is present and empty\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.have.property('data');\r",
											"    pm.expect(responseData.data).to.be.an('object');\r",
											"    pm.expect(responseData.data).to.have.property('rows');\r",
											"    pm.expect(responseData.data.rows).to.be.an('array').and.to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is within acceptable range\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Schema is valid\", function () {\r",
											"  var schema = {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      status: {\r",
											"        type: \"object\",\r",
											"        properties: {\r",
											"          code: { type: \"number\" },\r",
											"          message: { type: \"string\" }\r",
											"        },\r",
											"        required: [\"code\", \"message\"]\r",
											"      },\r",
											"      data: {\r",
											"        type: \"object\",\r",
											"        properties: {\r",
											"          records: { type: \"number\" },\r",
											"          rows: {\r",
											"            type: \"array\",\r",
											"            items: { type: \"object\" }\r",
											"          }\r",
											"        },\r",
											"        required: [\"records\", \"rows\"]\r",
											"      }\r",
											"    },\r",
											"    required: [\"status\", \"data\"]\r",
											"  };\r",
											"\r",
											"  var response = pm.response.json();\r",
											"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://idev.etm.ru/api/ipro/client/advance?OrganizationCode=202&StartDate={{data for act present}}&EndDate={{data for act now}}&Page=1&session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"idev",
										"etm",
										"ru"
									],
									"path": [
										"api",
										"ipro",
										"client",
										"advance"
									],
									"query": [
										{
											"key": "OrganizationCode",
											"value": "202"
										},
										{
											"key": "StartDate",
											"value": "{{data for act present}}"
										},
										{
											"key": "EndDate",
											"value": "{{data for act now}}"
										},
										{
											"key": "Page",
											"value": "1"
										},
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "create folder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('create folder', function () {\r",
											"    let cl_tableRowid = pm.response.json().data.cl_tableRowid;\r",
											"    pm.environment.set('cl_tableRowid', cl_tableRowid);\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"pm.test('Response time is within acceptable range', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"})\r",
											"\r",
											"pm.test('Code in status is a non-negative integer', function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData.status.code).to.be.a('number');\r",
											"    pm.expect(responseData.status.code).to.be.at.least(0);\r",
											"})\r",
											"\r",
											"pm.test('Message in status is a non-empty string', function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData.status.message).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Message should not be empty');\r",
											"})\r",
											"\r",
											"pm.test(\"Session-id is a non-empty string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.data['session-id']).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Session-id should be a non-empty string\");\r",
											"});\r",
											"\r",
											"pm.test('Response Content-Type is application/json', function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"})\r",
											"\r",
											"pm.test('Response schema is valid', function () {\r",
											"    var schema = {\r",
											"        type: 'object',\r",
											"        properties: {\r",
											"            status: {\r",
											"                type: 'object',\r",
											"                properties: {\r",
											"                    code: { type: 'number' },\r",
											"                    message: { type: 'string' }\r",
											"                },\r",
											"                required: [\r",
											"                    'code',\r",
											"                    'message'\r",
											"                ]\r",
											"            },\r",
											"            data: {\r",
											"                type: 'object',\r",
											"                properties: {\r",
											"                    'session-id': { type: 'string' },\r",
											"                    org_id: { type: 'string' },\r",
											"                    clt_desc: { type: 'string' },\r",
											"                    typeApp: { type: 'string' },\r",
											"                    format: { type: 'string' },\r",
											"                    request_method: { type: 'string' },\r",
											"                    syf_prog: { type: 'string' },\r",
											"                    clt_type: { type: 'string' },\r",
											"                    fieldlist: { type: 'string' },\r",
											"                    sysParam_REMOTE_ADDR: { type: 'string' },\r",
											"                    login_type: { type: 'string' },\r",
											"                    org: { type: 'string' },\r",
											"                    'org-id': { type: 'string' },\r",
											"                    'user-id': { type: 'string' },\r",
											"                    user_id: { type: 'string' },\r",
											"                    man: { type: 'string' },\r",
											"                    lpr_code: { type: 'string' },\r",
											"                    cl_tableRowid: { type: 'string' }\r",
											"                },\r",
											"                required: [\r",
											"                    'session-id',\r",
											"                    'org_id',\r",
											"                    'clt_desc',\r",
											"                    'typeApp',\r",
											"                    'format',\r",
											"                    'request_method',\r",
											"                    'syf_prog',\r",
											"                    'clt_type',\r",
											"                    'fieldlist',\r",
											"                    'sysParam_REMOTE_ADDR',\r",
											"                    'login_type',\r",
											"                    'org',\r",
											"                    'org-id',\r",
											"                    'user-id',\r",
											"                    'user_id',\r",
											"                    'man',\r",
											"                    'lpr_code',\r",
											"                    'cl_tableRowid'\r",
											"                ]\r",
											"            }\r",
											"        },\r",
											"        required: [\r",
											"            'status',\r",
											"            'data'\r",
											"        ]\r",
											"    };\r",
											"    var response = pm.response.json();\r",
											"    pm.expect(tv4.validate(response, schema)).to.be.true;\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "session-id",
											"value": "{{sessionToken}}",
											"type": "text"
										},
										{
											"key": "org_id",
											"value": "60004392",
											"type": "text"
										},
										{
											"key": "clt_desc",
											"value": "{{data for act now}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{host1}}/api/ipro/client/table/folder",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"client",
										"table",
										"folder"
									]
								}
							},
							"response": []
						},
						{
							"name": "table check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let clt_code = pm.response.json().data.rows[0].clt_code;\r",
											"pm.environment.set('clt_code', clt_code);\r",
											"\r",
											"\r",
											"pm.test('check for exist', function () {\r",
											"\r",
											"    pm.expect(pm.response.json().data.rows[0].id).to.equal(pm.environment.get('cl_tableRowid'));\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is within acceptable range\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Schema is valid\", function () {\r",
											"  var schema = {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      status: {\r",
											"        type: \"object\",\r",
											"        properties: {\r",
											"          code: { type: \"number\" },\r",
											"          message: { type: \"string\" }\r",
											"        },\r",
											"        required: [\"code\", \"message\"]\r",
											"      },\r",
											"      data: {\r",
											"        type: \"object\",\r",
											"        properties: {\r",
											"          page: { type: \"string\" },\r",
											"          rows: {\r",
											"            type: \"array\",\r",
											"            items: {\r",
											"              type: \"object\",\r",
											"              properties: {\r",
											"                id: { type: \"string\" },\r",
											"                clt_seq: { type: \"string\" },\r",
											"                clt_code: { type: \"string\" },\r",
											"                clt_desc: { type: \"string\" },\r",
											"                clt_extra1: { type: \"string\" }\r",
											"              },\r",
											"              required: [\"id\", \"clt_seq\", \"clt_code\", \"clt_desc\", \"clt_extra1\"]\r",
											"            }\r",
											"          },\r",
											"          total: { type: \"number\" },\r",
											"          records: { type: \"number\" },\r",
											"          userdata: {\r",
											"            type: \"object\",\r",
											"            properties: {\r",
											"              error: { type: \"string\" },\r",
											"              limit: { type: \"string\" }\r",
											"            },\r",
											"            required: [\"error\", \"limit\"]\r",
											"          }\r",
											"        },\r",
											"        required: [\"page\", \"rows\", \"total\", \"records\", \"userdata\"]\r",
											"      }\r",
											"    },\r",
											"    required: [\"status\", \"data\"]\r",
											"  };\r",
											"\r",
											"  var response = pm.response.json();\r",
											"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Data object is present in the response\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.data).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Clt_code in the rows array is a non-empty string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.data.rows).to.be.an('array').that.is.not.empty;\r",
											"    responseData.data.rows.forEach(function(row) {\r",
											"        pm.expect(row.clt_code).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Clt_code should be a non-empty string\");\r",
											"    });\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/client/table/folder?session-id={{sessionToken}}&cli-code=60004392&page=1&rows=15",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"client",
										"table",
										"folder"
									],
									"query": [
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										},
										{
											"key": "cli-code",
											"value": "60004392"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "rows",
											"value": "15"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "search folder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.have.property('status');\r",
											"    pm.expect(responseData).to.have.property('data');\r",
											"    pm.expect(responseData.data).to.have.property('page');\r",
											"    pm.expect(responseData.data).to.have.property('rows');\r",
											"    pm.expect(responseData.data).to.have.property('total');\r",
											"    pm.expect(responseData.data).to.have.property('records');\r",
											"    pm.expect(responseData.data).to.have.property('userdata');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status object contains expected fields - code and message\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.status).to.be.an('object');\r",
											"    pm.expect(responseData.status).to.have.property('code');\r",
											"    pm.expect(responseData.status).to.have.property('message');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Rows array is present and contains expected number of elements\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.have.property('data');\r",
											"    pm.expect(responseData.data).to.have.property('rows').that.is.an('array')\r",
											"});\r",
											"\r",
											"// Test to check if the response time is within an acceptable range\r",
											"pm.test(\"Response time is within acceptable range\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000); // Adjust the time threshold as per the acceptable range\r",
											"});\r",
											"pm.test(\"Schema is valid\", function () {\r",
											"  var schema = {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      status: {\r",
											"        type: \"object\",\r",
											"        properties: {\r",
											"          code: { type: \"number\" },\r",
											"          message: { type: \"string\" }\r",
											"        },\r",
											"        required: [\"code\", \"message\"]\r",
											"      },\r",
											"      data: {\r",
											"        type: \"object\",\r",
											"        properties: {\r",
											"          page: { type: \"string\" },\r",
											"          rows: { type: \"array\" },\r",
											"          total: { type: \"number\" },\r",
											"          records: { type: \"number\" },\r",
											"          userdata: {\r",
											"            type: \"object\",\r",
											"            properties: {\r",
											"              error: { type: \"string\" },\r",
											"              limit: { type: \"string\" }\r",
											"            },\r",
											"            required: [\"error\", \"limit\"]\r",
											"          }\r",
											"        },\r",
											"        required: [\"page\", \"rows\", \"total\", \"records\", \"userdata\"]\r",
											"      }\r",
											"    },\r",
											"    required: [\"status\", \"data\"]\r",
											"  };\r",
											"\r",
											"  var response = pm.response.json();\r",
											"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/client/table/folder?session-id={{sessionToken}}&cli-code=60004392&_search=true&clt_desc={{data for act now}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"client",
										"table",
										"folder"
									],
									"query": [
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										},
										{
											"key": "cli-code",
											"value": "60004392"
										},
										{
											"key": "_search",
											"value": "true"
										},
										{
											"key": "clt_desc",
											"value": "{{data for act now}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "change name",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "request_method",
											"value": "PUT",
											"type": "text"
										},
										{
											"key": "session-id",
											"value": "{{sessionToken}}",
											"type": "text"
										},
										{
											"key": "cl_tableRowid",
											"value": "{{cl_tableRowid}}",
											"type": "text"
										},
										{
											"key": "clt_code",
											"value": "{{clt_code}}",
											"type": "text"
										},
										{
											"key": "clt_desc",
											"value": "новое имя + {{data for act now}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{host1}}/api/ipro/client/table/folder",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"client",
										"table",
										"folder"
									]
								}
							},
							"response": []
						},
						{
							"name": "del folsder",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/client/table/folder?session-id={{sessionToken}}&request_method=DELETE&cl_tableRowid={{cl_tableRowid}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"client",
										"table",
										"folder"
									],
									"query": [
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										},
										{
											"key": "request_method",
											"value": "DELETE"
										},
										{
											"key": "cl_tableRowid",
											"value": "{{cl_tableRowid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Diadok",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let today = (new Date()).getDate();\r",
											"pm.environment.set(\"today\", today.toString());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "datediadoc",
										"value": "{{today}}"
									},
									{
										"key": "session-id",
										"value": "{{sessionToken}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "session-id",
											"value": "{{sessionToken}}",
											"type": "text"
										},
										{
											"key": "org_id",
											"value": "60004392",
											"type": "text"
										},
										{
											"key": "clt_desc",
											"value": "{{data for act now}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{host1}}/api/ipro/client/cli-card-add/saveDateDiadoc",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"client",
										"cli-card-add",
										"saveDateDiadoc"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create vendor contract",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json; charset=utf-8"
									}
								],
								"url": {
									"raw": "https://{{host1}}/api/ipro/client/creVendorContract?pay_delay=5&begdate={{today}}&enddate={{today}}&session-id={{sessionTokenWI}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"client",
										"creVendorContract"
									],
									"query": [
										{
											"key": "pay_delay",
											"value": "5"
										},
										{
											"key": "begdate",
											"value": "{{today}}"
										},
										{
											"key": "enddate",
											"value": "{{today}}"
										},
										{
											"key": "session-id",
											"value": "{{sessionTokenWI}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "in profile",
					"item": [
						{
							"name": "odz_pdz",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status object should have code and message properties\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.status).to.exist.and.to.be.an('object');\r",
											"    pm.expect(responseData.status).to.have.property('code').that.is.a('number');\r",
											"    pm.expect(responseData.status).to.have.property('message').that.is.a('string');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Data object contains rows array and records field\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.data).to.exist;\r",
											"  pm.expect(responseData.data.rows).to.be.an('array');\r",
											"  pm.expect(responseData.data.records).to.exist;\r",
											"});\r",
											"\r",
											"// Test for response time within acceptable range\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Schema is valid\", function () {\r",
											"  var schema = {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      status: {\r",
											"        type: \"object\",\r",
											"        properties: {\r",
											"          code: { type: \"number\" },\r",
											"          message: { type: \"string\" }\r",
											"        },\r",
											"        required: [\"code\", \"message\"]\r",
											"      },\r",
											"      data: {\r",
											"        type: \"object\",\r",
											"        properties: {\r",
											"          rows: { type: \"array\" },\r",
											"          records: { type: \"number\" }\r",
											"        },\r",
											"        required: [\"rows\", \"records\"]\r",
											"      }\r",
											"    },\r",
											"    required: [\"status\", \"data\"]\r",
											"  };\r",
											"\r",
											"  var response = pm.response.json();\r",
											"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/client/odz_pdz?session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"client",
										"odz_pdz"
									],
									"query": [
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "stat_n|AmAccReceiv",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields - status and data\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('status');\r",
											"    pm.expect(responseData).to.have.property('data');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status object contains code and message\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.status).to.be.an('object');\r",
											"    pm.expect(responseData.status.code).to.exist.and.to.be.a('number');\r",
											"    pm.expect(responseData.status.message).to.exist.and.to.be.a('string');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Data object contains AmAccReceiv\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.data.AmAccReceiv).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Schema is valid\", function () {\r",
											"  var schema = {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      status: {\r",
											"        type: \"object\",\r",
											"        properties: {\r",
											"          code: {\r",
											"            type: \"number\"\r",
											"          },\r",
											"          message: {\r",
											"            type: \"string\"\r",
											"          }\r",
											"        },\r",
											"        required: [\"code\", \"message\"]\r",
											"      },\r",
											"      data: {\r",
											"        type: \"object\",\r",
											"        properties: {\r",
											"          AmAccReceiv: {\r",
											"            type: \"string\"\r",
											"          }\r",
											"        },\r",
											"        required: [\"AmAccReceiv\"]\r",
											"      }\r",
											"    },\r",
											"    required: [\"status\", \"data\"]\r",
											"  };\r",
											"\r",
											"  var response = pm.response.json();\r",
											"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/client/stat_n?info=AmAccReceiv&session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"client",
										"stat_n"
									],
									"query": [
										{
											"key": "info",
											"value": "AmAccReceiv"
										},
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "stat_n|SumPennyCnt",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields - status and data\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('status');\r",
											"    pm.expect(responseData).to.have.property('data');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status code is a non-negative integer\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.status.code).to.be.a('number').and.to.be.at.least(0);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"SumPennyCnt is present and is of type string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.data.SumPennyCnt).to.exist.and.to.be.a('string');\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"pm.test(\"Schema is valid\", function () {\r",
											"  var schema = {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      status: {\r",
											"        type: \"object\",\r",
											"        properties: {\r",
											"          code: { type: \"number\" },\r",
											"          message: { type: \"string\" }\r",
											"        },\r",
											"        required: [\"code\", \"message\"]\r",
											"      },\r",
											"      data: {\r",
											"        type: \"object\",\r",
											"        properties: {\r",
											"          SumPennyCnt: { type: \"string\" }\r",
											"        },\r",
											"        required: [\"SumPennyCnt\"]\r",
											"      }\r",
											"    },\r",
											"    required: [\"status\", \"data\"]\r",
											"  };\r",
											"\r",
											"  var response = pm.response.json();\r",
											"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/client/stat_n?info=SumPennyCnt&session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"client",
										"stat_n"
									],
									"query": [
										{
											"key": "info",
											"value": "SumPennyCnt"
										},
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Warrant",
					"item": [
						{
							"name": "login as WI",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var sessionToken;\r",
											"pm.test(\"Login and session management\", function () {\r",
											"    // Perform login and extract session token from the response\r",
											"    sessionToken = pm.response.json().data.session;\r",
											"    pm.environment.set(\"sessionTokenWI\", sessionToken);\r",
											"});\r",
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status object is present with expected code and message fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.status).to.exist;\r",
											"    pm.expect(responseData.status.code).to.exist;\r",
											"    pm.expect(responseData.status.message).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Data object is present and contains expected fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.data).to.exist;\r",
											"\r",
											"    const expectedFields = [\"basket_lines\", \"session\", \"sms\", \"change_pwd\", \"verified\", \"name\", \"phone\", \"position\", \"st\", \"email\"];\r",
											"    expectedFields.forEach(field => {\r",
											"        pm.expect(responseData.data).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"pm.test(\"Response time is within acceptable range\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000); // Adjust the time threshold as per the application's requirements\r",
											"});\r",
											"pm.test(\"Schema is valid\", function () {\r",
											"  var schema = {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      status: {\r",
											"        type: \"object\",\r",
											"        properties: {\r",
											"          code: { type: \"number\" },\r",
											"          message: { type: \"string\" }\r",
											"        },\r",
											"        required: [\"code\", \"message\"]\r",
											"      },\r",
											"      data: {\r",
											"        type: \"object\",\r",
											"        properties: {\r",
											"          basket_lines: { type: \"number\" },\r",
											"          session: { type: \"string\" },\r",
											"          sms: { type: \"string\" },\r",
											"          change_pwd: { type: \"string\" },\r",
											"          verified: { type: \"boolean\" },\r",
											"          name: { type: \"string\" },\r",
											"          phone: { type: \"string\" },\r",
											"          position: { type: \"string\" },\r",
											"          st: { type: \"string\" },\r",
											"          email: { type: \"string\" }\r",
											"        },\r",
											"        required: [\"basket_lines\", \"session\", \"sms\", \"change_pwd\", \"verified\", \"name\", \"phone\", \"position\", \"st\", \"email\"]\r",
											"      }\r",
											"    },\r",
											"    required: [\"status\", \"data\"]\r",
											"  };\r",
											"\r",
											"  var response = pm.response.json();\r",
											"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "log",
											"value": "degtyarev_nv",
											"type": "text"
										},
										{
											"key": "pwd",
											"value": "boimanager",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{host1}}/api/ipro/user/login",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"user",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "select",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "session-id",
											"value": "{{sessionTokenWI}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{host1}}/api/ipro/client/9122666/select",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"client",
										"9122666",
										"select"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get warrant 265 list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "session-id",
										"value": "{{sessionTokenWI}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "session-id",
											"value": "{{sessionTokenWI}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{host1}}/api/ipro/client/warrant",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"client",
										"warrant"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get chosen war data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json; charset=utf-8"
									}
								],
								"url": {
									"raw": "https://{{host1}}/api/ipro/client/getWarr?signRowid={{signRowid}}&session-id={{sessionTokenWI}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"client",
										"getWarr"
									],
									"query": [
										{
											"key": "signRowid",
											"value": "{{signRowid}}"
										},
										{
											"key": "session-id",
											"value": "{{sessionTokenWI}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get warrants date period",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "accept-language",
										"value": "ru,en;q=0.9,en-GB;q=0.8,en-US;q=0.7"
									},
									{
										"key": "cookie",
										"value": "popmechanic_sbjs_migrations=popmechanic_1418474375998%3D1%7C%7C%7C1471519752600%3D1%7C%7C%7C1471519752605%3D1; _userGUID=0:luaw187k:g1f1um5zdrSpx7qyPW6nfBlJ2Vc0Ve3c; opros-doc=true; welcome_3.0=true; modeCat=false; _ym_uid=1711609376660256361; _ym_d=1712904559; tmr_lvid=6468fb79ddfd24f7bef57eb7996f2a19; tmr_lvidTS=1711609375865; PHPSESSID=837a77882b9cdfe032487535ee43c9b2; _ga_5J5GMQP0GB=GS1.2.1712916043.1.1.1712916047.0.0.0; _ga_ZKLDL3ZMBE=GS1.1.1712916043.1.1.1712916053.0.0.0; city=78; _gid=GA1.2.1565387731.1713160046; popmechanic_sbjs_migrations=popmechanic_1418474375998%3D1%7C%7C%7C1471519752600%3D1%7C%7C%7C1471519752605%3D1; _ym_isad=2; DIGI_CARTID=25275813749; digi_uc=W1sidiIsIjQ0NjMxMjYiLDE3MTMzMzMwMjI2NjJdLFsidiIsIjQ4MTQwOTgiLDE3MTMyNTc4NTc2MjBdLFsidiIsIjk3Nzg5NzEiLDE3MTI5MjgwNDUyNjBdLFsidiIsIjEzNjgyIiwxNzEyOTI2ODE1MzAzXSxbInYiLCI1NzM1ODg0IiwxNzEzMzM1NTkwNDAxXV0=; _ym_visorc=b; domain_sid=W4ZtvVtvjyQ_bpkk1SejW%3A1713340415003; mindboxDeviceUUID=b2521b86-0b33-47c4-83d7-c1d1db29de5b; directCrm-session=%7B%22deviceGuid%22%3A%22b2521b86-0b33-47c4-83d7-c1d1db29de5b%22%7D; dSesn=2fbbbb7f-c2c7-2781-0035-f3efd1909172; _dvs=0:lv3in8nz:n6LHDKlaAvzBPd12mo7bqVkLNcphjg_s; session-id=b9534bfe-ff27-b9aa-c114-ce6680505bc4; userType=WI; _ga=GA1.1.1012657986.1712904558; tmr_detect=0%7C1713340444121; embedded_ipro2=true; _ga_R7FGYLMCPS=GS1.2.1713340414.18.1.1713340447.27.0.0; _ga_6YRMQ7RWXJ=GS1.1.1713340307.20.1.1713340448.0.0.0"
									},
									{
										"key": "referer",
										"value": "https://idev.etm.ru/ipro3/documents?rows=10&page=1"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Microsoft Edge\";v=\"123\", \"Not:A-Brand\";v=\"8\", \"Chromium\";v=\"123\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "sec-fetch-dest",
										"value": "empty"
									},
									{
										"key": "sec-fetch-mode",
										"value": "cors"
									},
									{
										"key": "sec-fetch-site",
										"value": "same-origin"
									},
									{
										"key": "user-agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36 Edg/123.0.0.0"
									}
								],
								"url": {
									"raw": "https://{{host1}}/api/ipro/client/getWarrant?session-id={{sessionTokenWI}}&date1=01.01.2024&date2=01.04.2024&podp=true&npodp=true",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"client",
										"getWarrant"
									],
									"query": [
										{
											"key": "session-id",
											"value": "{{sessionTokenWI}}"
										},
										{
											"key": "date1",
											"value": "01.01.2024"
										},
										{
											"key": "date2",
											"value": "01.04.2024"
										},
										{
											"key": "podp",
											"value": "true"
										},
										{
											"key": "npodp",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create warrant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "accept-language",
										"value": "ru,en;q=0.9,en-GB;q=0.8,en-US;q=0.7"
									},
									{
										"key": "cookie",
										"value": "popmechanic_sbjs_migrations=popmechanic_1418474375998%3D1%7C%7C%7C1471519752600%3D1%7C%7C%7C1471519752605%3D1; _userGUID=0:luaw187k:g1f1um5zdrSpx7qyPW6nfBlJ2Vc0Ve3c; opros-doc=true; welcome_3.0=true; modeCat=false; _ym_uid=1711609376660256361; _ym_d=1712904559; tmr_lvid=6468fb79ddfd24f7bef57eb7996f2a19; tmr_lvidTS=1711609375865; PHPSESSID=837a77882b9cdfe032487535ee43c9b2; _ga_5J5GMQP0GB=GS1.2.1712916043.1.1.1712916047.0.0.0; _ga_ZKLDL3ZMBE=GS1.1.1712916043.1.1.1712916053.0.0.0; city=78; _gid=GA1.2.1565387731.1713160046; popmechanic_sbjs_migrations=popmechanic_1418474375998%3D1%7C%7C%7C1471519752600%3D1%7C%7C%7C1471519752605%3D1; _ym_isad=2; DIGI_CARTID=25275813749; digi_uc=W1sidiIsIjQ0NjMxMjYiLDE3MTMzMzMwMjI2NjJdLFsidiIsIjQ4MTQwOTgiLDE3MTMyNTc4NTc2MjBdLFsidiIsIjk3Nzg5NzEiLDE3MTI5MjgwNDUyNjBdLFsidiIsIjEzNjgyIiwxNzEyOTI2ODE1MzAzXSxbInYiLCI1NzM1ODg0IiwxNzEzMzM1NTkwNDAxXV0=; _ym_visorc=b; domain_sid=W4ZtvVtvjyQ_bpkk1SejW%3A1713340415003; mindboxDeviceUUID=b2521b86-0b33-47c4-83d7-c1d1db29de5b; directCrm-session=%7B%22deviceGuid%22%3A%22b2521b86-0b33-47c4-83d7-c1d1db29de5b%22%7D; dSesn=2fbbbb7f-c2c7-2781-0035-f3efd1909172; _dvs=0:lv3in8nz:n6LHDKlaAvzBPd12mo7bqVkLNcphjg_s; session-id=b9534bfe-ff27-b9aa-c114-ce6680505bc4; userType=WI; _ga=GA1.1.1012657986.1712904558; tmr_detect=0%7C1713340444121; embedded_ipro2=true; _ga_R7FGYLMCPS=GS1.2.1713340414.18.1.1713340447.27.0.0; _ga_6YRMQ7RWXJ=GS1.1.1713340307.20.1.1713340448.0.0.0"
									},
									{
										"key": "origin",
										"value": "https://idev.etm.ru"
									},
									{
										"key": "referer",
										"value": "https://idev.etm.ru/ipro3/documents?rows=10&page=1"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Microsoft Edge\";v=\"123\", \"Not:A-Brand\";v=\"8\", \"Chromium\";v=\"123\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "sec-fetch-dest",
										"value": "empty"
									},
									{
										"key": "sec-fetch-mode",
										"value": "cors"
									},
									{
										"key": "sec-fetch-site",
										"value": "same-origin"
									},
									{
										"key": "user-agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36 Edg/123.0.0.0"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "cNumPS",
											"value": "?-5",
											"type": "text"
										},
										{
											"key": "cJob",
											"value": "Тест",
											"type": "text"
										},
										{
											"key": "cFIO",
											"value": "Тест Тест Тест",
											"type": "text"
										},
										{
											"key": "cTextPs",
											"value": "11.01.2024",
											"type": "text"
										},
										{
											"key": "begdate",
											"value": "11.01.2024",
											"type": "text"
										},
										{
											"key": "enddate",
											"value": "19.04.2024",
											"type": "text"
										},
										{
											"key": "EntId",
											"value": "9d5337ce-62bb-4890-a00e-c409f15d4ad4",
											"type": "text"
										},
										{
											"key": "MesId",
											"value": "0d7c60ad-b530-4946-839c-66fe203fc75c",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{host1}}/api/ipro/client/warrant?session-id={{sessionTokenWI}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"client",
										"warrant"
									],
									"query": [
										{
											"key": "session-id",
											"value": "{{sessionTokenWI}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Put changes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "accept-language",
										"value": "ru,en;q=0.9,en-GB;q=0.8,en-US;q=0.7"
									},
									{
										"key": "cookie",
										"value": "popmechanic_sbjs_migrations=popmechanic_1418474375998%3D1%7C%7C%7C1471519752600%3D1%7C%7C%7C1471519752605%3D1; _userGUID=0:luaw187k:g1f1um5zdrSpx7qyPW6nfBlJ2Vc0Ve3c; opros-doc=true; welcome_3.0=true; modeCat=false; _ym_uid=1711609376660256361; _ym_d=1712904559; tmr_lvid=6468fb79ddfd24f7bef57eb7996f2a19; tmr_lvidTS=1711609375865; PHPSESSID=837a77882b9cdfe032487535ee43c9b2; _ga_5J5GMQP0GB=GS1.2.1712916043.1.1.1712916047.0.0.0; _ga_ZKLDL3ZMBE=GS1.1.1712916043.1.1.1712916053.0.0.0; city=78; _gid=GA1.2.1565387731.1713160046; popmechanic_sbjs_migrations=popmechanic_1418474375998%3D1%7C%7C%7C1471519752600%3D1%7C%7C%7C1471519752605%3D1; _ym_isad=2; DIGI_CARTID=25275813749; digi_uc=W1sidiIsIjQ0NjMxMjYiLDE3MTMzMzMwMjI2NjJdLFsidiIsIjQ4MTQwOTgiLDE3MTMyNTc4NTc2MjBdLFsidiIsIjk3Nzg5NzEiLDE3MTI5MjgwNDUyNjBdLFsidiIsIjEzNjgyIiwxNzEyOTI2ODE1MzAzXSxbInYiLCI1NzM1ODg0IiwxNzEzMzM1NTkwNDAxXV0=; _ym_visorc=b; domain_sid=W4ZtvVtvjyQ_bpkk1SejW%3A1713340415003; mindboxDeviceUUID=b2521b86-0b33-47c4-83d7-c1d1db29de5b; directCrm-session=%7B%22deviceGuid%22%3A%22b2521b86-0b33-47c4-83d7-c1d1db29de5b%22%7D; dSesn=2fbbbb7f-c2c7-2781-0035-f3efd1909172; _dvs=0:lv3in8nz:n6LHDKlaAvzBPd12mo7bqVkLNcphjg_s; session-id=b9534bfe-ff27-b9aa-c114-ce6680505bc4; userType=WI; _ga=GA1.1.1012657986.1712904558; tmr_detect=0%7C1713340444121; embedded_ipro2=true; _ga_R7FGYLMCPS=GS1.2.1713340414.18.1.1713340447.27.0.0; _ga_6YRMQ7RWXJ=GS1.1.1713340307.20.1.1713340448.0.0.0"
									},
									{
										"key": "origin",
										"value": "https://idev.etm.ru"
									},
									{
										"key": "referer",
										"value": "https://idev.etm.ru/ipro3/documents?rows=10&page=1"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Microsoft Edge\";v=\"123\", \"Not:A-Brand\";v=\"8\", \"Chromium\";v=\"123\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"Windows\""
									},
									{
										"key": "sec-fetch-dest",
										"value": "empty"
									},
									{
										"key": "sec-fetch-mode",
										"value": "cors"
									},
									{
										"key": "sec-fetch-site",
										"value": "same-origin"
									},
									{
										"key": "user-agent",
										"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36 Edg/123.0.0.0"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "cNumPS",
											"value": "?-5",
											"type": "text"
										},
										{
											"key": "cJob",
											"value": "Тест",
											"type": "text"
										},
										{
											"key": "cFIO",
											"value": "Тест Тест Тест",
											"type": "text"
										},
										{
											"key": "cTextPs",
											"value": "{{today}}",
											"type": "text"
										},
										{
											"key": "begdate",
											"value": "{{today}}",
											"type": "text"
										},
										{
											"key": "enddate",
											"value": "19.04.2024",
											"type": "text"
										},
										{
											"key": "EntId",
											"value": "9d5337ce-62bb-4890-a00e-c409f15d4ad4",
											"type": "text"
										},
										{
											"key": "MesId",
											"value": "0d7c60ad-b530-4946-839c-66fe203fc75c",
											"type": "text"
										},
										{
											"key": "signRowid",
											"value": "{{signRowid}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{host1}}/api/ipro/client/warrant?session-id={{sessionTokenWI}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"client",
										"warrant"
									],
									"query": [
										{
											"key": "session-id",
											"value": "{{sessionTokenWI}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Sign",
					"item": [
						{
							"name": "Get sign",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json; charset=utf-8"
									}
								],
								"url": {
									"raw": "https://{{host1}}/api/ipro/client/sign?sg-code=265&session-id={{sessionTokenWI}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"client",
										"sign"
									],
									"query": [
										{
											"key": "sg-code",
											"value": "265"
										},
										{
											"key": "session-id",
											"value": "{{sessionTokenWI}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Post sign",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json; charset=utf-8"
									}
								],
								"url": {
									"raw": "https://{{host1}}/api/ipro/client/sign?sg-code=265&session-id={{sessionTokenWI}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"client",
										"sign"
									],
									"query": [
										{
											"key": "sg-code",
											"value": "265"
										},
										{
											"key": "session-id",
											"value": "{{sessionTokenWI}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Put sign",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json; charset=utf-8"
									}
								],
								"url": {
									"raw": "https://{{host1}}/api/ipro/client/sign?signRowid={{signRowid}}&session-id={{sessionTokenWI}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"client",
										"sign"
									],
									"query": [
										{
											"key": "signRowid",
											"value": "{{signRowid}}"
										},
										{
											"key": "session-id",
											"value": "{{sessionTokenWI}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete sign",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "accept",
										"value": "application/json; charset=utf-8"
									}
								],
								"url": {
									"raw": "https://{{host1}}/api/ipro/client/sign?signRowid={{signRowid}}&session-id={{sessionTokenWI}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"client",
										"sign"
									],
									"query": [
										{
											"key": "signRowid",
											"value": "{{signRowid}}"
										},
										{
											"key": "session-id",
											"value": "{{sessionTokenWI}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Rating",
					"item": [
						{
							"name": "Post rating",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/client/rating?clr_objtype=r-goods&clr_object=9766879&clr_rating=5&session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"client",
										"rating"
									],
									"query": [
										{
											"key": "clr_objtype",
											"value": "r-goods"
										},
										{
											"key": "clr_object",
											"value": "9766879"
										},
										{
											"key": "clr_rating",
											"value": "5"
										},
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get rating",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json; charset=utf-8"
									}
								],
								"url": {
									"raw": "https://{{host1}}/api/ipro/client/ratinglist?clr_objtype=r-goods&clr_object=9766879&session-id={{sessionTokenWI}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"client",
										"ratinglist"
									],
									"query": [
										{
											"key": "clr_objtype",
											"value": "r-goods"
										},
										{
											"key": "clr_object",
											"value": "9766879"
										},
										{
											"key": "session-id",
											"value": "{{sessionTokenWI}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Doc upload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json; charset=utf-8"
							}
						],
						"url": {
							"raw": "https://{{host1}}/api/ipro/client/docUpload?session-id={{sessionTokenWI}}",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"client",
								"docUpload"
							],
							"query": [
								{
									"key": "session-id",
									"value": "{{sessionTokenWI}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host1",
			"value": "idev.etm.ru"
		},
		{
			"key": "sessionToken",
			"value": ""
		},
		{
			"key": "docName",
			"value": ""
		},
		{
			"key": "file_name",
			"value": ""
		},
		{
			"key": "id_cdek",
			"value": ""
		},
		{
			"key": "pay_doc1",
			"value": ""
		},
		{
			"key": "doc_369",
			"value": ""
		},
		{
			"key": "currentDate",
			"value": ""
		},
		{
			"key": "today",
			"value": ""
		},
		{
			"key": "month",
			"value": "3"
		},
		{
			"key": "qpoint",
			"value": "1-7384689153"
		},
		{
			"key": "min_date",
			"value": ""
		},
		{
			"key": "inv_id",
			"value": ""
		},
		{
			"key": "id_deliv",
			"value": ""
		},
		{
			"key": "pay_docdeliv",
			"value": ""
		},
		{
			"key": "gds",
			"value": "9091760-0-0"
		},
		{
			"key": "doc_369_pay_card",
			"value": ""
		},
		{
			"key": "pay_doc1_pay_card",
			"value": ""
		},
		{
			"key": "doc_369_pay_card1",
			"value": ""
		},
		{
			"key": "pay_doc1_pay_card1",
			"value": ""
		},
		{
			"key": "pay_doc1_amper",
			"value": ""
		},
		{
			"key": "id_cdek1",
			"value": ""
		},
		{
			"key": "pay_doc2",
			"value": ""
		},
		{
			"key": "doc_369_cdek",
			"value": ""
		},
		{
			"key": "id_cdek3",
			"value": ""
		},
		{
			"key": "pay_doc3",
			"value": ""
		},
		{
			"key": "doc_369_cdek1",
			"value": ""
		},
		{
			"key": "min_date1",
			"value": ""
		},
		{
			"key": "pay_doc4",
			"value": ""
		},
		{
			"key": "doc_369_deli",
			"value": ""
		},
		{
			"key": "docNameEst",
			"value": ""
		},
		{
			"key": "docNameForUnite",
			"value": ""
		},
		{
			"key": "id_est",
			"value": ""
		},
		{
			"key": "id_estForUnite",
			"value": ""
		},
		{
			"key": "signRowid",
			"value": ""
		},
		{
			"key": "lines",
			"value": "%7B%22lines%22%3A%5B%7B%22id%22%3A%221-37477810572%22%2C%22linenum%22%3A%221%22%2C%22gdscode%22%3A%229669861%22%2C%22gdsname%22%3A%22%D0%9A%D0%B0%D0%B1%D0%B5%D0%BB%D1%8C%2B%D1%81%D0%B8%D0%BB%D0%BE%D0%B2%D0%BE%D0%B9%2BNYM-J%2B3x2%2C5-0%2C66%22%2C%22cnt%22%3A6%2C%22price%22%3A%22130%22%2C%22itemtype%22%3A%22%22%2C%22customerprc%22%3A%22780%22%2C%22customerdiscount%22%3A%220%22%2C%22sectionname%22%3A%22%D0%91%D0%B5%D0%B7%2B%D0%BD%D0%B0%D0%B7%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F%22%2C%22sectionnum%22%3A%220%22%2C%22subsectionname%22%3A%22%22%2C%22subsectionnum%22%3A%22%22%2C%22sectionid%22%3A%22section_zero%22%7D%2C%7B%22id%22%3A%221-37477810573%22%2C%22linenum%22%3A%222%22%2C%22gdscode%22%3A%229347755%22%2C%22gdsname%22%3A%22%D0%9A%D0%B0%D0%B1%D0%B5%D0%BB%D1%8C%2B%D1%81%D0%B8%D0%BB%D0%BE%D0%B2%D0%BE%D0%B9%2B%D0%92%D0%92%D0%93-%D0%9F%D0%BD%D0%B3%2B(%D0%90)-LS%2B3%D1%851.5%2B%D0%A2%D0%A0%D0%A2%D0%A1%2B(100%D0%BC)%22%2C%22cnt%22%3A4%2C%22price%22%3A%2264.5%22%2C%22itemtype%22%3A%22%22%2C%22customerprc%22%3A%22258%22%2C%22customerdiscount%22%3A%220%22%2C%22sectionname%22%3A%22%D0%91%D0%B5%D0%B7%2B%D0%BD%D0%B0%D0%B7%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F%22%2C%22sectionnum%22%3A%220%22%2C%22subsectionname%22%3A%22%22%2C%22subsectionnum%22%3A%22%22%2C%22sectionid%22%3A%22section_zero%22%7D%5D%7D"
		},
		{
			"key": "data",
			"value": "%7B%22data%22%3A%7B%22customer%22%3A%22%D0%94%D0%B5%D0%B3%D1%82%D1%8F%D1%80%D1%91%D0%B2%2B%D0%9D%D0%92%22%2C%22exw_ps%22%3A%22%D0%94%D0%B8%D1%80%D0%B5%D0%BA%D1%82%D0%BE%D1%80%22%2C%22exm_nameFIO%22%3A%22%D0%9A%D1%80%D0%B0%D1%81%D0%B8%D0%BA%D0%BE%D0%B2%2B%D0%90%D0%9B%22%7D%7D"
		},
		{
			"key": "codeObj",
			"value": ""
		},
		{
			"key": "present",
			"value": ""
		},
		{
			"key": "now",
			"value": ""
		},
		{
			"key": "current",
			"value": ""
		},
		{
			"key": "new_params",
			"value": "1"
		},
		{
			"key": "PARAM",
			"value": "2"
		},
		{
			"key": "master",
			"value": "",
			"type": "string"
		},
		{
			"key": "id doc",
			"value": "",
			"type": "string"
		}
	]
}