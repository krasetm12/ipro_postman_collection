{
	"info": {
		"_postman_id": "a6257ab8-c2a8-4537-a13e-2a0e49281cc3",
		"name": "ipro3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33400242",
		"_collection_link": "https://warped-crescent-784998.postman.co/workspace/335a6d73-ec43-485b-8ceb-df6b301c8007/collection/33400242-a6257ab8-c2a8-4537-a13e-2a0e49281cc3?action=share&source=collection_link&creator=33400242"
	},
	"item": [
		{
			"name": "basket",
			"item": [
				{
					"name": "login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Session management using session tokens\r",
									"pm.collectionVariables.get(\"variable_key\");\r",
									"var sessionToken;\r",
									"pm.test(\"Login and session management\", function () {\r",
									"    // Perform login and extract session token from the response\r",
									"    sessionToken = pm.response.json().data.session;\r",
									"    pm.collectionVariables.set(\"sessionToken\", sessionToken);\r",
									"});\r",
									"console.log(sessionToken);\r",
									"\r",
									"// asfas?\r",
									"// check"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "log",
									"value": "60004392kal",
									"type": "text"
								},
								{
									"key": "pwd",
									"value": "qakras123",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{host1}}/api/ipro/user/login",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "session",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check session\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/user/session/get?session-id={{sessionToken}}",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"user",
								"session",
								"get"
							],
							"query": [
								{
									"key": "session-id",
									"value": "{{sessionToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "infocity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check infocity\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/info/city?session-id={{sessionToken}}",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"info",
								"city"
							],
							"query": [
								{
									"key": "session-id",
									"value": "{{sessionToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "class810",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check class810\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/info/class/810?len=3",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"info",
								"class",
								"810"
							],
							"query": [
								{
									"key": "len",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check profile\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/user/profile?session-id={{sessionToken}}",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"user",
								"profile"
							],
							"query": [
								{
									"key": "session-id",
									"value": "{{sessionToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "sumbasket",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check sumbasket\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/basket/sum?session-id={{sessionToken}}",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"basket",
								"sum"
							],
							"query": [
								{
									"key": "session-id",
									"value": "{{sessionToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "alert-count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check alertcount\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/user/alert/count?session-id={{sessionToken}}",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"user",
								"alert",
								"count"
							],
							"query": [
								{
									"key": "session-id",
									"value": "{{sessionToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "infocitycode",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check infocitycode\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/info/city/78?{{sessionToken}}",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"info",
								"city",
								"78"
							],
							"query": [
								{
									"key": "{{sessionToken}}",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "bonusinfo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check bonusinfo\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/bonus/info?session-id={{sessionToken}}",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"bonus",
								"info"
							],
							"query": [
								{
									"key": "session-id",
									"value": "{{sessionToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "infostores",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check infostores\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/info/stores?session-id={{sessionToken}}&class17=%D0%A1%D0%97%D0%A1%D0%9F%D0%91",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"info",
								"stores"
							],
							"query": [
								{
									"key": "session-id",
									"value": "{{sessionToken}}"
								},
								{
									"key": "class17",
									"value": "%D0%A1%D0%97%D0%A1%D0%9F%D0%91"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "consignee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check sign- consignee\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/client/sign?sg-code=171&session-id={{sessionToken}}",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"client",
								"sign"
							],
							"query": [
								{
									"key": "sg-code",
									"value": "171"
								},
								{
									"key": "session-id",
									"value": "{{sessionToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "client-banks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check infostores\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/client/banks?session-id={{sessionToken}}",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"client",
								"banks"
							],
							"query": [
								{
									"key": "session-id",
									"value": "{{sessionToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog-val",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check catalog-val\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 1500ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/catalog?val=%D0%B0%D0%BD%D0%BA%D0%B5%D1%80",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"catalog"
							],
							"query": [
								{
									"key": "val",
									"value": "%D0%B0%D0%BD%D0%BA%D0%B5%D1%80"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog-subcat_brands",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check subcat_brands\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/catalog/subcat_brands?val=%D0%B0%D0%BD%D0%BA%D0%B5%D1%80",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"catalog",
								"subcat_brands"
							],
							"query": [
								{
									"key": "val",
									"value": "%D0%B0%D0%BD%D0%BA%D0%B5%D1%80"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "basket-add",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check basket_add\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 2000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "session-id",
									"value": "{{sessionToken}}",
									"type": "text"
								},
								{
									"key": "city",
									"value": "78",
									"type": "text"
								},
								{
									"key": "gds",
									"value": "9091760-0-0",
									"type": "text"
								},
								{
									"key": "val",
									"value": "1",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{host1}}/api/ipro/basket/add",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"basket",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "basket-skl",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check basket\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/basket?skl=&session-id={{sessionToken}}",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"basket"
							],
							"query": [
								{
									"key": "skl",
									"value": ""
								},
								{
									"key": "session-id",
									"value": "{{sessionToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "basket-order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check basket-order\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/basket/order?skl=&goods=&session-id={{sessionToken}}",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"basket",
								"order"
							],
							"query": [
								{
									"key": "skl",
									"value": ""
								},
								{
									"key": "goods",
									"value": ""
								},
								{
									"key": "session-id",
									"value": "{{sessionToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "client/table/warehouse",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check client/table/warehouse\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/client/table/warehouse?rows=1000&cli-code=60004392&session-id={{sessionToken}}&sidx=clt_desc&sord=asc",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"client",
								"table",
								"warehouse"
							],
							"query": [
								{
									"key": "rows",
									"value": "1000"
								},
								{
									"key": "cli-code",
									"value": "60004392"
								},
								{
									"key": "session-id",
									"value": "{{sessionToken}}"
								},
								{
									"key": "sidx",
									"value": "clt_desc"
								},
								{
									"key": "sord",
									"value": "asc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "client/table/division",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check client/table/division\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/client/table/division?rows=1000&cli-code=60004392&session-id={{sessionToken}}&sidx=clt_desc&sord=asc",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"client",
								"table",
								"division"
							],
							"query": [
								{
									"key": "rows",
									"value": "1000"
								},
								{
									"key": "cli-code",
									"value": "60004392"
								},
								{
									"key": "session-id",
									"value": "{{sessionToken}}"
								},
								{
									"key": "sidx",
									"value": "clt_desc"
								},
								{
									"key": "sord",
									"value": "asc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "client/table/order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check client/table/order\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/client/table/order?rows=1000&cli-code=60004392&session-id={{sessionToken}}&sidx=clt_desc&sord=asc",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"client",
								"table",
								"order"
							],
							"query": [
								{
									"key": "rows",
									"value": "1000"
								},
								{
									"key": "cli-code",
									"value": "60004392"
								},
								{
									"key": "session-id",
									"value": "{{sessionToken}}"
								},
								{
									"key": "sidx",
									"value": "clt_desc"
								},
								{
									"key": "sord",
									"value": "asc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "goods/9091760/remains",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check goods/9091760/remains\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/goods/9091760/remains?session-id={{sessionToken}}",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"goods",
								"9091760",
								"remains"
							],
							"query": [
								{
									"key": "session-id",
									"value": "{{sessionToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "goods/9091760/packs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check goods/9091760/packs\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/goods/9091760/packs?skl=&session-id={{sessionToken}}",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"goods",
								"9091760",
								"packs"
							],
							"query": [
								{
									"key": "skl",
									"value": ""
								},
								{
									"key": "session-id",
									"value": "{{sessionToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "goods/9091760/prices",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check goods/9091760/prices\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/goods/9091760/prices?session-id={{sessionToken}}",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"goods",
								"9091760",
								"prices"
							],
							"query": [
								{
									"key": "session-id",
									"value": "{{sessionToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "basket/specification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check basket/specification\r",
									"var docName;\r",
									"pm.test(\"create specification\", function () {\r",
									"    // Perform login and extract session token from the response\r",
									"    docName = pm.response.json().data.docName;\r",
									"    pm.collectionVariables.set(\"docName\", docName);\r",
									"});\r",
									"console.log(docName);\r",
									"\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 2000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/basket/specification?tovzak=&i_dogovor=000120230525093554&i_accnt=&skl=4120&i_gruz=&reqDisc=&pr_object=&session-id={{sessionToken}}",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"basket",
								"specification"
							],
							"query": [
								{
									"key": "tovzak",
									"value": ""
								},
								{
									"key": "i_dogovor",
									"value": "000120230525093554"
								},
								{
									"key": "i_accnt",
									"value": ""
								},
								{
									"key": "skl",
									"value": "4120"
								},
								{
									"key": "i_gruz",
									"value": ""
								},
								{
									"key": "reqDisc",
									"value": ""
								},
								{
									"key": "pr_object",
									"value": ""
								},
								{
									"key": "session-id",
									"value": "{{sessionToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "upload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//upload\r",
									"var file_name;\r",
									"pm.test(\"create specification spec price\", function () {\r",
									"// Perform file_name and extract file_name from the response\r",
									"    file_name = pm.response.json().file_name;\r",
									"    pm.collectionVariables.set(\"file_name\", file_name);\r",
									"});\r",
									"console.log(file_name);\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 2000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "num",
									"value": "{{$randomInt}}",
									"type": "text"
								},
								{
									"key": "rc",
									"value": "competitor",
									"type": "text"
								},
								{
									"key": "fileToUpload",
									"type": "file",
									"src": "postman-cloud:///1eed612c-bfc7-47a0-9a0d-2b4d95fe5b42"
								},
								{
									"key": "session-id",
									"value": "{{sessionToken}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{host1}}/api/ipro/file/upload",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"file",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "basket-add-spec_price",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check basket_add\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 2000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "session-id",
									"value": "{{sessionToken}}",
									"type": "text"
								},
								{
									"key": "city",
									"value": "78",
									"type": "text"
								},
								{
									"key": "gds",
									"value": "9091760-0-0",
									"type": "text"
								},
								{
									"key": "val",
									"value": "1",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{host1}}/api/ipro/basket/add",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"basket",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "basket/specification-spec_price",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check basket/specification-spec_price\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 2000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/basket/specification?tovzak=&i_dogovor=000120230525093554&i_accnt=&skl=4120&i_gruz=&reqDisc=comp&pr_object=&session-id={{sessionToken}}&compPrice=compPrice3=1&compCode=1130339&file={{file_name}}",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"basket",
								"specification"
							],
							"query": [
								{
									"key": "tovzak",
									"value": ""
								},
								{
									"key": "i_dogovor",
									"value": "000120230525093554"
								},
								{
									"key": "i_accnt",
									"value": ""
								},
								{
									"key": "skl",
									"value": "4120"
								},
								{
									"key": "i_gruz",
									"value": ""
								},
								{
									"key": "reqDisc",
									"value": "comp"
								},
								{
									"key": "pr_object",
									"value": ""
								},
								{
									"key": "session-id",
									"value": "{{sessionToken}}"
								},
								{
									"key": "compPrice",
									"value": "compPrice3=1"
								},
								{
									"key": "compCode",
									"value": "1130339"
								},
								{
									"key": "file",
									"value": "{{file_name}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "pickup-payment",
			"item": [
				{
					"name": "bill",
					"item": [
						{
							"name": "OP",
							"item": [
								{
									"name": "basket-add-check-orderOP",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//check basket_add\r",
													"pm.test('valid response format json', function () {\r",
													"    pm.response.to.have.jsonBody();\r",
													"});\r",
													"\r",
													"pm.test(\"status code 200 in body of json\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status.code).to.equal(200);\r",
													"});\r",
													"pm.test('Response is valid JSON', function () {\r",
													"    pm.expect(pm.response.json()).to.be.an('object');\r",
													"});\r",
													"pm.test('Response time is less than 2000ms', function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "session-id",
													"value": "{{sessionToken}}",
													"type": "text"
												},
												{
													"key": "city",
													"value": "78",
													"type": "text"
												},
												{
													"key": "gds",
													"value": "{{gds}}",
													"type": "text"
												},
												{
													"key": "val",
													"value": "1",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://{{host1}}/api/ipro/basket/add",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"basket",
												"add"
											]
										}
									},
									"response": []
								},
								{
									"name": "basket/order-pickupOP-bill",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//check basket/order-pickupOP\r",
													"pm.test('valid response format json', function () {\r",
													"    pm.response.to.have.jsonBody();\r",
													"});\r",
													"\r",
													"pm.test(\"status code 200 in body of json\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status.code).to.equal(200);\r",
													"});\r",
													"pm.test('Response is valid JSON', function () {\r",
													"    pm.expect(pm.response.json()).to.be.an('object');\r",
													"});\r",
													"pm.test('Response time is less than 1000ms', function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "session-id",
												"value": "{{sessionToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://{{host1}}/api/ipro/basket/order?skl=100&i_dogovor=000120230525093554&pay-type=bill&s_rnd=r1&qdeliv_method=separate_line",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"basket",
												"order"
											],
											"query": [
												{
													"key": "skl",
													"value": "100"
												},
												{
													"key": "i_dogovor",
													"value": "000120230525093554"
												},
												{
													"key": "pay-type",
													"value": "bill"
												},
												{
													"key": "s_rnd",
													"value": "r1"
												},
												{
													"key": "qdeliv_method",
													"value": "separate_line"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "LC",
							"item": [
								{
									"name": "basket-add-check-order -LC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//check basket_add-LC\r",
													"pm.test('valid response format json', function () {\r",
													"    pm.response.to.have.jsonBody();\r",
													"});\r",
													"\r",
													"pm.test(\"status code 200 in body of json\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status.code).to.equal(200);\r",
													"});\r",
													"pm.test('Response is valid JSON', function () {\r",
													"    pm.expect(pm.response.json()).to.be.an('object');\r",
													"});\r",
													"pm.test('Response time is less than 2000ms', function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "session-id",
													"value": "{{sessionToken}}",
													"type": "text"
												},
												{
													"key": "city",
													"value": "78",
													"type": "text"
												},
												{
													"key": "gds",
													"value": "{{gds}}",
													"type": "text"
												},
												{
													"key": "val",
													"value": "1",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://{{host1}}/api/ipro/basket/add",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"basket",
												"add"
											]
										}
									},
									"response": []
								},
								{
									"name": "basket/order-pickupLC-bill",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//check basket/order-pickupLC\r",
													"pm.test('valid response format json', function () {\r",
													"    pm.response.to.have.jsonBody();\r",
													"});\r",
													"\r",
													"pm.test(\"status code 200 in body of json\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status.code).to.equal(200);\r",
													"});\r",
													"pm.test('Response is valid JSON', function () {\r",
													"    pm.expect(pm.response.json()).to.be.an('object');\r",
													"});\r",
													"pm.test('Response time is less than 1000ms', function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "session-id",
												"value": "{{sessionToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://{{host1}}/api/ipro/basket/order?skl=4280&i_dogovor=000120230525093554&pay-type=bill&s_rnd=r1&qdeliv_method=separate_line",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"basket",
												"order"
											],
											"query": [
												{
													"key": "skl",
													"value": "4280"
												},
												{
													"key": "i_dogovor",
													"value": "000120230525093554"
												},
												{
													"key": "pay-type",
													"value": "bill"
												},
												{
													"key": "s_rnd",
													"value": "r1"
												},
												{
													"key": "qdeliv_method",
													"value": "separate_line"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "pay_card",
					"item": [
						{
							"name": "basket-add-check-order -LC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check basket_add-LC\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 2000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "session-id",
											"value": "{{sessionToken}}",
											"type": "text"
										},
										{
											"key": "city",
											"value": "78",
											"type": "text"
										},
										{
											"key": "gds",
											"value": "{{gds}}",
											"type": "text"
										},
										{
											"key": "val",
											"value": "1",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{host1}}/api/ipro/basket/add",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"basket",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "basket/order-pickupLC-pay-card",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check basket/order-pickupLC-pay-card\r",
											"var doc_369_pay_card;\r",
											"pm.test(\"create order cdek doc369\", function () {\r",
											"// Perform pay_doc_369 and extract doc_369 from the response\r",
											"    doc_369_pay_card=pm.response.json().data.doc_369;\r",
											"    pm.collectionVariables.set(\"doc_369_pay_card\", doc_369_pay_card);\r",
											"});\r",
											"var pay_doc1_pay_card;\r",
											"pm.test(\"create order cdek doc\", function () {\r",
											"// Perform pay_doc1 and extract pay_doc1 from the response\r",
											"    pay_doc1_pay_card=pm.response.json().data.pay_doc1;\r",
											"    pm.collectionVariables.set(\"pay_doc1_pay_card\", pay_doc1_pay_card);\r",
											"});\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "session-id",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{host1}}/api/ipro/basket/order?skl=4280&i_dogovor=000120230525093554&pay-type=card_now&s_rnd=r1&qdeliv_method=separate_line",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"basket",
										"order"
									],
									"query": [
										{
											"key": "skl",
											"value": "4280"
										},
										{
											"key": "i_dogovor",
											"value": "000120230525093554"
										},
										{
											"key": "pay-type",
											"value": "card_now"
										},
										{
											"key": "s_rnd",
											"value": "r1"
										},
										{
											"key": "qdeliv_method",
											"value": "separate_line"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "invoice/pay_doc1/pay_card",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//invoice/pay_doc1/pay_card\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/invoice/{{pay_doc1_pay_card}}/pay_card?type=ipro&returnUrl=https%3A%2F%2Fidev.etm.ru%2Fipro3%2Fpayment%2Fsuccess%2F&failUrl=https%3A%2F%2Fidev.etm.ru%2Fipro3%2Fpayment%2Ffail%2F&doc_369={{doc_369_pay_card}}&amount=45.00&session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"invoice",
										"{{pay_doc1_pay_card}}",
										"pay_card"
									],
									"query": [
										{
											"key": "type",
											"value": "ipro"
										},
										{
											"key": "returnUrl",
											"value": "https%3A%2F%2Fidev.etm.ru%2Fipro3%2Fpayment%2Fsuccess%2F"
										},
										{
											"key": "failUrl",
											"value": "https%3A%2F%2Fidev.etm.ru%2Fipro3%2Fpayment%2Ffail%2F"
										},
										{
											"key": "doc_369",
											"value": "{{doc_369_pay_card}}"
										},
										{
											"key": "amount",
											"value": "45.00"
										},
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "invoice/pay_doc1_pay_card/pay_card_check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//invoice/pay_doc1/pay_card\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "session-id",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{host1}}/api/ipro/invoice/{{pay_doc1_pay_card}}/pay_card_check",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"invoice",
										"{{pay_doc1_pay_card}}",
										"pay_card_check"
									]
								}
							},
							"response": []
						},
						{
							"name": "invoice/iddoc-payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check paymentorder by card \r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"pm.test(\"status code 200 in body of json\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.invStatusPay).to.equal(\"оплачен\");\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/invoice/{{pay_doc1_pay_card}}?session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"invoice",
										"{{pay_doc1_pay_card}}"
									],
									"query": [
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "qr-code",
					"item": [
						{
							"name": "LC",
							"item": [
								{
									"name": "basket-add-check-order -LC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//check basket_add-LC\r",
													"pm.test('valid response format json', function () {\r",
													"    pm.response.to.have.jsonBody();\r",
													"});\r",
													"\r",
													"pm.test(\"status code 200 in body of json\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status.code).to.equal(200);\r",
													"});\r",
													"pm.test('Response is valid JSON', function () {\r",
													"    pm.expect(pm.response.json()).to.be.an('object');\r",
													"});\r",
													"pm.test('Response time is less than 2000ms', function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "session-id",
													"value": "{{sessionToken}}",
													"type": "text"
												},
												{
													"key": "city",
													"value": "78",
													"type": "text"
												},
												{
													"key": "gds",
													"value": "{{gds}}",
													"type": "text"
												},
												{
													"key": "val",
													"value": "1",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://{{host1}}/api/ipro/basket/add",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"basket",
												"add"
											]
										}
									},
									"response": []
								},
								{
									"name": "basket/order-pickupLC-pay-card",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//check basket/order-pickupLC-pay-card\r",
													"var doc_369_pay_card1;\r",
													"pm.test(\"create order cdek doc369\", function () {\r",
													"// Perform pay_doc_369 and extract doc_369 from the response\r",
													"    doc_369_pay_card1=pm.response.json().data.doc_369;\r",
													"    pm.collectionVariables.set(\"doc_369_pay_card1\", doc_369_pay_card1);\r",
													"});\r",
													"var pay_doc1_pay_card1;\r",
													"pm.test(\"create order cdek doc\", function () {\r",
													"// Perform pay_doc1 and extract pay_doc1 from the response\r",
													"    pay_doc1_pay_card1=pm.response.json().data.pay_doc1;\r",
													"    pm.collectionVariables.set(\"pay_doc1_pay_card1\", pay_doc1_pay_card1);\r",
													"});\r",
													"pm.test('valid response format json', function () {\r",
													"    pm.response.to.have.jsonBody();\r",
													"});\r",
													"\r",
													"pm.test(\"status code 200 in body of json\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status.code).to.equal(200);\r",
													"});\r",
													"pm.test('Response is valid JSON', function () {\r",
													"    pm.expect(pm.response.json()).to.be.an('object');\r",
													"});\r",
													"pm.test('Response time is less than 1000ms', function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "session-id",
												"value": "{{sessionToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://{{host1}}/api/ipro/basket/order?skl=4280&i_dogovor=000120230525093554&pay-type=sbp&s_rnd=r1&qdeliv_method=separate_line",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"basket",
												"order"
											],
											"query": [
												{
													"key": "skl",
													"value": "4280"
												},
												{
													"key": "i_dogovor",
													"value": "000120230525093554"
												},
												{
													"key": "pay-type",
													"value": "sbp"
												},
												{
													"key": "s_rnd",
													"value": "r1"
												},
												{
													"key": "qdeliv_method",
													"value": "separate_line"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "invoice/pay_doc1/pay_card",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//invoice/pay_doc1/pay_card\r",
													"pm.test('valid response format json', function () {\r",
													"    pm.response.to.have.jsonBody();\r",
													"});\r",
													"\r",
													"pm.test(\"status code 200 in body of json\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status.code).to.equal(200);\r",
													"});\r",
													"pm.test('Response is valid JSON', function () {\r",
													"    pm.expect(pm.response.json()).to.be.an('object');\r",
													"});\r",
													"pm.test('Response time is less than 1000ms', function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{host1}}/api/ipro/invoice/{{pay_doc1_pay_card1}}/pay_card?type=sbp_ipro&returnUrl=https%3A%2F%2Fidev.etm.ru%2Fipro3%2Fpayment%2Fsuccess%2F&failUrl=https%3A%2F%2Fidev.etm.ru%2Fipro3%2Fpayment%2Ffail%2F&doc_369={{doc_369_pay_card1}}&amount=45.00&session-id={{sessionToken}}",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"invoice",
												"{{pay_doc1_pay_card1}}",
												"pay_card"
											],
											"query": [
												{
													"key": "type",
													"value": "sbp_ipro"
												},
												{
													"key": "returnUrl",
													"value": "https%3A%2F%2Fidev.etm.ru%2Fipro3%2Fpayment%2Fsuccess%2F"
												},
												{
													"key": "failUrl",
													"value": "https%3A%2F%2Fidev.etm.ru%2Fipro3%2Fpayment%2Ffail%2F"
												},
												{
													"key": "doc_369",
													"value": "{{doc_369_pay_card1}}"
												},
												{
													"key": "amount",
													"value": "45.00"
												},
												{
													"key": "session-id",
													"value": "{{sessionToken}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "invoice/pay_doc1_pay_card/pay_card_check",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//invoice/pay_doc1/pay_card\r",
													"pm.test('valid response format json', function () {\r",
													"    pm.response.to.have.jsonBody();\r",
													"});\r",
													"\r",
													"pm.test(\"status code 200 in body of json\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status.code).to.equal(200);\r",
													"});\r",
													"pm.test('Response is valid JSON', function () {\r",
													"    pm.expect(pm.response.json()).to.be.an('object');\r",
													"});\r",
													"pm.test('Response time is less than 1000ms', function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "session-id",
												"value": "{{sessionToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://{{host1}}/api/ipro/invoice/{{pay_doc1_pay_card1}}/pay_card_check",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"invoice",
												"{{pay_doc1_pay_card1}}",
												"pay_card_check"
											]
										}
									},
									"response": []
								},
								{
									"name": "invoice/iddoc-payment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//check paymentorder by card \r",
													"pm.test('valid response format json', function () {\r",
													"    pm.response.to.have.jsonBody();\r",
													"});\r",
													"pm.test(\"status code 200 in body of json\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.invStatusPay).to.equal(\"оплачен\");\r",
													"});\r",
													"pm.test('Response is valid JSON', function () {\r",
													"    pm.expect(pm.response.json()).to.be.an('object');\r",
													"});\r",
													"pm.test('Response time is less than 1000ms', function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{host1}}/api/ipro/invoice/{{pay_doc1_pay_card1}}?session-id={{sessionToken}}",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"invoice",
												"{{pay_doc1_pay_card1}}"
											],
											"query": [
												{
													"key": "session-id",
													"value": "{{sessionToken}}"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "ampers",
					"item": [
						{
							"name": "LC",
							"item": [
								{
									"name": "basket-add-check-order -LC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//check basket_add-LC\r",
													"pm.test('valid response format json', function () {\r",
													"    pm.response.to.have.jsonBody();\r",
													"});\r",
													"\r",
													"pm.test(\"status code 200 in body of json\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status.code).to.equal(200);\r",
													"});\r",
													"pm.test('Response is valid JSON', function () {\r",
													"    pm.expect(pm.response.json()).to.be.an('object');\r",
													"});\r",
													"pm.test('Response time is less than 2000ms', function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "session-id",
													"value": "{{sessionToken}}",
													"type": "text"
												},
												{
													"key": "city",
													"value": "78",
													"type": "text"
												},
												{
													"key": "gds",
													"value": "{{gds}}",
													"type": "text"
												},
												{
													"key": "val",
													"value": "1",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://{{host1}}/api/ipro/basket/add",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"basket",
												"add"
											]
										}
									},
									"response": []
								},
								{
									"name": "basket/order-pickupLC-bill",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//check basket/order-pickupLC\r",
													"var pay_doc1_amper;\r",
													"pm.test(\"create order cdek doc\", function () {\r",
													"// Perform pay_doc1 and extract pay_doc1 from the response\r",
													"    pay_doc1_amper=pm.response.json().data.pay_doc1;\r",
													"    pm.collectionVariables.set(\"pay_doc1_amper\", pay_doc1_amper);\r",
													"});\r",
													"pm.test('valid response format json', function () {\r",
													"    pm.response.to.have.jsonBody();\r",
													"});\r",
													"\r",
													"pm.test(\"status code 200 in body of json\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status.code).to.equal(200);\r",
													"});\r",
													"pm.test('Response is valid JSON', function () {\r",
													"    pm.expect(pm.response.json()).to.be.an('object');\r",
													"});\r",
													"pm.test('Response time is less than 1000ms', function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "session-id",
												"value": "{{sessionToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://{{host1}}/api/ipro/basket/order?skl=4280&i_dogovor=000120230525093554&pay-type=bill&s_rnd=r1&qdeliv_method=separate_line",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"basket",
												"order"
											],
											"query": [
												{
													"key": "skl",
													"value": "4280"
												},
												{
													"key": "i_dogovor",
													"value": "000120230525093554"
												},
												{
													"key": "pay-type",
													"value": "bill"
												},
												{
													"key": "s_rnd",
													"value": "r1"
												},
												{
													"key": "qdeliv_method",
													"value": "separate_line"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "invoice/pay_doc1/pay_amper",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//check basket/order-pickupLC-pay ampers\r",
													"pm.test('valid response format json', function () {\r",
													"    pm.response.to.have.jsonBody();\r",
													"});\r",
													"\r",
													"pm.test(\"status code 200 in body of json\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status.code).to.equal(200);\r",
													"});\r",
													"pm.test('Response is valid JSON', function () {\r",
													"    pm.expect(pm.response.json()).to.be.an('object');\r",
													"});\r",
													"pm.test('Response time is less than 1000ms', function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "https://{{host1}}/api/ipro/invoice/{{pay_doc1_amper}}/pay_amper?to_pay=1&session-id={{sessionToken}}",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"invoice",
												"{{pay_doc1_amper}}",
												"pay_amper"
											],
											"query": [
												{
													"key": "to_pay",
													"value": "1"
												},
												{
													"key": "session-id",
													"value": "{{sessionToken}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "bonus/info",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//check bonus info\r",
													"pm.test('valid response format json', function () {\r",
													"    pm.response.to.have.jsonBody();\r",
													"});\r",
													"\r",
													"pm.test(\"status code 200 in body of json\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status.code).to.equal(200);\r",
													"});\r",
													"pm.test('Response is valid JSON', function () {\r",
													"    pm.expect(pm.response.json()).to.be.an('object');\r",
													"});\r",
													"pm.test('Response time is less than 1000ms', function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{host1}}/api/ipro/bonus/info?session-id={{sessionToken}}",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"bonus",
												"info"
											],
											"query": [
												{
													"key": "session-id",
													"value": "{{sessionToken}}"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "invoice",
			"item": [
				{
					"name": "info/param/invoice_status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check info/param/invoice_status\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/info/param/invoice_status",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"info",
								"param",
								"invoice_status"
							]
						}
					},
					"response": []
				},
				{
					"name": "invoice_doc",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check invoice_doc\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/invoice?session-id={{sessionToken}}&page=1&rows=20&sidx=inv-date&sord=desc&usr-inv-num={{docName}}",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"invoice"
							],
							"query": [
								{
									"key": "session-id",
									"value": "{{sessionToken}}"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "rows",
									"value": "20"
								},
								{
									"key": "sidx",
									"value": "inv-date"
								},
								{
									"key": "sord",
									"value": "desc"
								},
								{
									"key": "usr-inv-num",
									"value": "{{docName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "info/object/60004392",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check info/object/60004392\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/info/object/60004392?session-id={{sessionToken}}",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"info",
								"object",
								"60004392"
							],
							"query": [
								{
									"key": "session-id",
									"value": "{{sessionToken}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "delivery",
			"item": [
				{
					"name": "delivery/point",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check delivery/point\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/delivery/point?sord=asc&sidx=address&page=1&rows=999&session-id={{sessionToken}}",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"delivery",
								"point"
							],
							"query": [
								{
									"key": "sord",
									"value": "asc"
								},
								{
									"key": "sidx",
									"value": "address"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "rows",
									"value": "999"
								},
								{
									"key": "session-id",
									"value": "{{sessionToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "delivery/partners",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check delivery/partners\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/delivery/partners?st=11&length=0.065&volume=0.000002&weight=0.01&sum=4.86&session-id={{sessionToken}}",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"delivery",
								"partners"
							],
							"query": [
								{
									"key": "st",
									"value": "11"
								},
								{
									"key": "length",
									"value": "0.065"
								},
								{
									"key": "volume",
									"value": "0.000002"
								},
								{
									"key": "weight",
									"value": "0.01"
								},
								{
									"key": "sum",
									"value": "4.86"
								},
								{
									"key": "session-id",
									"value": "{{sessionToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "info/search/co_table/deliv_method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check info/search/co_table/deliv_method\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/info/search/co_table/deliv_method?session-id={{sessionToken}}",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"info",
								"search",
								"co_table",
								"deliv_method"
							],
							"query": [
								{
									"key": "session-id",
									"value": "{{sessionToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "delivery/request/cdek",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check delivery/request/cdek\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/delivery/request/cdek?csurl=https://api.cdek.ru/v2/deliverypoints?region_code%3D82%26type%3DPVZ%26allowed_cod%3Dtrue%26weight_max%3D30%26is_handout%3D1&session-id={{sessionToken}}",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"delivery",
								"request",
								"cdek"
							],
							"query": [
								{
									"key": "csurl",
									"value": "https://api.cdek.ru/v2/deliverypoints?region_code%3D82%26type%3DPVZ%26allowed_cod%3Dtrue%26weight_max%3D30%26is_handout%3D1"
								},
								{
									"key": "session-id",
									"value": "{{sessionToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "delivery/request/cdek/regions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check delivery/request/cdek-regions\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/delivery/request/cdek?csurl=https://api.cdek.ru/v2/location/regions?country_codes%3DRU&session-id={{sessionToken}}",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"delivery",
								"request",
								"cdek"
							],
							"query": [
								{
									"key": "csurl",
									"value": "https://api.cdek.ru/v2/location/regions?country_codes%3DRU"
								},
								{
									"key": "session-id",
									"value": "{{sessionToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "delivery/request/cdek-point-tariffs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check delivery/request/cdek-point-tariffs\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"from_location\":{\"code\":\"137\"},\"to_location\":{\"code\":1289},\"packages\":[{\"weight\":10}],\"tariff_code\":136}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host1}}/api/ipro/delivery/request/cdek?csurl=https%3A%2F%2Fapi.cdek.ru%2Fv2%2Fcalculator%2Ftariff&session-id={{sessionToken}}",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"delivery",
								"request",
								"cdek"
							],
							"query": [
								{
									"key": "csurl",
									"value": "https%3A%2F%2Fapi.cdek.ru%2Fv2%2Fcalculator%2Ftariff"
								},
								{
									"key": "session-id",
									"value": "{{sessionToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "user/profile/warrant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check user/profile/warrant\r",
									"pm.test('valid response format json', function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"status code 200 in body of json\", function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status.code).to.equal(200);\r",
									"});\r",
									"pm.test('Response is valid JSON', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test('Response time is less than 1000ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{host1}}/api/ipro/user/profile/warrant?session-id={{sessionToken}}",
							"protocol": "https",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"user",
								"profile",
								"warrant"
							],
							"query": [
								{
									"key": "session-id",
									"value": "{{sessionToken}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "cdek-payment",
			"item": [
				{
					"name": "bill",
					"item": [
						{
							"name": "basket-add-check-order -cdek",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check basket_add-LC\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 2000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "session-id",
											"value": "{{sessionToken}}",
											"type": "text"
										},
										{
											"key": "city",
											"value": "78",
											"type": "text"
										},
										{
											"key": "gds",
											"value": "{{gds}}",
											"type": "text"
										},
										{
											"key": "val",
											"value": "1",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{host1}}/api/ipro/basket/add",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"basket",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "delivery/point/create-cdek",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check delivery/point/create-cdek\r",
											"var id_cdek;\r",
											"pm.test(\"create specification spec price\", function () {\r",
											"// Perform id_cdek and extract id_cdek from the response\r",
											"    id_cdek = pm.response.json().data.id;\r",
											"    pm.collectionVariables.set(\"id_cdek\", id_cdek);\r",
											"});\r",
											"console.log(id_cdek);\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 400 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(400);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/delivery/point/create?st=11&cls17=%D0%A1%D0%97%D0%A1%D0%9F%D0%91&t-type=0&t-code=cdekSST4&t-name=%D0%9D%D0%B0%20%D0%9F%D1%80%D0%B8%D0%BC%D0%BE%D1%80%D1%81%D0%BA%D0%BE%D0%BC%20%D1%88%D0%BE%D1%81%D1%81%D0%B5%20350&t-adr=197706%2C%20%D0%A0%D0%BE%D1%81%D1%81%D0%B8%D1%8F%2C%20%D0%A1%D0%B0%D0%BD%D0%BA%D1%82-%D0%9F%D0%B5%D1%82%D0%B5%D1%80%D0%B1%D1%83%D1%80%D0%B3%2C%20%D0%A1%D0%B5%D1%81%D1%82%D1%80%D0%BE%D1%80%D0%B5%D1%86%D0%BA%2C%20%D1%88.%20%D0%9F%D1%80%D0%B8%D0%BC%D0%BE%D1%80%D1%81%D0%BA%D0%BE%D0%B5%2C%20350&t-time=1&t-rn14=DP01&t-rn14-l=%D0%A1%D0%94%D0%AD%D0%9A&t-ogr=%D0%91%D1%8B%D1%87%D0%BE%D0%BA&t-kont=%D0%9A%D1%80%D0%B0%D1%81%20%D0%90%D0%BB%20%D0%BB%D0%B5%D0%BE%D0%BD&t-rab=%D0%9F%D0%BD-%D0%92%D1%81%2010%3A00-21%3A00&t-din=%D0%91%D0%B5%D0%B7%20%D0%BE%D0%B1%D0%B5%D0%B4%D0%B0&t-tel=%2B7(921)%20657%20-%2027%20-%2012&session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"delivery",
										"point",
										"create"
									],
									"query": [
										{
											"key": "st",
											"value": "11"
										},
										{
											"key": "cls17",
											"value": "%D0%A1%D0%97%D0%A1%D0%9F%D0%91"
										},
										{
											"key": "t-type",
											"value": "0"
										},
										{
											"key": "t-code",
											"value": "cdekSST4"
										},
										{
											"key": "t-name",
											"value": "%D0%9D%D0%B0%20%D0%9F%D1%80%D0%B8%D0%BC%D0%BE%D1%80%D1%81%D0%BA%D0%BE%D0%BC%20%D1%88%D0%BE%D1%81%D1%81%D0%B5%20350"
										},
										{
											"key": "t-adr",
											"value": "197706%2C%20%D0%A0%D0%BE%D1%81%D1%81%D0%B8%D1%8F%2C%20%D0%A1%D0%B0%D0%BD%D0%BA%D1%82-%D0%9F%D0%B5%D1%82%D0%B5%D1%80%D0%B1%D1%83%D1%80%D0%B3%2C%20%D0%A1%D0%B5%D1%81%D1%82%D1%80%D0%BE%D1%80%D0%B5%D1%86%D0%BA%2C%20%D1%88.%20%D0%9F%D1%80%D0%B8%D0%BC%D0%BE%D1%80%D1%81%D0%BA%D0%BE%D0%B5%2C%20350"
										},
										{
											"key": "t-time",
											"value": "1"
										},
										{
											"key": "t-rn14",
											"value": "DP01"
										},
										{
											"key": "t-rn14-l",
											"value": "%D0%A1%D0%94%D0%AD%D0%9A"
										},
										{
											"key": "t-ogr",
											"value": "%D0%91%D1%8B%D1%87%D0%BE%D0%BA"
										},
										{
											"key": "t-kont",
											"value": "%D0%9A%D1%80%D0%B0%D1%81%20%D0%90%D0%BB%20%D0%BB%D0%B5%D0%BE%D0%BD"
										},
										{
											"key": "t-rab",
											"value": "%D0%9F%D0%BD-%D0%92%D1%81%2010%3A00-21%3A00"
										},
										{
											"key": "t-din",
											"value": "%D0%91%D0%B5%D0%B7%20%D0%BE%D0%B1%D0%B5%D0%B4%D0%B0"
										},
										{
											"key": "t-tel",
											"value": "%2B7(921)%20657%20-%2027%20-%2012"
										},
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "delivery/point/id-cdek",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check delivery/point/id-cdek\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/delivery/point/{{id_cdek}}?st=11&cls17=%D0%A1%D0%97%D0%A1%D0%9F%D0%91&t-code=cdekSST4&t-name=%D0%9D%D0%B0%20%D0%9F%D1%80%D0%B8%D0%BC%D0%BE%D1%80%D1%81%D0%BA%D0%BE%D0%BC%20%D1%88%D0%BE%D1%81%D1%81%D0%B5%20350&t-adr=197706,%20%D0%A0%D0%BE%D1%81%D1%81%D0%B8%D1%8F,%20%D0%A1%D0%B0%D0%BD%D0%BA%D1%82-%D0%9F%D0%B5%D1%82%D0%B5%D1%80%D0%B1%D1%83%D1%80%D0%B3,%20%D0%A1%D0%B5%D1%81%D1%82%D1%80%D0%BE%D1%80%D0%B5%D1%86%D0%BA,%20%D1%88.%20%D0%9F%D1%80%D0%B8%D0%BC%D0%BE%D1%80%D1%81%D0%BA%D0%BE%D0%B5,%20350&t-time=1&t-rn14=DP01&t-rn14-l=%D0%A1%D0%94%D0%AD%D0%9A&t-kont=%D0%9A%D1%80%D0%B0%D1%81%20%D0%90%D0%BB%20%D0%BB%D0%B5%D0%BE%D0%BD&t-rab=%D0%9F%D0%BD-%D0%92%D1%81%2010:00-21:00&t-din=%D0%91%D0%B5%D0%B7%20%D0%BE%D0%B1%D0%B5%D0%B4%D0%B0&t-tel=+7(921)%20657%20-%2027%20-%2012&session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"delivery",
										"point",
										"{{id_cdek}}"
									],
									"query": [
										{
											"key": "st",
											"value": "11"
										},
										{
											"key": "cls17",
											"value": "%D0%A1%D0%97%D0%A1%D0%9F%D0%91"
										},
										{
											"key": "t-code",
											"value": "cdekSST4"
										},
										{
											"key": "t-name",
											"value": "%D0%9D%D0%B0%20%D0%9F%D1%80%D0%B8%D0%BC%D0%BE%D1%80%D1%81%D0%BA%D0%BE%D0%BC%20%D1%88%D0%BE%D1%81%D1%81%D0%B5%20350"
										},
										{
											"key": "t-adr",
											"value": "197706,%20%D0%A0%D0%BE%D1%81%D1%81%D0%B8%D1%8F,%20%D0%A1%D0%B0%D0%BD%D0%BA%D1%82-%D0%9F%D0%B5%D1%82%D0%B5%D1%80%D0%B1%D1%83%D1%80%D0%B3,%20%D0%A1%D0%B5%D1%81%D1%82%D1%80%D0%BE%D1%80%D0%B5%D1%86%D0%BA,%20%D1%88.%20%D0%9F%D1%80%D0%B8%D0%BC%D0%BE%D1%80%D1%81%D0%BA%D0%BE%D0%B5,%20350"
										},
										{
											"key": "t-time",
											"value": "1"
										},
										{
											"key": "t-rn14",
											"value": "DP01"
										},
										{
											"key": "t-rn14-l",
											"value": "%D0%A1%D0%94%D0%AD%D0%9A"
										},
										{
											"key": "t-kont",
											"value": "%D0%9A%D1%80%D0%B0%D1%81%20%D0%90%D0%BB%20%D0%BB%D0%B5%D0%BE%D0%BD"
										},
										{
											"key": "t-rab",
											"value": "%D0%9F%D0%BD-%D0%92%D1%81%2010:00-21:00"
										},
										{
											"key": "t-din",
											"value": "%D0%91%D0%B5%D0%B7%20%D0%BE%D0%B1%D0%B5%D0%B4%D0%B0"
										},
										{
											"key": "t-tel",
											"value": "+7(921)%20657%20-%2027%20-%2012"
										},
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "basket/order-pickup-cdek-bill",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check basket/order-pickupLC\r",
											"var pay_doc1;\r",
											"pm.test(\"create order cdek doc\", function () {\r",
											"// Perform pay_doc1 and extract pay_doc1 from the response\r",
											"    pay_doc1=pm.response.json().data.pay_doc1;\r",
											"    pm.collectionVariables.set(\"pay_doc1\", pay_doc1);\r",
											"});\r",
											"console.log(pay_doc1);\r",
											"var doc_369;\r",
											"pm.test(\"create order cdek doc369\", function () {\r",
											"// Perform pay_doc_369 and extract doc_369 from the response\r",
											"    doc_369=pm.response.json().data.doc_369;\r",
											"    pm.collectionVariables.set(\"doc_369\", doc_369);\r",
											"});\r",
											"console.log(doc_369);\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "session-id",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{host1}}/api/ipro/basket/order?skl=1000&i_dogovor=000120230525093554&pay-type=bill&s_rnd=r1&deliv_cmp=440181753&deliv_point=cdekSST4",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"basket",
										"order"
									],
									"query": [
										{
											"key": "skl",
											"value": "1000"
										},
										{
											"key": "i_dogovor",
											"value": "000120230525093554"
										},
										{
											"key": "pay-type",
											"value": "bill"
										},
										{
											"key": "s_rnd",
											"value": "r1"
										},
										{
											"key": "deliv_cmp",
											"value": "440181753"
										},
										{
											"key": "deliv_point",
											"value": "cdekSST4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "basket/sum0",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check invoice/iddoc/email\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test(\"sum in basket is empty\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.basket_sum).to.equal(\"0.00\");\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/basket/sum?session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"basket",
										"sum"
									],
									"query": [
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "invoice/id-doc/delivery",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check delivery/point/create-cdek-delivery\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"pm.collectionVariables.set(\"today\", moment().format(\"DD/MM/YYYY\"));\r",
											"//const dateNow = new Date();\r",
											"//pm.collectionVariables.set('currentDate', dateNow.toISOString());\r",
											"//const dateNow = require('dateNow');\r",
											"//pm.collectionVariables.set('currentDate',dateNow().format(\"DD/MM/YYYY\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "session-id",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "adr",
											"value": "{{id_cdek}}",
											"type": "text"
										},
										{
											"key": "doc_369",
											"value": "{{doc_369}}",
											"type": "text"
										},
										{
											"key": "time",
											"value": "10:00",
											"type": "text"
										},
										{
											"key": "phone",
											"value": "+7(543) 453 - 45 - 34",
											"type": "text"
										},
										{
											"key": "t525",
											"value": "600",
											"type": "text"
										},
										{
											"key": "vid",
											"value": "Стандартная: доставка по графику",
											"type": "text"
										},
										{
											"key": "ds_man",
											"value": "9035742",
											"type": "text"
										},
										{
											"key": "time_po",
											"value": "21:00",
											"type": "text"
										},
										{
											"key": "shabl",
											"value": "1359762520",
											"type": "text"
										},
										{
											"key": "deliv_cmp",
											"value": "440181753",
											"type": "text"
										},
										{
											"key": "applic_final",
											"value": "true",
											"type": "text"
										},
										{
											"key": "oper",
											"value": "add",
											"type": "text"
										},
										{
											"key": "RCP_NM",
											"value": "Крас Ал леон",
											"type": "text"
										},
										{
											"key": "date_z",
											"value": "{{today}}",
											"type": "text"
										},
										{
											"key": "date",
											"value": "{{today}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{host1}}/api/ipro/invoice/{{pay_doc1}}/delivery",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"invoice",
										"{{pay_doc1}}",
										"delivery"
									]
								}
							},
							"response": []
						},
						{
							"name": "invoice/iddoc/email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check invoice/iddoc/email\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/invoice/{{pay_doc1}}?session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"invoice",
										"{{pay_doc1}}"
									],
									"query": [
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "invoice/iddoc/print2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check invoice/iddoc/print2\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/invoice/{{pay_doc1}}/print2/40040857?action=changeStatus&session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"invoice",
										"{{pay_doc1}}",
										"print2",
										"40040857"
									],
									"query": [
										{
											"key": "action",
											"value": "changeStatus"
										},
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "pay_card",
					"item": [
						{
							"name": "basket-add-check-order -cdek",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check basket_add-LC\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 2000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "session-id",
											"value": "{{sessionToken}}",
											"type": "text"
										},
										{
											"key": "city",
											"value": "78",
											"type": "text"
										},
										{
											"key": "gds",
											"value": "{{gds}}",
											"type": "text"
										},
										{
											"key": "val",
											"value": "1",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{host1}}/api/ipro/basket/add",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"basket",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "delivery/point/create-cdek",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check delivery/point/create-cdek\r",
											"var id_cdek1;\r",
											"pm.test(\"create specification spec price\", function () {\r",
											"// Perform id_cdek and extract id_cdek from the response\r",
											"    id_cdek1 = pm.response.json().data.id;\r",
											"    pm.collectionVariables.set(\"id_cdek1\", id_cdek1);\r",
											"});\r",
											"console.log(id_cdek1);\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 400 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(400);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/delivery/point/create?st=11&cls17=%D0%A1%D0%97%D0%A1%D0%9F%D0%91&t-type=0&t-code=cdekSST4&t-name=%D0%9D%D0%B0%20%D0%9F%D1%80%D0%B8%D0%BC%D0%BE%D1%80%D1%81%D0%BA%D0%BE%D0%BC%20%D1%88%D0%BE%D1%81%D1%81%D0%B5%20350&t-adr=197706%2C%20%D0%A0%D0%BE%D1%81%D1%81%D0%B8%D1%8F%2C%20%D0%A1%D0%B0%D0%BD%D0%BA%D1%82-%D0%9F%D0%B5%D1%82%D0%B5%D1%80%D0%B1%D1%83%D1%80%D0%B3%2C%20%D0%A1%D0%B5%D1%81%D1%82%D1%80%D0%BE%D1%80%D0%B5%D1%86%D0%BA%2C%20%D1%88.%20%D0%9F%D1%80%D0%B8%D0%BC%D0%BE%D1%80%D1%81%D0%BA%D0%BE%D0%B5%2C%20350&t-time=1&t-rn14=DP01&t-rn14-l=%D0%A1%D0%94%D0%AD%D0%9A&t-ogr=%D0%91%D1%8B%D1%87%D0%BE%D0%BA&t-kont=%D0%9A%D1%80%D0%B0%D1%81%20%D0%90%D0%BB%20%D0%BB%D0%B5%D0%BE%D0%BD&t-rab=%D0%9F%D0%BD-%D0%92%D1%81%2010%3A00-21%3A00&t-din=%D0%91%D0%B5%D0%B7%20%D0%BE%D0%B1%D0%B5%D0%B4%D0%B0&t-tel=%2B7(921)%20657%20-%2027%20-%2012&session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"delivery",
										"point",
										"create"
									],
									"query": [
										{
											"key": "st",
											"value": "11"
										},
										{
											"key": "cls17",
											"value": "%D0%A1%D0%97%D0%A1%D0%9F%D0%91"
										},
										{
											"key": "t-type",
											"value": "0"
										},
										{
											"key": "t-code",
											"value": "cdekSST4"
										},
										{
											"key": "t-name",
											"value": "%D0%9D%D0%B0%20%D0%9F%D1%80%D0%B8%D0%BC%D0%BE%D1%80%D1%81%D0%BA%D0%BE%D0%BC%20%D1%88%D0%BE%D1%81%D1%81%D0%B5%20350"
										},
										{
											"key": "t-adr",
											"value": "197706%2C%20%D0%A0%D0%BE%D1%81%D1%81%D0%B8%D1%8F%2C%20%D0%A1%D0%B0%D0%BD%D0%BA%D1%82-%D0%9F%D0%B5%D1%82%D0%B5%D1%80%D0%B1%D1%83%D1%80%D0%B3%2C%20%D0%A1%D0%B5%D1%81%D1%82%D1%80%D0%BE%D1%80%D0%B5%D1%86%D0%BA%2C%20%D1%88.%20%D0%9F%D1%80%D0%B8%D0%BC%D0%BE%D1%80%D1%81%D0%BA%D0%BE%D0%B5%2C%20350"
										},
										{
											"key": "t-time",
											"value": "1"
										},
										{
											"key": "t-rn14",
											"value": "DP01"
										},
										{
											"key": "t-rn14-l",
											"value": "%D0%A1%D0%94%D0%AD%D0%9A"
										},
										{
											"key": "t-ogr",
											"value": "%D0%91%D1%8B%D1%87%D0%BE%D0%BA"
										},
										{
											"key": "t-kont",
											"value": "%D0%9A%D1%80%D0%B0%D1%81%20%D0%90%D0%BB%20%D0%BB%D0%B5%D0%BE%D0%BD"
										},
										{
											"key": "t-rab",
											"value": "%D0%9F%D0%BD-%D0%92%D1%81%2010%3A00-21%3A00"
										},
										{
											"key": "t-din",
											"value": "%D0%91%D0%B5%D0%B7%20%D0%BE%D0%B1%D0%B5%D0%B4%D0%B0"
										},
										{
											"key": "t-tel",
											"value": "%2B7(921)%20657%20-%2027%20-%2012"
										},
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "delivery/point/id-cdek",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check delivery/point/id-cdek\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/delivery/point/{{id_cdek1}}?st=11&cls17=%D0%A1%D0%97%D0%A1%D0%9F%D0%91&t-code=cdekSST4&t-name=%D0%9D%D0%B0%20%D0%9F%D1%80%D0%B8%D0%BC%D0%BE%D1%80%D1%81%D0%BA%D0%BE%D0%BC%20%D1%88%D0%BE%D1%81%D1%81%D0%B5%20350&t-adr=197706,%20%D0%A0%D0%BE%D1%81%D1%81%D0%B8%D1%8F,%20%D0%A1%D0%B0%D0%BD%D0%BA%D1%82-%D0%9F%D0%B5%D1%82%D0%B5%D1%80%D0%B1%D1%83%D1%80%D0%B3,%20%D0%A1%D0%B5%D1%81%D1%82%D1%80%D0%BE%D1%80%D0%B5%D1%86%D0%BA,%20%D1%88.%20%D0%9F%D1%80%D0%B8%D0%BC%D0%BE%D1%80%D1%81%D0%BA%D0%BE%D0%B5,%20350&t-time=1&t-rn14=DP01&t-rn14-l=%D0%A1%D0%94%D0%AD%D0%9A&t-kont=%D0%9A%D1%80%D0%B0%D1%81%20%D0%90%D0%BB%20%D0%BB%D0%B5%D0%BE%D0%BD&t-rab=%D0%9F%D0%BD-%D0%92%D1%81%2010:00-21:00&t-din=%D0%91%D0%B5%D0%B7%20%D0%BE%D0%B1%D0%B5%D0%B4%D0%B0&t-tel=+7(921)%20657%20-%2027%20-%2012&session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"delivery",
										"point",
										"{{id_cdek1}}"
									],
									"query": [
										{
											"key": "st",
											"value": "11"
										},
										{
											"key": "cls17",
											"value": "%D0%A1%D0%97%D0%A1%D0%9F%D0%91"
										},
										{
											"key": "t-code",
											"value": "cdekSST4"
										},
										{
											"key": "t-name",
											"value": "%D0%9D%D0%B0%20%D0%9F%D1%80%D0%B8%D0%BC%D0%BE%D1%80%D1%81%D0%BA%D0%BE%D0%BC%20%D1%88%D0%BE%D1%81%D1%81%D0%B5%20350"
										},
										{
											"key": "t-adr",
											"value": "197706,%20%D0%A0%D0%BE%D1%81%D1%81%D0%B8%D1%8F,%20%D0%A1%D0%B0%D0%BD%D0%BA%D1%82-%D0%9F%D0%B5%D1%82%D0%B5%D1%80%D0%B1%D1%83%D1%80%D0%B3,%20%D0%A1%D0%B5%D1%81%D1%82%D1%80%D0%BE%D1%80%D0%B5%D1%86%D0%BA,%20%D1%88.%20%D0%9F%D1%80%D0%B8%D0%BC%D0%BE%D1%80%D1%81%D0%BA%D0%BE%D0%B5,%20350"
										},
										{
											"key": "t-time",
											"value": "1"
										},
										{
											"key": "t-rn14",
											"value": "DP01"
										},
										{
											"key": "t-rn14-l",
											"value": "%D0%A1%D0%94%D0%AD%D0%9A"
										},
										{
											"key": "t-kont",
											"value": "%D0%9A%D1%80%D0%B0%D1%81%20%D0%90%D0%BB%20%D0%BB%D0%B5%D0%BE%D0%BD"
										},
										{
											"key": "t-rab",
											"value": "%D0%9F%D0%BD-%D0%92%D1%81%2010:00-21:00"
										},
										{
											"key": "t-din",
											"value": "%D0%91%D0%B5%D0%B7%20%D0%BE%D0%B1%D0%B5%D0%B4%D0%B0"
										},
										{
											"key": "t-tel",
											"value": "+7(921)%20657%20-%2027%20-%2012"
										},
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "basket/order-pickup-cdek-bill",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check basket/order-pickupLC\r",
											"var pay_doc2;\r",
											"pm.test(\"create order cdek doc\", function () {\r",
											"// Perform pay_doc1 and extract pay_doc1 from the response\r",
											"    pay_doc2=pm.response.json().data.pay_doc1;\r",
											"    pm.collectionVariables.set(\"pay_doc2\", pay_doc2);\r",
											"});\r",
											"console.log(pay_doc2);\r",
											"var doc_369_cdek;\r",
											"pm.test(\"create order cdek doc369\", function () {\r",
											"// Perform pay_doc_369 and extract doc_369 from the response\r",
											"    doc_369_cdek=pm.response.json().data.doc_369;\r",
											"    pm.collectionVariables.set(\"doc_369_cdek\", doc_369_cdek);\r",
											"});\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "session-id",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{host1}}/api/ipro/basket/order?skl=1000&i_dogovor=000120230525093554&pay-type=card_now&s_rnd=r1&deliv_cmp=440181753&deliv_point=cdekSST4",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"basket",
										"order"
									],
									"query": [
										{
											"key": "skl",
											"value": "1000"
										},
										{
											"key": "i_dogovor",
											"value": "000120230525093554"
										},
										{
											"key": "pay-type",
											"value": "card_now"
										},
										{
											"key": "s_rnd",
											"value": "r1"
										},
										{
											"key": "deliv_cmp",
											"value": "440181753"
										},
										{
											"key": "deliv_point",
											"value": "cdekSST4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "basket/sum0",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check invoice/iddoc/email\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test(\"sum in basket is empty\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.basket_sum).to.equal(\"0.00\");\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/basket/sum?session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"basket",
										"sum"
									],
									"query": [
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "invoice/id-doc/delivery",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check delivery/point/create-cdek-delivery\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"pm.collectionVariables.set(\"today\", moment().format(\"DD/MM/YYYY\"));\r",
											"//const dateNow = new Date();\r",
											"//pm.collectionVariables.set('currentDate', dateNow.toISOString());\r",
											"//const dateNow = require('dateNow');\r",
											"//pm.collectionVariables.set('currentDate',dateNow().format(\"DD/MM/YYYY\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "session-id",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "adr",
											"value": "{{id_cdek1}}",
											"type": "text"
										},
										{
											"key": "doc_369",
											"value": "{{doc_369_cdek}}",
											"type": "text"
										},
										{
											"key": "time",
											"value": "10:00",
											"type": "text"
										},
										{
											"key": "phone",
											"value": "+7(543) 453 - 45 - 34",
											"type": "text"
										},
										{
											"key": "t525",
											"value": "600",
											"type": "text"
										},
										{
											"key": "vid",
											"value": "Стандартная: доставка по графику",
											"type": "text"
										},
										{
											"key": "ds_man",
											"value": "9035742",
											"type": "text"
										},
										{
											"key": "time_po",
											"value": "21:00",
											"type": "text"
										},
										{
											"key": "shabl",
											"value": "1359762520",
											"type": "text"
										},
										{
											"key": "deliv_cmp",
											"value": "440181753",
											"type": "text"
										},
										{
											"key": "applic_final",
											"value": "true",
											"type": "text"
										},
										{
											"key": "oper",
											"value": "add",
											"type": "text"
										},
										{
											"key": "RCP_NM",
											"value": "Крас Ал леон",
											"type": "text"
										},
										{
											"key": "date_z",
											"value": "{{today}}",
											"type": "text"
										},
										{
											"key": "date",
											"value": "{{today}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{host1}}/api/ipro/invoice/{{pay_doc2}}/delivery",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"invoice",
										"{{pay_doc2}}",
										"delivery"
									]
								}
							},
							"response": []
						},
						{
							"name": "invoice/pay_doc1/pay_card cdek",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//invoice/pay_doc1/pay_card\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/invoice/{{pay_doc2}}/pay_card?type=ipro&returnUrl=https%3A%2F%2Fidev.etm.ru%2Fipro3%2Fpayment%2Fsuccess%2F&failUrl=https%3A%2F%2Fidev.etm.ru%2Fipro3%2Fpayment%2Ffail%2F&doc_369={{doc_369_cdek}}&amount=45.00&session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"invoice",
										"{{pay_doc2}}",
										"pay_card"
									],
									"query": [
										{
											"key": "type",
											"value": "ipro"
										},
										{
											"key": "returnUrl",
											"value": "https%3A%2F%2Fidev.etm.ru%2Fipro3%2Fpayment%2Fsuccess%2F"
										},
										{
											"key": "failUrl",
											"value": "https%3A%2F%2Fidev.etm.ru%2Fipro3%2Fpayment%2Ffail%2F"
										},
										{
											"key": "doc_369",
											"value": "{{doc_369_cdek}}"
										},
										{
											"key": "amount",
											"value": "45.00"
										},
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "invoice/pay_doc1_pay_card/pay_card_check-cdek",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//invoice/pay_doc1/pay_card\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "session-id",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{host1}}/api/ipro/invoice/{{pay_doc2}}/pay_card_check",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"invoice",
										"{{pay_doc2}}",
										"pay_card_check"
									]
								}
							},
							"response": []
						},
						{
							"name": "invoice/iddoc/email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check invoice/iddoc/email\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/invoice/{{pay_doc2}}?session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"invoice",
										"{{pay_doc2}}"
									],
									"query": [
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "invoice/iddoc/print2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check invoice/iddoc/print2\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/invoice/{{pay_doc2}}/print2/40040857?action=changeStatus&session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"invoice",
										"{{pay_doc2}}",
										"print2",
										"40040857"
									],
									"query": [
										{
											"key": "action",
											"value": "changeStatus"
										},
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "qr-code",
					"item": [
						{
							"name": "basket-add-check-order -cdek",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check basket_add-LC\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 2000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "session-id",
											"value": "{{sessionToken}}",
											"type": "text"
										},
										{
											"key": "city",
											"value": "78",
											"type": "text"
										},
										{
											"key": "gds",
											"value": "{{gds}}",
											"type": "text"
										},
										{
											"key": "val",
											"value": "1",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{host1}}/api/ipro/basket/add",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"basket",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "delivery/point/create-cdek",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check delivery/point/create-cdek\r",
											"var id_cdek3;\r",
											"pm.test(\"create specification spec price\", function () {\r",
											"// Perform id_cdek and extract id_cdek from the response\r",
											"    id_cdek3 = pm.response.json().data.id;\r",
											"    pm.collectionVariables.set(\"id_cdek3\", id_cdek3);\r",
											"});\r",
											"console.log(id_cdek3);\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 400 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(400);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/delivery/point/create?st=11&cls17=%D0%A1%D0%97%D0%A1%D0%9F%D0%91&t-type=0&t-code=cdekSST4&t-name=%D0%9D%D0%B0%20%D0%9F%D1%80%D0%B8%D0%BC%D0%BE%D1%80%D1%81%D0%BA%D0%BE%D0%BC%20%D1%88%D0%BE%D1%81%D1%81%D0%B5%20350&t-adr=197706%2C%20%D0%A0%D0%BE%D1%81%D1%81%D0%B8%D1%8F%2C%20%D0%A1%D0%B0%D0%BD%D0%BA%D1%82-%D0%9F%D0%B5%D1%82%D0%B5%D1%80%D0%B1%D1%83%D1%80%D0%B3%2C%20%D0%A1%D0%B5%D1%81%D1%82%D1%80%D0%BE%D1%80%D0%B5%D1%86%D0%BA%2C%20%D1%88.%20%D0%9F%D1%80%D0%B8%D0%BC%D0%BE%D1%80%D1%81%D0%BA%D0%BE%D0%B5%2C%20350&t-time=1&t-rn14=DP01&t-rn14-l=%D0%A1%D0%94%D0%AD%D0%9A&t-ogr=%D0%91%D1%8B%D1%87%D0%BE%D0%BA&t-kont=%D0%9A%D1%80%D0%B0%D1%81%20%D0%90%D0%BB%20%D0%BB%D0%B5%D0%BE%D0%BD&t-rab=%D0%9F%D0%BD-%D0%92%D1%81%2010%3A00-21%3A00&t-din=%D0%91%D0%B5%D0%B7%20%D0%BE%D0%B1%D0%B5%D0%B4%D0%B0&t-tel=%2B7(921)%20657%20-%2027%20-%2012&session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"delivery",
										"point",
										"create"
									],
									"query": [
										{
											"key": "st",
											"value": "11"
										},
										{
											"key": "cls17",
											"value": "%D0%A1%D0%97%D0%A1%D0%9F%D0%91"
										},
										{
											"key": "t-type",
											"value": "0"
										},
										{
											"key": "t-code",
											"value": "cdekSST4"
										},
										{
											"key": "t-name",
											"value": "%D0%9D%D0%B0%20%D0%9F%D1%80%D0%B8%D0%BC%D0%BE%D1%80%D1%81%D0%BA%D0%BE%D0%BC%20%D1%88%D0%BE%D1%81%D1%81%D0%B5%20350"
										},
										{
											"key": "t-adr",
											"value": "197706%2C%20%D0%A0%D0%BE%D1%81%D1%81%D0%B8%D1%8F%2C%20%D0%A1%D0%B0%D0%BD%D0%BA%D1%82-%D0%9F%D0%B5%D1%82%D0%B5%D1%80%D0%B1%D1%83%D1%80%D0%B3%2C%20%D0%A1%D0%B5%D1%81%D1%82%D1%80%D0%BE%D1%80%D0%B5%D1%86%D0%BA%2C%20%D1%88.%20%D0%9F%D1%80%D0%B8%D0%BC%D0%BE%D1%80%D1%81%D0%BA%D0%BE%D0%B5%2C%20350"
										},
										{
											"key": "t-time",
											"value": "1"
										},
										{
											"key": "t-rn14",
											"value": "DP01"
										},
										{
											"key": "t-rn14-l",
											"value": "%D0%A1%D0%94%D0%AD%D0%9A"
										},
										{
											"key": "t-ogr",
											"value": "%D0%91%D1%8B%D1%87%D0%BE%D0%BA"
										},
										{
											"key": "t-kont",
											"value": "%D0%9A%D1%80%D0%B0%D1%81%20%D0%90%D0%BB%20%D0%BB%D0%B5%D0%BE%D0%BD"
										},
										{
											"key": "t-rab",
											"value": "%D0%9F%D0%BD-%D0%92%D1%81%2010%3A00-21%3A00"
										},
										{
											"key": "t-din",
											"value": "%D0%91%D0%B5%D0%B7%20%D0%BE%D0%B1%D0%B5%D0%B4%D0%B0"
										},
										{
											"key": "t-tel",
											"value": "%2B7(921)%20657%20-%2027%20-%2012"
										},
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "delivery/point/id-cdek",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check delivery/point/id-cdek\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/delivery/point/{{id_cdek3}}?st=11&cls17=%D0%A1%D0%97%D0%A1%D0%9F%D0%91&t-code=cdekSST4&t-name=%D0%9D%D0%B0%20%D0%9F%D1%80%D0%B8%D0%BC%D0%BE%D1%80%D1%81%D0%BA%D0%BE%D0%BC%20%D1%88%D0%BE%D1%81%D1%81%D0%B5%20350&t-adr=197706,%20%D0%A0%D0%BE%D1%81%D1%81%D0%B8%D1%8F,%20%D0%A1%D0%B0%D0%BD%D0%BA%D1%82-%D0%9F%D0%B5%D1%82%D0%B5%D1%80%D0%B1%D1%83%D1%80%D0%B3,%20%D0%A1%D0%B5%D1%81%D1%82%D1%80%D0%BE%D1%80%D0%B5%D1%86%D0%BA,%20%D1%88.%20%D0%9F%D1%80%D0%B8%D0%BC%D0%BE%D1%80%D1%81%D0%BA%D0%BE%D0%B5,%20350&t-time=1&t-rn14=DP01&t-rn14-l=%D0%A1%D0%94%D0%AD%D0%9A&t-kont=%D0%9A%D1%80%D0%B0%D1%81%20%D0%90%D0%BB%20%D0%BB%D0%B5%D0%BE%D0%BD&t-rab=%D0%9F%D0%BD-%D0%92%D1%81%2010:00-21:00&t-din=%D0%91%D0%B5%D0%B7%20%D0%BE%D0%B1%D0%B5%D0%B4%D0%B0&t-tel=+7(921)%20657%20-%2027%20-%2012&session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"delivery",
										"point",
										"{{id_cdek3}}"
									],
									"query": [
										{
											"key": "st",
											"value": "11"
										},
										{
											"key": "cls17",
											"value": "%D0%A1%D0%97%D0%A1%D0%9F%D0%91"
										},
										{
											"key": "t-code",
											"value": "cdekSST4"
										},
										{
											"key": "t-name",
											"value": "%D0%9D%D0%B0%20%D0%9F%D1%80%D0%B8%D0%BC%D0%BE%D1%80%D1%81%D0%BA%D0%BE%D0%BC%20%D1%88%D0%BE%D1%81%D1%81%D0%B5%20350"
										},
										{
											"key": "t-adr",
											"value": "197706,%20%D0%A0%D0%BE%D1%81%D1%81%D0%B8%D1%8F,%20%D0%A1%D0%B0%D0%BD%D0%BA%D1%82-%D0%9F%D0%B5%D1%82%D0%B5%D1%80%D0%B1%D1%83%D1%80%D0%B3,%20%D0%A1%D0%B5%D1%81%D1%82%D1%80%D0%BE%D1%80%D0%B5%D1%86%D0%BA,%20%D1%88.%20%D0%9F%D1%80%D0%B8%D0%BC%D0%BE%D1%80%D1%81%D0%BA%D0%BE%D0%B5,%20350"
										},
										{
											"key": "t-time",
											"value": "1"
										},
										{
											"key": "t-rn14",
											"value": "DP01"
										},
										{
											"key": "t-rn14-l",
											"value": "%D0%A1%D0%94%D0%AD%D0%9A"
										},
										{
											"key": "t-kont",
											"value": "%D0%9A%D1%80%D0%B0%D1%81%20%D0%90%D0%BB%20%D0%BB%D0%B5%D0%BE%D0%BD"
										},
										{
											"key": "t-rab",
											"value": "%D0%9F%D0%BD-%D0%92%D1%81%2010:00-21:00"
										},
										{
											"key": "t-din",
											"value": "%D0%91%D0%B5%D0%B7%20%D0%BE%D0%B1%D0%B5%D0%B4%D0%B0"
										},
										{
											"key": "t-tel",
											"value": "+7(921)%20657%20-%2027%20-%2012"
										},
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "basket/order-pickup-cdek-bill",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check basket/order-pickupLC\r",
											"var pay_doc3;\r",
											"pm.test(\"create order cdek doc\", function () {\r",
											"// Perform pay_doc1 and extract pay_doc1 from the response\r",
											"    pay_doc3=pm.response.json().data.pay_doc1;\r",
											"    pm.collectionVariables.set(\"pay_doc3\", pay_doc3);\r",
											"});\r",
											"console.log(pay_doc3);\r",
											"var doc_369_cdek1;\r",
											"pm.test(\"create order cdek doc369\", function () {\r",
											"// Perform pay_doc_369 and extract doc_369 from the response\r",
											"    doc_369_cdek1=pm.response.json().data.doc_369;\r",
											"    pm.collectionVariables.set(\"doc_369_cdek1\", doc_369_cdek1);\r",
											"});\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "session-id",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{host1}}/api/ipro/basket/order?skl=1000&i_dogovor=000120230525093554&pay-type=sbp&s_rnd=r1&deliv_cmp=440181753&deliv_point=cdekSST4",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"basket",
										"order"
									],
									"query": [
										{
											"key": "skl",
											"value": "1000"
										},
										{
											"key": "i_dogovor",
											"value": "000120230525093554"
										},
										{
											"key": "pay-type",
											"value": "sbp"
										},
										{
											"key": "s_rnd",
											"value": "r1"
										},
										{
											"key": "deliv_cmp",
											"value": "440181753"
										},
										{
											"key": "deliv_point",
											"value": "cdekSST4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "basket/sum0",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check invoice/iddoc/email\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test(\"sum in basket is empty\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.basket_sum).to.equal(\"0.00\");\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/basket/sum?session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"basket",
										"sum"
									],
									"query": [
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "invoice/id-doc/delivery",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check delivery/point/create-cdek-delivery\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"pm.collectionVariables.set(\"today\", moment().format(\"DD/MM/YYYY\"));\r",
											"//const dateNow = new Date();\r",
											"//pm.collectionVariables.set('currentDate', dateNow.toISOString());\r",
											"//const dateNow = require('dateNow');\r",
											"//pm.collectionVariables.set('currentDate',dateNow().format(\"DD/MM/YYYY\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "session-id",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "adr",
											"value": "{{id_cdek3}}",
											"type": "text"
										},
										{
											"key": "doc_369",
											"value": "{{doc_369_cdek1}}",
											"type": "text"
										},
										{
											"key": "time",
											"value": "10:00",
											"type": "text"
										},
										{
											"key": "phone",
											"value": "+7(543) 453 - 45 - 34",
											"type": "text"
										},
										{
											"key": "t525",
											"value": "600",
											"type": "text"
										},
										{
											"key": "vid",
											"value": "Стандартная: доставка по графику",
											"type": "text"
										},
										{
											"key": "ds_man",
											"value": "9035742",
											"type": "text"
										},
										{
											"key": "time_po",
											"value": "21:00",
											"type": "text"
										},
										{
											"key": "shabl",
											"value": "1359762520",
											"type": "text"
										},
										{
											"key": "deliv_cmp",
											"value": "440181753",
											"type": "text"
										},
										{
											"key": "applic_final",
											"value": "true",
											"type": "text"
										},
										{
											"key": "oper",
											"value": "add",
											"type": "text"
										},
										{
											"key": "RCP_NM",
											"value": "Крас Ал леон",
											"type": "text"
										},
										{
											"key": "date_z",
											"value": "{{today}}",
											"type": "text"
										},
										{
											"key": "date",
											"value": "{{today}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{host1}}/api/ipro/invoice/{{pay_doc3}}/delivery",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"invoice",
										"{{pay_doc3}}",
										"delivery"
									]
								}
							},
							"response": []
						},
						{
							"name": "invoice/pay_doc1/pay_card cdek",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//invoice/pay_doc1/pay_card\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/invoice/{{pay_doc3}}/pay_card?type=ipro&returnUrl=https%3A%2F%2Fidev.etm.ru%2Fipro3%2Fpayment%2Fsuccess%2F&failUrl=https%3A%2F%2Fidev.etm.ru%2Fipro3%2Fpayment%2Ffail%2F&doc_369={{doc_369_cdek1}}&amount=45.00&session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"invoice",
										"{{pay_doc3}}",
										"pay_card"
									],
									"query": [
										{
											"key": "type",
											"value": "ipro"
										},
										{
											"key": "returnUrl",
											"value": "https%3A%2F%2Fidev.etm.ru%2Fipro3%2Fpayment%2Fsuccess%2F"
										},
										{
											"key": "failUrl",
											"value": "https%3A%2F%2Fidev.etm.ru%2Fipro3%2Fpayment%2Ffail%2F"
										},
										{
											"key": "doc_369",
											"value": "{{doc_369_cdek1}}"
										},
										{
											"key": "amount",
											"value": "45.00"
										},
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "invoice/pay_doc1_pay_card/pay_card_check-cdek",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//invoice/pay_doc1/pay_card\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "session-id",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{host1}}/api/ipro/invoice/{{pay_doc3}}/pay_card_check",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"invoice",
										"{{pay_doc3}}",
										"pay_card_check"
									]
								}
							},
							"response": []
						},
						{
							"name": "invoice/iddoc/email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check invoice/iddoc/email\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/invoice/{{pay_doc3}}?session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"invoice",
										"{{pay_doc3}}"
									],
									"query": [
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "invoice/iddoc/print2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check invoice/iddoc/print2\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/invoice/{{pay_doc3}}/print2/40040857?action=changeStatus&session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"invoice",
										"{{pay_doc3}}",
										"print2",
										"40040857"
									],
									"query": [
										{
											"key": "action",
											"value": "changeStatus"
										},
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "delivery-payment",
			"item": [
				{
					"name": "bill",
					"item": [
						{
							"name": "invoice/id/copy-to-basket",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check copi invoice to basket\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 2000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "session-id",
											"value": "{{sessionToken}}",
											"type": "text"
										},
										{
											"key": "city",
											"value": "78",
											"type": "text"
										},
										{
											"key": "gds",
											"value": "9091760-0-0",
											"type": "text"
										},
										{
											"key": "val",
											"value": "1",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{host1}}/api/ipro/invoice/{{pay_doc1}}/copy?session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"invoice",
										"{{pay_doc1}}",
										"copy"
									],
									"query": [
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "basket-order-mindate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check basket-order\r",
											"var min_date;\r",
											"pm.test(\"min_datea_vail\", function () {\r",
											"// Perform id_cdek and extract id_cdek from the response\r",
											"    min_date = pm.response.json().data[\"can-reserve\"].max_dateotgr;\r",
											"    pm.collectionVariables.set(\"min_date\", min_date);\r",
											"});\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/basket/order?skl=&goods=&session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"basket",
										"order"
									],
									"query": [
										{
											"key": "skl",
											"value": ""
										},
										{
											"key": "goods",
											"value": ""
										},
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "delivery/current",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check list current delivery \r",
											"var inv_id;\r",
											"pm.test(\"inv_id_delivery\", function () {\r",
											"// Perform id_cdek and extract id_cdek from the response\r",
											"    inv_id = pm.response.json().data.rows[0].inv_id;\r",
											"    pm.collectionVariables.set(\"inv_id\", inv_id);\r",
											"});\r",
											"var id_deliv;\r",
											"pm.test(\"id_delivery\", function () {\r",
											"// Perform id_cdek and extract id_cdek from the response\r",
											"    id_deliv = pm.response.json().data.rows[0].id;\r",
											"    pm.collectionVariables.set(\"id_deliv\", id_deliv);\r",
											"});\r",
											"\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 2000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "session-id",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{host1}}/api/ipro/delivery/current",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"delivery",
										"current"
									]
								}
							},
							"response": []
						},
						{
							"name": "delivery/point/id/date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check list current delivery \r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 2000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/delivery/point/{{qpoint}}/date?invId=1359762520&month={{month}}&year=2024&ds_st_code=11&toReserve=yes&session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"delivery",
										"point",
										"{{qpoint}}",
										"date"
									],
									"query": [
										{
											"key": "invId",
											"value": "1359762520"
										},
										{
											"key": "month",
											"value": "{{month}}"
										},
										{
											"key": "year",
											"value": "2024"
										},
										{
											"key": "ds_st_code",
											"value": "11"
										},
										{
											"key": "toReserve",
											"value": "yes"
										},
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "delivery/point/id/date_tarif",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check delivery/point/id/date_tarif\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 2000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/delivery/point/1-7384689153/date_tarif?invId=1359762520&ds_st_code=11&coord=60.049986,30.436557&volume=0.000002&weight=0.01&maxLen=0.065&InvPriceSum=4.86&shopHas=no&session-id={{sessionToken}}&minDateAvail={{min_date}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"delivery",
										"point",
										"1-7384689153",
										"date_tarif"
									],
									"query": [
										{
											"key": "invId",
											"value": "1359762520"
										},
										{
											"key": "ds_st_code",
											"value": "11"
										},
										{
											"key": "coord",
											"value": "60.049986,30.436557"
										},
										{
											"key": "volume",
											"value": "0.000002"
										},
										{
											"key": "weight",
											"value": "0.01"
										},
										{
											"key": "maxLen",
											"value": "0.065"
										},
										{
											"key": "InvPriceSum",
											"value": "4.86"
										},
										{
											"key": "shopHas",
											"value": "no"
										},
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										},
										{
											"key": "minDateAvail",
											"value": "{{min_date}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "delivery/inv_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check delivery_id\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 2000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "session-id",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{host1}}/api/ipro/delivery/{{inv_id}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"delivery",
										"{{inv_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "post/basket/order-delivery-etm",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check basketorder delivery etm\r",
											"var pay_docdeliv;\r",
											"pm.test(\"create order cdek doc\", function () {\r",
											"// Perform pay_doc1 and extract pay_doc1 from the response\r",
											"    pay_docdeliv=pm.response.json().data.pay_doc1;\r",
											"    pm.collectionVariables.set(\"pay_docdeliv\", pay_docdeliv);\r",
											"});\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 2000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "session-id",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{host1}}/api/ipro/basket/order?qpoint={{qpoint}}&skl=1000&i_dogovor=000120230525093554&pay-type=bill&s_rnd=r1&qdeliv_method=separate_line",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"basket",
										"order"
									],
									"query": [
										{
											"key": "qpoint",
											"value": "{{qpoint}}"
										},
										{
											"key": "skl",
											"value": "1000"
										},
										{
											"key": "i_dogovor",
											"value": "000120230525093554"
										},
										{
											"key": "pay-type",
											"value": "bill"
										},
										{
											"key": "s_rnd",
											"value": "r1"
										},
										{
											"key": "qdeliv_method",
											"value": "separate_line"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "invoice/pay_docdeliv/current_delivery_add",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check invoice/id/current_delivery_add\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 2000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://idev.etm.ru/api/ipro/invoice/{{pay_docdeliv}}/current_delivery_add?id={{id_deliv}}",
									"protocol": "https",
									"host": [
										"idev",
										"etm",
										"ru"
									],
									"path": [
										"api",
										"ipro",
										"invoice",
										"{{pay_docdeliv}}",
										"current_delivery_add"
									],
									"query": [
										{
											"key": "id",
											"value": "{{id_deliv}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "pay_card",
					"item": [
						{
							"name": "basket-add-check-order -cdek",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check basket_add-LC\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 2000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "session-id",
											"value": "{{sessionToken}}",
											"type": "text"
										},
										{
											"key": "city",
											"value": "78",
											"type": "text"
										},
										{
											"key": "gds",
											"value": "{{gds}}",
											"type": "text"
										},
										{
											"key": "val",
											"value": "1",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{host1}}/api/ipro/basket/add",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"basket",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "basket-order-mindate Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check basket-order\r",
											"var min_date1;\r",
											"pm.test(\"min_datea_vail_card\", function () {\r",
											"// Perform id_cdek and extract id_cdek from the response\r",
											"    min_date1 = pm.response.json().data[\"can-reserve\"].max_dateotgr;\r",
											"    pm.collectionVariables.set(\"min_date1\", min_date1);\r",
											"});\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/basket/order?skl=&goods=&session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"basket",
										"order"
									],
									"query": [
										{
											"key": "skl",
											"value": ""
										},
										{
											"key": "goods",
											"value": ""
										},
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "delivery/time/s",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check delivery/time\r",
											"\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/delivery/time?invId=1359762520&date={{today}}&s_po=s&ds_st_code=11&goodsNetNum=1-7384689292&session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"delivery",
										"time"
									],
									"query": [
										{
											"key": "invId",
											"value": "1359762520"
										},
										{
											"key": "date",
											"value": "{{today}}"
										},
										{
											"key": "s_po",
											"value": "s"
										},
										{
											"key": "ds_st_code",
											"value": "11"
										},
										{
											"key": "goodsNetNum",
											"value": "1-7384689292"
										},
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "delivery/delivery_tzr",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check delivery/delivery_tzr\r",
											"\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/delivery/delivery_tzr?coord=60.055816%2C30.431966&volume=0.000002&weight=0.01&maxLen=0.065&InvPriceSum=4.86&date={{today}}&city=78&session-id={{sessionToken}}&goodsNetNum=1-7384689292&=",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"delivery",
										"delivery_tzr"
									],
									"query": [
										{
											"key": "coord",
											"value": "60.055816%2C30.431966"
										},
										{
											"key": "volume",
											"value": "0.000002"
										},
										{
											"key": "weight",
											"value": "0.01"
										},
										{
											"key": "maxLen",
											"value": "0.065"
										},
										{
											"key": "InvPriceSum",
											"value": "4.86"
										},
										{
											"key": "date",
											"value": "{{today}}"
										},
										{
											"key": "city",
											"value": "78"
										},
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										},
										{
											"key": "goodsNetNum",
											"value": "1-7384689292"
										},
										{
											"key": "",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "delivery/time/po",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check delivery/time/po\r",
											"\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/delivery/time?invId=1359762520&date={{today}}&s_po=po&from=12:00&ds_st_code=11&goodsNetNum=1-7384689292&session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"delivery",
										"time"
									],
									"query": [
										{
											"key": "invId",
											"value": "1359762520"
										},
										{
											"key": "date",
											"value": "{{today}}"
										},
										{
											"key": "s_po",
											"value": "po"
										},
										{
											"key": "from",
											"value": "12:00"
										},
										{
											"key": "ds_st_code",
											"value": "11"
										},
										{
											"key": "goodsNetNum",
											"value": "1-7384689292"
										},
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "delivery/point/id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check delivery/point/id-cdek\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/delivery/point/1-7384689292?st=11&cls17=%D0%A1%D0%97%D0%A1%D0%9F%D0%91&t-code=7ecc223b-ea64-44fc-8153-ed5a6b9c6d4c&t-name=%D0%9B%D0%B5%D0%BD%D0%B8%D0%BD%D0%B3%D1%80%D0%B0%D0%B4%D1%81%D0%BA%D0%B0%D1%8F%20%D0%BE%D0%B1%D0%BB%D0%B0%D1%81%D1%82%D1%8C,%20%D0%92%D1%81%D0%B5%D0%B2%D0%BE%D0%BB%D0%BE%D0%B6%D1%81%D0%BA%D0%B8%D0%B9%20%D1%80%D0%B0%D0%B9%D0%BE%D0%BD,%20%D0%9C%D1%83%D1%80%D0%B8%D0%BD%D0%BE,%20%D0%9F%D0%B5%D1%82%D1%80%D0%BE%D0%B2%D1%81%D0%BA%D0%B8%D0%B9%20%D0%B1%D1%83%D0%BB%D1%8C%D0%B2%D0%B0%D1%80,%207&t-adr=%D0%9B%D0%B5%D0%BD%D0%B8%D0%BD%D0%B3%D1%80%D0%B0%D0%B4%D1%81%D0%BA%D0%B0%D1%8F%20%D0%BE%D0%B1%D0%BB%D0%B0%D1%81%D1%82%D1%8C,%20%D0%92%D1%81%D0%B5%D0%B2%D0%BE%D0%BB%D0%BE%D0%B6%D1%81%D0%BA%D0%B8%D0%B9%20%D1%80%D0%B0%D0%B9%D0%BE%D0%BD,%20%D0%9C%D1%83%D1%80%D0%B8%D0%BD%D0%BE,%20%D0%9F%D0%B5%D1%82%D1%80%D0%BE%D0%B2%D1%81%D0%BA%D0%B8%D0%B9%20%D0%B1%D1%83%D0%BB%D1%8C%D0%B2%D0%B0%D1%80,%207&t-gps=60.055816,30.431966&t-info=%D1%82%D0%B5%D1%81%D1%82&t-time=&t-rn14=&t-rn14-l=&t-kont=%D0%90%D0%BB%D0%B5%D0%BA%D1%81%D0%B0%D0%BD%D0%B4%D1%80%D0%BE%D0%B2%D0%B0%20%D0%90%D0%BD%D0%B0%D1%81%D1%82%D0%B0%D1%81%D0%B8%D1%8F%20%D0%A1%D0%B5%D1%80%D0%B3%D0%B5%D0%B5%D0%B2%D0%BD%D0%B0&t-rab=12&t-din=13&t-tel=+7(435)353-45-34&session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"delivery",
										"point",
										"1-7384689292"
									],
									"query": [
										{
											"key": "st",
											"value": "11"
										},
										{
											"key": "cls17",
											"value": "%D0%A1%D0%97%D0%A1%D0%9F%D0%91"
										},
										{
											"key": "t-code",
											"value": "7ecc223b-ea64-44fc-8153-ed5a6b9c6d4c"
										},
										{
											"key": "t-name",
											"value": "%D0%9B%D0%B5%D0%BD%D0%B8%D0%BD%D0%B3%D1%80%D0%B0%D0%B4%D1%81%D0%BA%D0%B0%D1%8F%20%D0%BE%D0%B1%D0%BB%D0%B0%D1%81%D1%82%D1%8C,%20%D0%92%D1%81%D0%B5%D0%B2%D0%BE%D0%BB%D0%BE%D0%B6%D1%81%D0%BA%D0%B8%D0%B9%20%D1%80%D0%B0%D0%B9%D0%BE%D0%BD,%20%D0%9C%D1%83%D1%80%D0%B8%D0%BD%D0%BE,%20%D0%9F%D0%B5%D1%82%D1%80%D0%BE%D0%B2%D1%81%D0%BA%D0%B8%D0%B9%20%D0%B1%D1%83%D0%BB%D1%8C%D0%B2%D0%B0%D1%80,%207"
										},
										{
											"key": "t-adr",
											"value": "%D0%9B%D0%B5%D0%BD%D0%B8%D0%BD%D0%B3%D1%80%D0%B0%D0%B4%D1%81%D0%BA%D0%B0%D1%8F%20%D0%BE%D0%B1%D0%BB%D0%B0%D1%81%D1%82%D1%8C,%20%D0%92%D1%81%D0%B5%D0%B2%D0%BE%D0%BB%D0%BE%D0%B6%D1%81%D0%BA%D0%B8%D0%B9%20%D1%80%D0%B0%D0%B9%D0%BE%D0%BD,%20%D0%9C%D1%83%D1%80%D0%B8%D0%BD%D0%BE,%20%D0%9F%D0%B5%D1%82%D1%80%D0%BE%D0%B2%D1%81%D0%BA%D0%B8%D0%B9%20%D0%B1%D1%83%D0%BB%D1%8C%D0%B2%D0%B0%D1%80,%207"
										},
										{
											"key": "t-gps",
											"value": "60.055816,30.431966"
										},
										{
											"key": "t-info",
											"value": "%D1%82%D0%B5%D1%81%D1%82"
										},
										{
											"key": "t-time",
											"value": ""
										},
										{
											"key": "t-rn14",
											"value": ""
										},
										{
											"key": "t-rn14-l",
											"value": ""
										},
										{
											"key": "t-kont",
											"value": "%D0%90%D0%BB%D0%B5%D0%BA%D1%81%D0%B0%D0%BD%D0%B4%D1%80%D0%BE%D0%B2%D0%B0%20%D0%90%D0%BD%D0%B0%D1%81%D1%82%D0%B0%D1%81%D0%B8%D1%8F%20%D0%A1%D0%B5%D1%80%D0%B3%D0%B5%D0%B5%D0%B2%D0%BD%D0%B0"
										},
										{
											"key": "t-rab",
											"value": "12"
										},
										{
											"key": "t-din",
											"value": "13"
										},
										{
											"key": "t-tel",
											"value": "+7(435)353-45-34"
										},
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "basket/order-delivery-card",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check basket/order-pickupLC\r",
											"var pay_doc4;\r",
											"pm.test(\"create order cdek doc\", function () {\r",
											"// Perform pay_doc1 and extract pay_doc1 from the response\r",
											"    pay_doc4=pm.response.json().data.pay_doc1;\r",
											"    pm.collectionVariables.set(\"pay_doc4\", pay_doc4);\r",
											"});\r",
											"console.log(pay_doc4);\r",
											"var doc_369_deli;\r",
											"pm.test(\"create order cdek doc369\", function () {\r",
											"// Perform pay_doc_369deli and extract doc_369 from the response\r",
											"    doc_369_deli=pm.response.json().data.doc_369;\r",
											"    pm.collectionVariables.set(\"doc_369_deli\", doc_369_deli);\r",
											"});\r",
											"console.log(doc_369_deli);\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "session-id",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{host1}}/api/ipro/basket/order?skl=1000&i_dogovor=000120230525093554&pay-type=card_now&s_rnd=r1&qpoint=1-7384689292&delivery=720",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"basket",
										"order"
									],
									"query": [
										{
											"key": "skl",
											"value": "1000"
										},
										{
											"key": "i_dogovor",
											"value": "000120230525093554"
										},
										{
											"key": "pay-type",
											"value": "card_now"
										},
										{
											"key": "s_rnd",
											"value": "r1"
										},
										{
											"key": "qpoint",
											"value": "1-7384689292"
										},
										{
											"key": "delivery",
											"value": "720"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "basket/sum0",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check invoice/iddoc/email\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test(\"sum in basket is empty\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.basket_sum).to.equal(\"0.00\");\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/basket/sum?session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"basket",
										"sum"
									],
									"query": [
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "invoice/id-doc/delivery",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//check delivery/point/create-cdek-delivery\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"pm.collectionVariables.set(\"today\", moment().format(\"DD/MM/YYYY\"));\r",
											"//const dateNow = new Date();\r",
											"//pm.collectionVariables.set('currentDate', dateNow.toISOString());\r",
											"//const dateNow = require('dateNow');\r",
											"//pm.collectionVariables.set('currentDate',dateNow().format(\"DD/MM/YYYY\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "session-id",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "adr",
											"value": "1-7384689292",
											"type": "text"
										},
										{
											"key": "doc_369",
											"value": "{{doc_369_deli}}",
											"type": "text"
										},
										{
											"key": "time",
											"value": "10:00",
											"type": "text"
										},
										{
											"key": "phone",
											"value": "+7(543) 453 - 45 - 34",
											"type": "text"
										},
										{
											"key": "t525",
											"value": "600",
											"type": "text"
										},
										{
											"key": "vid",
											"value": "Стандартная: доставка по графику",
											"type": "text"
										},
										{
											"key": "ds_man",
											"value": "9035742",
											"type": "text"
										},
										{
											"key": "time_po",
											"value": "21:00",
											"type": "text"
										},
										{
											"key": "shabl",
											"value": "1359762520",
											"type": "text"
										},
										{
											"key": "deliv_cmp",
											"value": "440181753",
											"type": "text"
										},
										{
											"key": "applic_final",
											"value": "true",
											"type": "text"
										},
										{
											"key": "oper",
											"value": "add",
											"type": "text"
										},
										{
											"key": "RCP_NM",
											"value": "Крас Ал леон",
											"type": "text"
										},
										{
											"key": "date_z",
											"value": "{{today}}",
											"type": "text"
										},
										{
											"key": "date",
											"value": "{{today}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{host1}}/api/ipro/invoice/{{pay_doc4}}/delivery",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"invoice",
										"{{pay_doc4}}",
										"delivery"
									]
								}
							},
							"response": []
						},
						{
							"name": "invoice/pay_doc4/pay_card cdek",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//invoice/pay_doc4/pay_card\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{host1}}/api/ipro/invoice/{{pay_doc4}}/pay_card?type=ipro&returnUrl=https%3A%2F%2Fidev.etm.ru%2Fipro3%2Fpayment%2Fsuccess%2F&failUrl=https%3A%2F%2Fidev.etm.ru%2Fipro3%2Fpayment%2Ffail%2F&doc_369={{doc_369_deli}}&amount=45.00&session-id={{sessionToken}}",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"invoice",
										"{{pay_doc4}}",
										"pay_card"
									],
									"query": [
										{
											"key": "type",
											"value": "ipro"
										},
										{
											"key": "returnUrl",
											"value": "https%3A%2F%2Fidev.etm.ru%2Fipro3%2Fpayment%2Fsuccess%2F"
										},
										{
											"key": "failUrl",
											"value": "https%3A%2F%2Fidev.etm.ru%2Fipro3%2Fpayment%2Ffail%2F"
										},
										{
											"key": "doc_369",
											"value": "{{doc_369_deli}}"
										},
										{
											"key": "amount",
											"value": "45.00"
										},
										{
											"key": "session-id",
											"value": "{{sessionToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "invoice/pay_doc1_pay_card/pay_card_check-cdek",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//invoice/pay_doc1/pay_card\r",
											"pm.test('valid response format json', function () {\r",
											"    pm.response.to.have.jsonBody();\r",
											"});\r",
											"\r",
											"pm.test(\"status code 200 in body of json\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status.code).to.equal(200);\r",
											"});\r",
											"pm.test('Response is valid JSON', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test('Response time is less than 1000ms', function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "session-id",
										"value": "{{sessionToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{host1}}/api/ipro/invoice/{{pay_doc4}}/pay_card_check",
									"protocol": "https",
									"host": [
										"{{host1}}"
									],
									"path": [
										"api",
										"ipro",
										"invoice",
										"{{pay_doc4}}",
										"pay_card_check"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "estimates",
			"item": [
				{
					"name": "in",
					"item": [
						{
							"name": "Create estimation",
							"item": [
								{
									"name": "Logging",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response is ok\", function () {\r",
													"    let session = pm.response.json().data.session\r",
													"    pm.variables.set('sessionToken', session);\r",
													"    pm.response.to.have.status(200);\r",
													"})\r",
													"\r",
													"// 123"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{host1}}/api/ipro/user/login?log=60004392dnv&pwd=20101999d20101999d",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"user",
												"login"
											],
											"query": [
												{
													"key": "log",
													"value": "60004392dnv"
												},
												{
													"key": "pwd",
													"value": "20101999d20101999d"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Add to cart",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"adding to cart from est\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"})  ",
													"",
													"pm.test(\"Response has the required fields - status and data\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData).to.be.an('object');",
													"  pm.expect(responseData.status).to.exist;",
													"  pm.expect(responseData.data).to.exist;",
													"});",
													"",
													"",
													"pm.test(\"Status object contains code and message\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData.status).to.exist;",
													"  pm.expect(responseData.status.code).to.exist;",
													"  pm.expect(responseData.status.message).to.exist;",
													"});",
													"",
													"",
													"pm.test(\"Ensure that 'change_price' in the 'data' object is a boolean\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData.data).to.be.an('object');",
													"    pm.expect(responseData.data.change_price).to.be.a('boolean');",
													"});",
													"",
													"",
													"pm.test(\"Verify that basket_lines in the data object is a number\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData.data).to.be.an('object');",
													"    pm.expect(responseData.data.basket_lines).to.be.a('number');",
													"});",
													"",
													"",
													"pm.test(\"GdsList in data object is an array and is empty\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData.data.gdsList).to.be.an('array').that.is.empty;",
													"});",
													"",
													"// Test for response schema",
													"pm.test(\"Response schema is valid\", function () {",
													"  var schema = {",
													"    type: \"object\",",
													"    properties: {",
													"      status: {",
													"        type: \"object\",",
													"        properties: {",
													"          code: { type: \"number\" },",
													"          message: { type: \"string\" }",
													"        },",
													"        required: [\"code\", \"message\"]",
													"      },",
													"      data: {",
													"        type: \"object\",",
													"        properties: {",
													"          change_price: { type: \"boolean\" },",
													"          basket_last_line_num: { type: \"string\" },",
													"          basket_lines: { type: \"number\" },",
													"          basket_sum: { type: \"string\" },",
													"          gdsList: { type: \"array\" }",
													"        },",
													"        required: [\"change_price\", \"basket_last_line_num\", \"basket_lines\", \"basket_sum\", \"gdsList\"]",
													"      }",
													"    },",
													"    required: [\"status\", \"data\"]",
													"  };",
													"",
													"  var response = pm.response.json();",
													"  pm.expect(tv4.validate(response, schema)).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"session-id\": \"{{session}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{host1}}/api/ipro/estimate/1-2147350777/copy?session-id={{sessionToken}}",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"estimate",
												"1-2147350777",
												"copy"
											],
											"query": [
												{
													"key": "session",
													"value": "",
													"disabled": true
												},
												{
													"key": "session-id",
													"value": "{{sessionToken}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create est",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"create est\", function () {\r",
													"    let docNameEst = pm.response.json().data.docName;\r",
													"    pm.variables.set('docNameEst', docNameEst);\r",
													"    pm.response.to.have.status(200);\r",
													"})\r",
													"\r",
													"pm.test(\"create dates\", function(){\r",
													"    const now = require('moment');\r",
													"    pm.variables.set(\"now\", now().format(\"DD-MM-YYYY\"));\r",
													"\r",
													"    const current = require('moment');\r",
													"    pm.variables.set(\"current\", current.utc().add(3, 'hours').format('YYYY-MM-DD HH:mm:ss'));\r",
													"\r",
													"    const present = require(\"moment\")\r",
													"    pm.variables.set(\"present\", present().add(-6, 'month').format(\"DD-MM-YYYY\"))\r",
													"\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "https://{{host1}}/api/ipro/basket/estimate?tovzak=&pr_object=&i_dogovor=000120230525093554&session-id={{sessionToken}}",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"basket",
												"estimate"
											],
											"query": [
												{
													"key": "tovzak",
													"value": ""
												},
												{
													"key": "pr_object",
													"value": ""
												},
												{
													"key": "i_dogovor",
													"value": "000120230525093554"
												},
												{
													"key": "session-id",
													"value": "{{sessionToken}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find est and open",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"find est\", function () {",
													"    let listOfEst = pm.response.json().data.rows",
													"    for (let i = 0; i < 10; i++) {",
													"        if (listOfEst[i].num === pm.variables.get(\"docNameEst\")){",
													"            pm.variables.set('id_est', listOfEst[i].id);",
													"            break",
													"        }",
													"}",
													"    pm.response.to.have.status(200);",
													"})",
													"",
													"pm.test(\"Response has the required fields\", function () {",
													"    const responseData = pm.response.json().data.rows;",
													"",
													"    responseData.forEach(function(row) {",
													"        pm.expect(row).to.include.all.keys('id', 'folders', 'author', 'num', 'date', 'sum', 'sum98', 'oper', 'lines', 'ps', 'agreed', 'rowid835', 'pro_id', 'pro_name');",
													"    });",
													"});",
													"",
													"",
													"pm.test(\"Rows array should not be empty\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData.data.rows).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"",
													"pm.test(\"Records field is a non-negative integer\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.data.records).to.be.a('number').and.to.be.at.least(0);",
													"});",
													"",
													"",
													"pm.test(\"Ensure that status code is 200\", function () {",
													"  const responseData = pm.response.json();",
													"  pm.expect(responseData.status.code).to.equal(200);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{host1}}/api/ipro/estimate?author=&d1={{present}}&d2={{now}}&usr-inv-num=&status=e0&sidx=&sord=&page=1&rows=10&session-id={{sessionToken}}&pro_id=",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"estimate"
											],
											"query": [
												{
													"key": "author",
													"value": ""
												},
												{
													"key": "d1",
													"value": "{{present}}"
												},
												{
													"key": "d2",
													"value": "{{now}}"
												},
												{
													"key": "usr-inv-num",
													"value": ""
												},
												{
													"key": "status",
													"value": "e0"
												},
												{
													"key": "sidx",
													"value": ""
												},
												{
													"key": "sord",
													"value": ""
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "rows",
													"value": "10"
												},
												{
													"key": "session-id",
													"value": "{{sessionToken}}"
												},
												{
													"key": "pro_id",
													"value": ""
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Actions",
							"item": [
								{
									"name": "Name",
									"item": [
										{
											"name": "Open est and ...",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"response is ok\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{host1}}/api/ipro/estimate/{{id_est}}?session-id={{sessionToken}}",
													"protocol": "https",
													"host": [
														"{{host1}}"
													],
													"path": [
														"api",
														"ipro",
														"estimate",
														"{{id_est}}"
													],
													"query": [
														{
															"key": "session-id",
															"value": "{{sessionToken}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Change name POST",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"take info from response\", function () {\r",
															"    let signRowid = pm.response.json().data.signRowid\r",
															"    pm.variables.set('signRowid', signRowid);\r",
															"    pm.response.to.have.status(200);\r",
															"})\r",
															"\r",
															"pm.test(\"Response Content-Type is application/json\", function () {\r",
															"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(200);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Status object structure is correct\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"\r",
															"    pm.expect(responseData.status).to.exist.and.to.be.an('object');\r",
															"    pm.expect(responseData.status.code).to.exist.and.to.be.a('number');\r",
															"    pm.expect(responseData.status.message).to.exist.and.to.be.a('string');\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "https://{{host1}}/api/ipro/estimate/{{id_est}}/sign?val=НОВОЕ ИМЯ + {{current}}&sg-code=835",
													"protocol": "https",
													"host": [
														"{{host1}}"
													],
													"path": [
														"api",
														"ipro",
														"estimate",
														"{{id_est}}",
														"sign"
													],
													"query": [
														{
															"key": "val",
															"value": "НОВОЕ ИМЯ + {{current}}"
														},
														{
															"key": "sg-code",
															"value": "835"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Change name PUT",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"changing name with PUT est\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"})\r",
															"\r",
															"\r",
															"pm.test(\"Response Content-Type is application/json\", function () {\r",
															"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Status code 0 indicates success\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"    \r",
															"    pm.expect(responseData.status.code).to.equal(200);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Data object contains all required fields\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"    \r",
															"    pm.expect(responseData.data).to.include.all.keys('typeApp', 'format', 'session-id', 'request_method', 'syf_prog', 'file-code', 'archive', 'fieldlist', 'invoice', 'val', 'signRowid', 'sysParam_REMOTE_ADDR', 'login_type', 'org', 'org-id', 'user-id', 'user_id', 'man', 'lpr_code', 'withoutArchive');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "https://{{host1}}/api/ipro/estimate/{{id_est}}/sign?val=НОВОЕ ИМЯ ДЛЯ PUT + {{current}}&signRowid={{signRowid}}",
													"protocol": "https",
													"host": [
														"{{host1}}"
													],
													"path": [
														"api",
														"ipro",
														"estimate",
														"{{id_est}}",
														"sign"
													],
													"query": [
														{
															"key": "val",
															"value": "НОВОЕ ИМЯ ДЛЯ PUT + {{current}}"
														},
														{
															"key": "signRowid",
															"value": "{{signRowid}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Export",
									"item": [
										{
											"name": "Export est",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"export est\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "https://{{host1}}/api/ipro/estimate/{{id_est}}/print/40041456?session-id={{sessionToken}}",
													"protocol": "https",
													"host": [
														"{{host1}}"
													],
													"path": [
														"api",
														"ipro",
														"estimate",
														"{{id_est}}",
														"print",
														"40041456"
													],
													"query": [
														{
															"key": "session-id",
															"value": "{{sessionToken}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Place an order",
									"item": [
										{
											"name": "Add specification",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"add specification\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"})\r",
															"\r",
															"pm.test(\"Response Content-Type is 'application/json'\", function () {\r",
															"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(200);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Status object is present in the response\", function () {\r",
															"  const responseData = pm.response.json();\r",
															"  \r",
															"  pm.expect(responseData).to.have.property('status');\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Data object is present in the response\", function () {\r",
															"  const responseData = pm.response.json();\r",
															"  pm.expect(responseData.data).to.exist;\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Id field in the data object is a non-empty string\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"    \r",
															"    pm.expect(responseData).to.be.an('object');\r",
															"    pm.expect(responseData.data.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id field should be a non-empty string\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "https://{{host1}}/api/ipro/estimate/{{id_est}}/specification?session-id={{sessionToken}}",
													"protocol": "https",
													"host": [
														"{{host1}}"
													],
													"path": [
														"api",
														"ipro",
														"estimate",
														"{{id_est}}",
														"specification"
													],
													"query": [
														{
															"key": "session-id",
															"value": "{{sessionToken}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Check for existing spec(est)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('include', function () {\r",
															"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"docNameEst\"));\r",
															"});\r",
															"pm.test(\"response is ok\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"})\r",
															"pm.test(\"Rows array is present and contains at least one element\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"    \r",
															"    pm.expect(responseData).to.be.an('object');\r",
															"    pm.expect(responseData.data.rows).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Rows array should contain at least one element\");\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Status object is present and contains expected fields\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"    \r",
															"    pm.expect(responseData.status).to.exist;\r",
															"    pm.expect(responseData.status).to.have.property('code');\r",
															"    pm.expect(responseData.status).to.have.property('message');\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Content-Type header is set to application/json\", function () {\r",
															"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Data object contains expected fields\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"    \r",
															"    pm.expect(responseData).to.be.an('object');\r",
															"    pm.expect(responseData).to.have.property('data');\r",
															"    pm.expect(responseData.data).to.have.property('rows');\r",
															"    pm.expect(responseData.data).to.have.property('records');\r",
															"    pm.expect(responseData.data).to.have.property('limit');\r",
															"    pm.expect(responseData.data).to.have.property('inv_ankid');\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{host1}}/api/ipro/invoice?session-id={{sessionToken}}&page=1&rows=20&sidx=inv-date&sord=desc&d1={{present}}&d2={{now}}",
													"protocol": "https",
													"host": [
														"{{host1}}"
													],
													"path": [
														"api",
														"ipro",
														"invoice"
													],
													"query": [
														{
															"key": "session-id",
															"value": "{{sessionToken}}"
														},
														{
															"key": "page",
															"value": "1"
														},
														{
															"key": "rows",
															"value": "20"
														},
														{
															"key": "sidx",
															"value": "inv-date"
														},
														{
															"key": "sord",
															"value": "desc"
														},
														{
															"key": "d1",
															"value": "{{present}}"
														},
														{
															"key": "d2",
															"value": "{{now}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Object",
									"item": [
										{
											"name": "Find object",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"find est\", function () {\r",
															"    let codeObj = pm.response.json().data.rows[0].code\r",
															"    pm.variables.set('codeObj', codeObj);\r",
															"    pm.response.to.have.status(200);\r",
															"})\r",
															"\r",
															"pm.test(\"Response Content-Type is application/json\", function () {\r",
															"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Validate status object with code and message fields\", function () {\r",
															"  const responseData = pm.response.json();\r",
															"  \r",
															"  pm.expect(responseData.status).to.exist.and.to.be.an('object');\r",
															"  pm.expect(responseData.status.code).to.exist.and.to.be.a('number');\r",
															"  pm.expect(responseData.status.message).to.exist.and.to.be.a('string');\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Data object contains rows array and records field\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"    \r",
															"    pm.expect(responseData).to.be.an('object');\r",
															"    pm.expect(responseData.data).to.have.property('rows').that.is.an('array');\r",
															"    pm.expect(responseData.data).to.have.property('records');\r",
															"});\r",
															"\r",
															"pm.test(\"Schema is valid\", function () {\r",
															"  var schema = {\r",
															"    type: \"object\",\r",
															"    properties: {\r",
															"      status: {\r",
															"        type: \"object\",\r",
															"        properties: {\r",
															"          code: { type: \"number\" },\r",
															"          message: { type: \"string\" }\r",
															"        },\r",
															"        required: [\"code\", \"message\"]\r",
															"      },\r",
															"      data: {\r",
															"        type: \"object\",\r",
															"        properties: {\r",
															"          rows: { type: \"array\" },\r",
															"          records: { type: \"number\" }\r",
															"        },\r",
															"        required: [\"rows\", \"records\"]\r",
															"      }\r",
															"    },\r",
															"    required: [\"status\", \"data\"]\r",
															"  };\r",
															"\r",
															"  var response = pm.response.json();\r",
															"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://{{host1}}/api/ipro/info/object/60004392?session-id={{sessionToken}}",
													"protocol": "https",
													"host": [
														"{{host1}}"
													],
													"path": [
														"api",
														"ipro",
														"info",
														"object",
														"60004392"
													],
													"query": [
														{
															"key": "session-id",
															"value": "{{sessionToken}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Add object",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"add object and save est\", function () {\r",
															"    let id_est = pm.response.json().data.id\r",
															"    pm.variables.set('id_est', id_est);\r",
															"    pm.response.to.have.status(200);\r",
															"})\r",
															"\r",
															"pm.test(\"Response Content-Type is application/json\", function () {\r",
															"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(200);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Status object is present in the response\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"    \r",
															"    pm.expect(responseData.status).to.exist;\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Code in the status object is a non-negative integer\", function () {\r",
															"  const responseData = pm.response.json();\r",
															"  \r",
															"  pm.expect(responseData.status).to.exist.and.to.be.an('object');\r",
															"  pm.expect(responseData.status.code).to.exist.and.to.be.a('number').and.to.satisfy((code) => code >= 0, \"Code should be a non-negative integer\");\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Message in status object is a non-empty string\", function () {\r",
															"  const responseData = pm.response.json();\r",
															"\r",
															"  pm.expect(responseData.status).to.be.an('object');\r",
															"  pm.expect(responseData.status.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://{{host1}}/api/ipro/estimate/{{id_est}}?lines={{lines}}&data={{data}}&pr_object={{codeObj}}&session-id={{sessionToken}}",
													"protocol": "https",
													"host": [
														"{{host1}}"
													],
													"path": [
														"api",
														"ipro",
														"estimate",
														"{{id_est}}"
													],
													"query": [
														{
															"key": "lines",
															"value": "{{lines}}"
														},
														{
															"key": "data",
															"value": "{{data}}"
														},
														{
															"key": "pr_object",
															"value": "{{codeObj}}"
														},
														{
															"key": "session-id",
															"value": "{{sessionToken}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Nortes",
									"item": [
										{
											"name": "Add note",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.sendRequest('https://idev.etm.ru/api/ipro/estimate/' + pm.variables.get(\"id_est\") +  '/ps?session-id=' + pm.variables.get(\"sessionToken\"), (error, response) => {\r",
															"    if (error) throw new Error(error);\r",
															"    pm.test(\"check\", function () {\r",
															"        pm.expect(response.json().data.comments.at(-1).text).to.eql('Добавил примечение');\r",
															"    });\r",
															"\r",
															"});\r",
															"pm.test(\"response is ok\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"})\r",
															"\r",
															"pm.test(\"Response Content-Type is application/json\", function () {\r",
															"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(200);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Status object should exist in the response\", function () {\r",
															"  const responseData = pm.response.json();\r",
															"  \r",
															"  pm.expect(responseData).to.be.an('object');\r",
															"  pm.expect(responseData.status).to.exist.and.to.be.an('object');\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Data object is present in the response\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"    \r",
															"    pm.expect(responseData).to.have.property('data');\r",
															"});\r",
															"\r",
															"pm.test(\"Response has the required fields\", function () {\r",
															"  const responseData = pm.response.json();\r",
															"  \r",
															"  pm.expect(responseData).to.be.an('object');\r",
															"  pm.expect(responseData.status).to.exist;\r",
															"  pm.expect(responseData.data).to.exist;\r",
															"  pm.expect(responseData.data.msg).to.exist;\r",
															"  pm.expect(responseData.data.fio).to.exist;\r",
															"  pm.expect(responseData.data.date).to.exist;\r",
															"  pm.expect(responseData.data.time).to.exist;\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "https://{{host1}}/api/ipro/estimate/{{id_est}}/ps?session-id={{sessionToken}}&text=Добавил примечение",
													"protocol": "https",
													"host": [
														"{{host1}}"
													],
													"path": [
														"api",
														"ipro",
														"estimate",
														"{{id_est}}",
														"ps"
													],
													"query": [
														{
															"key": "session-id",
															"value": "{{sessionToken}}"
														},
														{
															"key": "text",
															"value": "Добавил примечение"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "agreement",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.sendRequest('https://idev.etm.ru/api/ipro/estimate/' + pm.variables.get(\"id_est\") +  '/ps?session-id=' + pm.variables.get(\"sessionToken\"), (error, response) => {\r",
															"    if (error) throw new Error(error);\r",
															"\r",
															"    pm.test(\"check\", function () {\r",
															"        pm.expect(response.json().data.comments.at(-1).agreed).to.eql('1');\r",
															"        // let listOfEst = response.json().data.comments;\r",
															"        // for (let i = listOfEst.length - 1; i >= 0; i--) {\r",
															"        //     console.log(listOfEst[i])\r",
															"        //     pm.expect(listOfEst[i].agreed).to.include(\"1\");\r",
															"        //     break\r",
															"        // }\r",
															"    });\r",
															"});\r",
															"\r",
															"pm.test(\"Response status code is 200\", function () {\r",
															"  pm.expect(pm.response.to.have.status(200));\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Message is an empty string\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"    \r",
															"    pm.expect(responseData.data.msg).to.equal(\"\");\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Fio is a non-empty string\", function () {\r",
															"  const responseData = pm.response.json();\r",
															"  \r",
															"  pm.expect(responseData).to.be.an('object');\r",
															"  pm.expect(responseData.data.fio).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Fio should not be empty\");\r",
															"});\r",
															"\r",
															"pm.test(\"Response has the required fields\", function () {\r",
															"  const responseData = pm.response.json();\r",
															"  \r",
															"  pm.expect(responseData).to.be.an('object');\r",
															"  pm.expect(responseData.status).to.exist;\r",
															"  pm.expect(responseData.data).to.exist;\r",
															"  pm.expect(responseData.data.msg).to.exist;\r",
															"  pm.expect(responseData.data.fio).to.exist;\r",
															"  pm.expect(responseData.data.date).to.exist;\r",
															"  pm.expect(responseData.data.time).to.exist;\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "https://{{host1}}/api/ipro/estimate/{{id_est}}/ps?session-id={{sessionToken}}&sg=1",
													"protocol": "https",
													"host": [
														"{{host1}}"
													],
													"path": [
														"api",
														"ipro",
														"estimate",
														"{{id_est}}",
														"ps"
													],
													"query": [
														{
															"key": "session-id",
															"value": "{{sessionToken}}"
														},
														{
															"key": "sg",
															"value": "1"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "misalignment",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.sendRequest('https://idev.etm.ru/api/ipro/estimate/' + pm.variables.get(\"id_est\") +  '/ps?session-id=' + pm.variables.get(\"sessionToken\"), (error, response) => {\r",
															"    if (error) throw new Error(error);\r",
															"\r",
															"    pm.test(\"check\", function () {\r",
															"        pm.expect(response.json().data.comments.at(-1).agreed).to.eql('2');\r",
															"    });\r",
															"\r",
															"});\r",
															"\r",
															"pm.test(\"Response has the required fields\", function () {\r",
															"  const responseData = pm.response.json();\r",
															"  \r",
															"  pm.expect(responseData).to.be.an('object');\r",
															"  pm.expect(responseData.status).to.exist;\r",
															"  pm.expect(responseData.data).to.exist;\r",
															"  pm.expect(responseData.data.msg).to.exist;\r",
															"  pm.expect(responseData.data.fio).to.exist;\r",
															"  pm.expect(responseData.data.date).to.exist;\r",
															"  pm.expect(responseData.data.time).to.exist;\r",
															"});\r",
															"\r",
															"pm.test(\"Message is an empty string\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"    \r",
															"    pm.expect(responseData.data.msg).to.equal(\"\");\r",
															"});\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(200);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Content-Type is application/json\", function () {\r",
															"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "https://{{host1}}/api/ipro/estimate/{{id_est}}/ps?session-id={{sessionToken}}&sg=2",
													"protocol": "https",
													"host": [
														"{{host1}}"
													],
													"path": [
														"api",
														"ipro",
														"estimate",
														"{{id_est}}",
														"ps"
													],
													"query": [
														{
															"key": "session-id",
															"value": "{{sessionToken}}"
														},
														{
															"key": "sg",
															"value": "2"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					],
					"description": "# **Тесты для проверки функционала внутри смет**"
				},
				{
					"name": "out",
					"item": [
						{
							"name": "Take document",
							"item": [
								{
									"name": "Take cpecification",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.expect(pm.response).to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Content-Type header is application/json\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Msg field is present and not empty\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData).to.have.property('msg').that.is.a('string').and.empty;\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Emails array is present and contains expected number of elements\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData.emails).to.exist;\r",
													"    pm.expect(responseData.emails).to.be.an('array');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Email in the 'emails' array is in a valid email format\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData.emails).to.be.an('array');\r",
													"    responseData.emails.forEach(function (emailObj) {\r",
													"        pm.expect(emailObj.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
													"    });\r",
													"});\r",
													"pm.test(\"Schema is valid\", function () {\r",
													"  var schema = {\r",
													"    type: \"object\",\r",
													"    properties: {\r",
													"      msg: {\r",
													"        type: \"string\",\r",
													"      },\r",
													"      invUsrInvNum: {\r",
													"        type: \"string\",\r",
													"      },\r",
													"      invStatus: {\r",
													"        type: \"string\",\r",
													"      },\r",
													"      invGdTypeCode: {\r",
													"        type: \"string\",\r",
													"      },\r",
													"      invCondFact: {\r",
													"        type: \"string\",\r",
													"      },\r",
													"      operations: {\r",
													"        type: \"string\",\r",
													"      },\r",
													"      invStatusPay: {\r",
													"        type: \"string\",\r",
													"      },\r",
													"      invPays: {\r",
													"        type: \"string\",\r",
													"      },\r",
													"      inviPro: {\r",
													"        type: \"string\",\r",
													"      },\r",
													"      invDelivery: {\r",
													"        type: \"string\",\r",
													"      },\r",
													"      invWriteInvDate: {\r",
													"        type: \"string\",\r",
													"      },\r",
													"      invInvDate: {\r",
													"        type: \"string\",\r",
													"      },\r",
													"      invFirmCode: {\r",
													"        type: \"string\",\r",
													"      },\r",
													"      invNetNum: {\r",
													"        type: \"string\",\r",
													"      },\r",
													"      invWhencre: {\r",
													"        type: \"string\",\r",
													"      },\r",
													"      invTimecre: {\r",
													"        type: \"string\",\r",
													"      },\r",
													"      invWhomcre: {\r",
													"        type: \"string\",\r",
													"      },\r",
													"      invWhenmod: {\r",
													"        type: \"string\",\r",
													"      },\r",
													"      invTimemod: {\r",
													"        type: \"string\",\r",
													"      },\r",
													"      invWhommod: {\r",
													"        type: \"string\",\r",
													"      },\r",
													"      invStoreSum: {\r",
													"        type: \"string\",\r",
													"      },\r",
													"      invContract: {\r",
													"        type: \"string\",\r",
													"      },\r",
													"      invFirm: {\r",
													"        type: \"string\",\r",
													"      },\r",
													"      gruz_pol: {\r",
													"        type: \"array\",\r",
													"      },\r",
													"      emails: {\r",
													"        type: \"array\",\r",
													"        items: {\r",
													"          type: \"object\",\r",
													"          properties: {\r",
													"            email: {\r",
													"              type: \"string\",\r",
													"              format: \"email\",\r",
													"            },\r",
													"            name: {\r",
													"              type: \"string\",\r",
													"            },\r",
													"          },\r",
													"          required: [\"email\", \"name\"],\r",
													"        },\r",
													"      },\r",
													"    },\r",
													"    required: [\"msg\", \"emails\"],\r",
													"  };\r",
													"\r",
													"  var response = pm.response.json();\r",
													"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{host1}}/api/ipro/invoice/{{id_est}}?session-id={{sessionToken}}",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"invoice",
												"{{id_est}}"
											],
											"query": [
												{
													"key": "session-id",
													"value": "{{sessionToken}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Take the tender documentation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"  pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Validate the structure of the status object\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.status).to.be.an('object');\r",
													"    pm.expect(responseData.status.code).to.exist.and.to.be.a('number');\r",
													"    pm.expect(responseData.status.message).to.exist.and.to.be.a('string');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Message in the response should be empty\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData.status.message).to.be.not.empty;\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Schema is valid\", function () {\r",
													"  var schema = {\r",
													"    type: \"object\",\r",
													"    properties: {\r",
													"      status: {\r",
													"        type: \"object\",\r",
													"        properties: {\r",
													"          code: { type: \"number\" },\r",
													"          message: { type: \"string\" }\r",
													"        },\r",
													"        required: [\"code\", \"message\"]\r",
													"      },\r",
													"      data: {\r",
													"        type: \"object\",\r",
													"        properties: {\r",
													"          typeApp: { type: \"string\" },\r",
													"          format: { type: \"string\" },\r",
													"          \"session-id\": { type: \"string\" },\r",
													"          request_method: { type: \"string\" },\r",
													"          syf_prog: { type: \"string\" },\r",
													"          \"file-code\": { type: \"string\" },\r",
													"          archive: { type: \"string\" },\r",
													"          fieldlist: { type: \"string\" },\r",
													"          invoice: { type: \"string\" },\r",
													"          \"sg-code\": { type: \"string\" },\r",
													"          ps: { type: \"string\" },\r",
													"          sysParam_REMOTE_ADDR: { type: \"string\" },\r",
													"          login_type: { type: \"string\" },\r",
													"          org: { type: \"string\" },\r",
													"          \"org-id\": { type: \"string\" },\r",
													"          \"user-id\": { type: \"string\" },\r",
													"          user_id: { type: \"string\" },\r",
													"          man: { type: \"string\" },\r",
													"          lpr_code: { type: \"string\" },\r",
													"          withoutArchive: { type: \"string\" },\r",
													"          signRowid: { type: \"string\" }\r",
													"        }\r",
													"      }\r",
													"    },\r",
													"    required: [\"status\", \"data\"]\r",
													"  };\r",
													"\r",
													"  var response = pm.response.json();\r",
													"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "https://{{host1}}/api/ipro/estimate/{{id_est}}/sign?sg-code=873&ps=doc_num%3D123%24obj_name%3D123%24build_type%3D123%24doc_name%3D123%24prj_state%3D%D0%9F&session-id={{sessionToken}}",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"estimate",
												"{{id_est}}",
												"sign"
											],
											"query": [
												{
													"key": "sg-code",
													"value": "873"
												},
												{
													"key": "ps",
													"value": "doc_num%3D123%24obj_name%3D123%24build_type%3D123%24doc_name%3D123%24prj_state%3D%D0%9F"
												},
												{
													"key": "session-id",
													"value": "{{sessionToken}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Grand Estimate",
							"item": [
								{
									"name": "GrandEstimateCurrentpricetag",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has the required fields\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData).to.have.property('status');\r",
													"    pm.expect(responseData).to.have.property('data');\r",
													"    pm.expect(responseData).to.have.property('error');\r",
													"    pm.expect(responseData).to.have.property('result');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Code in status object is a non-negative integer\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData.status).to.be.an('object');\r",
													"    pm.expect(responseData.status.code).to.be.a('number').and.to.satisfy((code) => code >= 0, \"Code should be a non-negative integer\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Message in the status object is a non-empty string\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData.status).to.exist.and.to.be.an('object');\r",
													"    pm.expect(responseData.status.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Data is an empty object\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData.data).to.be.an('object').that.is.empty;\r",
													"});\r",
													"\r",
													"pm.test(\"Schema is valid\", function () {\r",
													"  var schema = {\r",
													"    type: \"object\",\r",
													"    properties: {\r",
													"      status: {\r",
													"        type: \"object\",\r",
													"        properties: {\r",
													"          code: { type: \"number\" },\r",
													"          message: { type: \"string\" }\r",
													"        },\r",
													"        required: [\"code\", \"message\"]\r",
													"      },\r",
													"      data: { type: \"object\" },\r",
													"      error: { type: \"string\" },\r",
													"      result: { type: \"string\" }\r",
													"    },\r",
													"    required: [\"status\", \"data\", \"error\", \"result\"]\r",
													"  };\r",
													"\r",
													"  var response = pm.response.json();\r",
													"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "https://{{host1}}/api/ipro/estimate/{{id_est}}/run/40102162?docType=0&withNDS=yes&mail=degtyarev_nv@etm.ru&actPrice=no&session-id={{sessionToken}}",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"estimate",
												"{{id_est}}",
												"run",
												"40102162"
											],
											"query": [
												{
													"key": "docType",
													"value": "0"
												},
												{
													"key": "withNDS",
													"value": "yes"
												},
												{
													"key": "mail",
													"value": "degtyarev_nv@etm.ru"
												},
												{
													"key": "actPrice",
													"value": "no"
												},
												{
													"key": "session-id",
													"value": "{{sessionToken}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GrandEstimateCurrentpricetagNoNDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has a valid Content-Type header\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Validate the status object\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData.status).to.exist.and.to.be.an('object');\r",
													"    pm.expect(responseData.status.code).to.exist.and.to.be.a('number');\r",
													"    pm.expect(responseData.status.message).to.exist.and.to.be.a('string');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Data object is present in the response\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData).to.have.property('data');\r",
													"});\r",
													"\r",
													"pm.test(\"Schema is valid\", function () {\r",
													"  var schema = {\r",
													"    type: \"object\",\r",
													"    properties: {\r",
													"      status: {\r",
													"        type: \"object\",\r",
													"        properties: {\r",
													"          code: { type: \"number\" },\r",
													"          message: { type: \"string\" }\r",
													"        },\r",
													"        required: [\"code\", \"message\"]\r",
													"      },\r",
													"      data: { type: \"object\" },\r",
													"      error: { type: \"string\" },\r",
													"      result: { type: \"string\" }\r",
													"    },\r",
													"    required: [\"status\", \"data\", \"error\", \"result\"]\r",
													"  };\r",
													"\r",
													"  var response = pm.response.json();\r",
													"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "https://{{host1}}/api/ipro/estimate/{{id_est}}/run/40102162?docType=0&withNDS=no&mail=degtyarev_nv@etm.ru&actPrice=no&session-id={{sessionToken}}",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"estimate",
												"{{id_est}}",
												"run",
												"40102162"
											],
											"query": [
												{
													"key": "docType",
													"value": "0"
												},
												{
													"key": "withNDS",
													"value": "no"
												},
												{
													"key": "mail",
													"value": "degtyarev_nv@etm.ru"
												},
												{
													"key": "actPrice",
													"value": "no"
												},
												{
													"key": "session-id",
													"value": "{{sessionToken}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GrandEstimateSmeta",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has the required fields\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData).to.have.property('status');\r",
													"    pm.expect(responseData).to.have.property('data');\r",
													"    pm.expect(responseData).to.have.property('error');\r",
													"    pm.expect(responseData).to.have.property('result');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Status object contains expected fields - code and message\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData.status).to.be.an('object');\r",
													"    pm.expect(responseData.status).to.have.property('code');\r",
													"    pm.expect(responseData.status).to.have.property('message');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Data object should be empty\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData.data).to.be.an('object').that.is.empty;\r",
													"});\r",
													"\r",
													"pm.test(\"Schema is valid\", function () {\r",
													"  var schema = {\r",
													"    type: \"object\",\r",
													"    properties: {\r",
													"      status: {\r",
													"        type: \"object\",\r",
													"        properties: {\r",
													"          code: { type: \"number\" },\r",
													"          message: { type: \"string\" }\r",
													"        },\r",
													"        required: [\"code\", \"message\"]\r",
													"      },\r",
													"      data: { type: \"object\" },\r",
													"      error: { type: \"string\" },\r",
													"      result: { type: \"string\" }\r",
													"    },\r",
													"    required: [\"status\", \"data\", \"error\", \"result\"]\r",
													"  };\r",
													"\r",
													"  var response = pm.response.json();\r",
													"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
													"});\r",
													"// Test for response content type\r",
													"pm.test(\"Response has content type application/json\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "https://{{host1}}/api/ipro/estimate/{{id_est}}/run/40102162?docType=1&withNDS=yes&mail=degtyarev_nv@etm.ru&actPrice=yes&session-id={{sessionToken}}",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"estimate",
												"{{id_est}}",
												"run",
												"40102162"
											],
											"query": [
												{
													"key": "docType",
													"value": "1"
												},
												{
													"key": "withNDS",
													"value": "yes"
												},
												{
													"key": "mail",
													"value": "degtyarev_nv@etm.ru"
												},
												{
													"key": "actPrice",
													"value": "yes"
												},
												{
													"key": "session-id",
													"value": "{{sessionToken}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GrandEstimateSmetaArtPriceNo",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"  pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has the required fields\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData).to.have.property('status');\r",
													"    pm.expect(responseData).to.have.property('data');\r",
													"    pm.expect(responseData).to.have.property('error');\r",
													"    pm.expect(responseData).to.have.property('result');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 0 and message is empty\", function () {\r",
													"  const responseData = pm.response.json();\r",
													"  \r",
													"  pm.expect(responseData.status.code).to.equal(200);\r",
													"  pm.expect(responseData.status.message).to.be.not.empty;\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Data object is not empty\", function () {\r",
													"  const responseData = pm.response.json();\r",
													"  \r",
													"  pm.expect(responseData.data).to.be.empty;\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Error and result should be empty strings\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData.error).to.be.a('string').and.to.be.empty;\r",
													"    pm.expect(responseData.result).to.be.a('string').and.to.be.not.empty;\r",
													"});\r",
													"\r",
													"// Test for response schema\r",
													"pm.test(\"Response schema is valid\", function () {\r",
													"  var schema = {\r",
													"    type: \"object\",\r",
													"    properties: {\r",
													"      status: {\r",
													"        type: \"object\",\r",
													"        properties: {\r",
													"          code: { type: \"number\" },\r",
													"          message: { type: \"string\" }\r",
													"        },\r",
													"        required: [\"code\", \"message\"]\r",
													"      },\r",
													"      data: { type: \"object\" },\r",
													"      error: { type: \"string\" },\r",
													"      result: { type: \"string\" }\r",
													"    },\r",
													"    required: [\"status\", \"data\", \"error\", \"result\"]\r",
													"  };\r",
													"\r",
													"  var response = pm.response.json();\r",
													"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "https://{{host1}}/api/ipro/estimate/{{id_est}}/run/40102162?docType=1&withNDS=yes&mail=degtyarev_nv@etm.ru&actPrice=no&session-id={{sessionToken}}",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"estimate",
												"{{id_est}}",
												"run",
												"40102162"
											],
											"query": [
												{
													"key": "docType",
													"value": "1"
												},
												{
													"key": "withNDS",
													"value": "yes"
												},
												{
													"key": "mail",
													"value": "degtyarev_nv@etm.ru"
												},
												{
													"key": "actPrice",
													"value": "no"
												},
												{
													"key": "session-id",
													"value": "{{sessionToken}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GrandEstimateSmetaNoNDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has the required fields\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"\r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData).to.have.property('status');\r",
													"    pm.expect(responseData).to.have.property('data');\r",
													"    pm.expect(responseData).to.have.property('error');\r",
													"    pm.expect(responseData).to.have.property('result');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Message is a non-empty string\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData.status.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Content-Type header is application/json\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Schema is valid\", function () {\r",
													"  var schema = {\r",
													"    type: \"object\",\r",
													"    properties: {\r",
													"      status: {\r",
													"        type: \"object\",\r",
													"        properties: {\r",
													"          code: { type: \"number\" },\r",
													"          message: { type: \"string\" }\r",
													"        },\r",
													"        required: [\"code\", \"message\"]\r",
													"      },\r",
													"      data: { type: \"object\" },\r",
													"      error: { type: \"string\" },\r",
													"      result: { type: \"string\" }\r",
													"    },\r",
													"    required: [\"status\", \"data\", \"error\", \"result\"]\r",
													"  };\r",
													"\r",
													"  var response = pm.response.json();\r",
													"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
													"});\r",
													"pm.test(\"Response time is within acceptable range\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "https://{{host1}}/api/ipro/estimate/{{id_est}}/run/40102162?docType=1&withNDS=no&mail=degtyarev_nv@etm.ru&actPrice=yes&session-id={{sessionToken}}",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"estimate",
												"{{id_est}}",
												"run",
												"40102162"
											],
											"query": [
												{
													"key": "docType",
													"value": "1"
												},
												{
													"key": "withNDS",
													"value": "no"
												},
												{
													"key": "mail",
													"value": "degtyarev_nv@etm.ru"
												},
												{
													"key": "actPrice",
													"value": "yes"
												},
												{
													"key": "session-id",
													"value": "{{sessionToken}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GrandEstimateSmetaNoArtPriceNoNDS",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "https://{{host1}}/api/ipro/estimate/{{id_est}}/run/40102162?docType=1&withNDS=no&mail=degtyarev_nv@etm.ru&actPrice=no&session-id={{sessionToken}}",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"estimate",
												"{{id_est}}",
												"run",
												"40102162"
											],
											"query": [
												{
													"key": "docType",
													"value": "1"
												},
												{
													"key": "withNDS",
													"value": "no"
												},
												{
													"key": "mail",
													"value": "degtyarev_nv@etm.ru"
												},
												{
													"key": "actPrice",
													"value": "no"
												},
												{
													"key": "session-id",
													"value": "{{sessionToken}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Unite",
							"item": [
								{
									"name": "Add to cart",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"adding to cart from est\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"})  ",
													"",
													"pm.test(\"Response has the required fields - status and data\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData).to.be.an('object');",
													"  pm.expect(responseData.status).to.exist;",
													"  pm.expect(responseData.data).to.exist;",
													"});",
													"",
													"",
													"pm.test(\"Status object contains code and message\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData.status).to.exist;",
													"  pm.expect(responseData.status.code).to.exist;",
													"  pm.expect(responseData.status.message).to.exist;",
													"});",
													"",
													"",
													"pm.test(\"Ensure that 'change_price' in the 'data' object is a boolean\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData.data).to.be.an('object');",
													"    pm.expect(responseData.data.change_price).to.be.a('boolean');",
													"});",
													"",
													"",
													"pm.test(\"Verify that basket_lines in the data object is a number\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData.data).to.be.an('object');",
													"    pm.expect(responseData.data.basket_lines).to.be.a('number');",
													"});",
													"",
													"",
													"pm.test(\"GdsList in data object is an array and is empty\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData.data.gdsList).to.be.an('array').that.is.empty;",
													"});",
													"",
													"// Test for response schema",
													"pm.test(\"Response schema is valid\", function () {",
													"  var schema = {",
													"    type: \"object\",",
													"    properties: {",
													"      status: {",
													"        type: \"object\",",
													"        properties: {",
													"          code: { type: \"number\" },",
													"          message: { type: \"string\" }",
													"        },",
													"        required: [\"code\", \"message\"]",
													"      },",
													"      data: {",
													"        type: \"object\",",
													"        properties: {",
													"          change_price: { type: \"boolean\" },",
													"          basket_last_line_num: { type: \"string\" },",
													"          basket_lines: { type: \"number\" },",
													"          basket_sum: { type: \"string\" },",
													"          gdsList: { type: \"array\" }",
													"        },",
													"        required: [\"change_price\", \"basket_last_line_num\", \"basket_lines\", \"basket_sum\", \"gdsList\"]",
													"      }",
													"    },",
													"    required: [\"status\", \"data\"]",
													"  };",
													"",
													"  var response = pm.response.json();",
													"  pm.expect(tv4.validate(response, schema)).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"session-id\": \"{{session}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{host1}}/api/ipro/estimate/1-2147350777/copy?session-id={{sessionToken}}",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"estimate",
												"1-2147350777",
												"copy"
											],
											"query": [
												{
													"key": "session",
													"value": "",
													"disabled": true
												},
												{
													"key": "session-id",
													"value": "{{sessionToken}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create est",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"create est\", function () {",
													"    let docNameForUnite = pm.response.json().data.docName",
													"    pm.variables.set('docNameForUnite', docNameForUnite);",
													"    pm.response.to.have.status(200);",
													"})",
													"",
													"pm.test(\"Response Content-Type is application/json\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"",
													"pm.test(\"Response includes status with code and message\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData.status).to.exist;",
													"    pm.expect(responseData.status.code).to.exist;",
													"    pm.expect(responseData.status.message).to.exist;",
													"});",
													"",
													"",
													"pm.test(\"Data section includes docName and docDate fields\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData.data).to.be.an('object');",
													"    pm.expect(responseData.data).to.have.property('docName');",
													"    pm.expect(responseData.data).to.have.property('docDate');",
													"});",
													"",
													"",
													"pm.test(\"DocNameForUnite variable is set in the environment\", function () {",
													"    pm.expect(pm.variables.get(\"docNameForUnite\")).to.exist;",
													"});",
													"",
													"// Test for response schema",
													"pm.test(\"Schema is valid\", function () {",
													"  var schema = {",
													"    type: \"object\",",
													"    properties: {",
													"      status: {",
													"        type: \"object\",",
													"        properties: {",
													"          code: { type: \"number\" },",
													"          message: { type: \"string\" }",
													"        },",
													"        required: [\"code\", \"message\"]",
													"      },",
													"      data: {",
													"        type: \"object\",",
													"        properties: {",
													"          docName: { type: \"string\" },",
													"          docDate: { type: \"string\" }",
													"        },",
													"        required: [\"docName\", \"docDate\"]",
													"      }",
													"    },",
													"    required: [\"status\", \"data\"]",
													"  };",
													"",
													"  var response = pm.response.json();",
													"  pm.expect(tv4.validate(response, schema)).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "https://{{host1}}/api/ipro/basket/estimate?tovzak=&pr_object=&i_dogovor=000120230525093554&session-id={{sessionToken}}",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"basket",
												"estimate"
											],
											"query": [
												{
													"key": "tovzak",
													"value": ""
												},
												{
													"key": "pr_object",
													"value": ""
												},
												{
													"key": "i_dogovor",
													"value": "000120230525093554"
												},
												{
													"key": "session-id",
													"value": "{{sessionToken}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find est and open",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"find est\", function () {",
													"    let listOfEst = pm.response.json().data.rows",
													"    for (let i = 0; i < 10; i++) {",
													"        if (listOfEst[i].num === pm.variables.get(\"docNameForUnite\")){",
													"            pm.variables.set('id_estForUnite', listOfEst[i].id);",
													"            break",
													"        }",
													"}",
													"    pm.response.to.have.status(200);",
													"})",
													"",
													"pm.test(\"Response has the required fields\", function () {",
													"    const responseData = pm.response.json().data.rows;",
													"",
													"    responseData.forEach(function(row) {",
													"        pm.expect(row).to.include.all.keys('id', 'folders', 'author', 'num', 'date', 'sum', 'sum98', 'oper', 'lines', 'ps', 'agreed', 'rowid835', 'pro_id', 'pro_name');",
													"    });",
													"});",
													"",
													"",
													"pm.test(\"Rows array should not be empty\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData.data.rows).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"",
													"pm.test(\"Records field is a non-negative integer\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.data.records).to.be.a('number').and.to.be.at.least(0);",
													"});",
													"",
													"",
													"pm.test(\"Ensure that status code is 200\", function () {",
													"  const responseData = pm.response.json();",
													"  pm.expect(responseData.status.code).to.equal(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{host1}}/api/ipro/estimate?author=&d1={{present}}&d2={{now}}&usr-inv-num=&status=e0&sidx=&sord=&page=1&rows=10&session-id={{sessionToken}}&pro_id=",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"estimate"
											],
											"query": [
												{
													"key": "author",
													"value": ""
												},
												{
													"key": "d1",
													"value": "{{present}}"
												},
												{
													"key": "d2",
													"value": "{{now}}"
												},
												{
													"key": "usr-inv-num",
													"value": ""
												},
												{
													"key": "status",
													"value": "e0"
												},
												{
													"key": "sidx",
													"value": ""
												},
												{
													"key": "sord",
													"value": ""
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "rows",
													"value": "10"
												},
												{
													"key": "session-id",
													"value": "{{sessionToken}}"
												},
												{
													"key": "pro_id",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Unite",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"  pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has the required fields - status, data, error, and result\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData).to.have.property('status');\r",
													"    pm.expect(responseData).to.have.property('data');\r",
													"    pm.expect(responseData).to.have.property('error');\r",
													"    pm.expect(responseData).to.have.property('result');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData.status.code).to.equal(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Error should be an empty string\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData.error).to.be.an('string').and.to.be.empty;\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Data is an empty object\", function () {\r",
													"  const responseData = pm.response.json();\r",
													"  \r",
													"  pm.expect(responseData).to.be.an('object');\r",
													"  pm.expect(responseData.data).to.eql({});\r",
													"});\r",
													"\r",
													"pm.test(\"Schema is valid\", function () {\r",
													"  var schema = {\r",
													"    type: \"object\",\r",
													"    properties: {\r",
													"      status: {\r",
													"        type: \"object\",\r",
													"        properties: {\r",
													"          code: { type: \"number\" },\r",
													"          message: { type: \"string\" }\r",
													"        },\r",
													"        required: [\"code\", \"message\"]\r",
													"      },\r",
													"      data: { type: \"object\" },\r",
													"      error: { type: \"string\" },\r",
													"      result: { type: \"string\" }\r",
													"    },\r",
													"    required: [\"status\", \"data\", \"error\", \"result\"]\r",
													"  };\r",
													"\r",
													"  var response = pm.response.json();\r",
													"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "https://{{host1}}/api/ipro/estimate/{{id_estForUnite}}/run/40102081?ch2={{id_est}}&session-id={{sessionToken}}",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"estimate",
												"{{id_estForUnite}}",
												"run",
												"40102081"
											],
											"query": [
												{
													"key": "ch2",
													"value": "{{id_est}}"
												},
												{
													"key": "session-id",
													"value": "{{sessionToken}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Search",
							"item": [
								{
									"name": "Search",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"  pm.expect(pm.response.to.have.status(200));\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Number of records not 0\", function () {\r",
													"  const responseData = pm.response.json();\r",
													"  \r",
													"  pm.expect(responseData.data.records).to.not.equal(0);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Code in status object is 200\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData.status.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Schema is valid\", function () {\r",
													"  var schema = {\r",
													"    type: \"object\",\r",
													"    properties: {\r",
													"      data: {\r",
													"        type: \"object\",\r",
													"        properties: {\r",
													"          rows: {\r",
													"            type: \"array\",\r",
													"            items: {\r",
													"              type: \"object\",\r",
													"              properties: {\r",
													"                id: { type: \"string\" },\r",
													"                folders: { type: \"array\" },\r",
													"                author: { type: \"string\" },\r",
													"                num: { type: \"string\" },\r",
													"                date: { type: \"string\" },\r",
													"                sum: { type: \"string\" },\r",
													"                sum98: { type: \"string\" },\r",
													"                oper: { type: \"string\" },\r",
													"                lines: { type: \"number\" },\r",
													"                ps: { type: \"string\" },\r",
													"                agreed: { type: \"string\" },\r",
													"                rowid835: { type: \"string\" },\r",
													"                pro_id: { type: \"number\" },\r",
													"                pro_name: { type: \"string\" }\r",
													"              },\r",
													"              required: [\"id\", \"folders\", \"author\", \"num\", \"date\", \"sum\", \"sum98\", \"oper\", \"lines\", \"ps\", \"agreed\", \"rowid835\", \"pro_id\", \"pro_name\"]\r",
													"            }\r",
													"          },\r",
													"          records: { type: \"number\" },\r",
													"          limit: { type: \"boolean\" },\r",
													"          inv_ankid: { type: \"number\" }\r",
													"        },\r",
													"        required: [\"rows\", \"records\", \"limit\", \"inv_ankid\"]\r",
													"      },\r",
													"      status: {\r",
													"        type: \"object\",\r",
													"        properties: {\r",
													"          code: { type: \"number\" },\r",
													"          message: { type: \"string\" }\r",
													"        },\r",
													"        required: [\"code\", \"message\"]\r",
													"      }\r",
													"    },\r",
													"    required: [\"data\", \"status\"]\r",
													"  };\r",
													"\r",
													"  var response = pm.response.json();\r",
													"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{host1}}/api/ipro/estimate?author=60004392dnv&d1={{present}}&d2={{now}}&usr-inv-num=&status=e0&sidx=&sord=&page=1&rows=10&session-id={{sessionToken}}&pro_id={{codeObj}}",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"estimate"
											],
											"query": [
												{
													"key": "author",
													"value": "60004392dnv"
												},
												{
													"key": "d1",
													"value": "{{present}}"
												},
												{
													"key": "d2",
													"value": "{{now}}"
												},
												{
													"key": "usr-inv-num",
													"value": ""
												},
												{
													"key": "status",
													"value": "e0"
												},
												{
													"key": "sidx",
													"value": ""
												},
												{
													"key": "sord",
													"value": ""
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "rows",
													"value": "10"
												},
												{
													"key": "session-id",
													"value": "{{sessionToken}}"
												},
												{
													"key": "pro_id",
													"value": "{{codeObj}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Reset the search",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Validate the data object\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData.data).to.exist.and.to.be.an('object');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"All properties are present in each object within the 'rows' array\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData.data.rows).to.be.an('array');\r",
													"    responseData.data.rows.forEach(function(row) {\r",
													"        pm.expect(row).to.include.all.keys('id', 'author', 'num', 'date', 'sum', 'sum98', 'oper', 'lines', 'ps', 'agreed', 'rowid835', 'pro_id', 'pro_name');\r",
													"    });\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Records and limit fields are present in the response\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData.data).to.have.property('records');\r",
													"    pm.expect(responseData.data).to.have.property('limit');\r",
													"});\r",
													"\r",
													"pm.test(\"Schema is valid\", function () {\r",
													"  var schema = {\r",
													"    type: \"object\",\r",
													"    properties: {\r",
													"      data: {\r",
													"        type: \"object\",\r",
													"        properties: {\r",
													"          rows: {\r",
													"            type: \"array\",\r",
													"            items: {\r",
													"              type: \"object\",\r",
													"              properties: {\r",
													"                id: { type: \"string\" },\r",
													"                author: { type: \"string\" },\r",
													"                num: { type: \"string\" },\r",
													"                date: { type: \"string\" },\r",
													"                sum: { type: \"string\" },\r",
													"                sum98: { type: \"string\" },\r",
													"                oper: { type: \"string\" },\r",
													"                lines: { type: \"number\" },\r",
													"                ps: { type: \"string\" },\r",
													"                agreed: { type: \"string\" },\r",
													"                rowid835: { type: \"string\" },\r",
													"                pro_id: { type: \"number\" },\r",
													"                pro_name: { type: \"string\" }\r",
													"              },\r",
													"              required: [\"id\", \"author\", \"num\", \"date\", \"sum\", \"sum98\", \"oper\", \"lines\", \"ps\", \"agreed\", \"rowid835\", \"pro_id\", \"pro_name\"]\r",
													"            }\r",
													"          },\r",
													"          records: { type: \"number\" },\r",
													"          limit: { type: \"boolean\" },\r",
													"          inv_ankid: { type: \"number\" }\r",
													"        },\r",
													"        required: [\"rows\", \"records\", \"limit\", \"inv_ankid\"]\r",
													"      },\r",
													"      status: {\r",
													"        type: \"object\",\r",
													"        properties: {\r",
													"          code: { type: \"number\" },\r",
													"          message: { type: \"string\" }\r",
													"        },\r",
													"        required: [\"code\", \"message\"]\r",
													"      }\r",
													"    },\r",
													"    required: [\"data\", \"status\"]\r",
													"  };\r",
													"\r",
													"  var response = pm.response.json();\r",
													"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{host1}}/api/ipro/estimate?author=&d1={{present}}&d2={{now}}&usr-inv-num=&status=e0&sidx=&sord=&page=1&rows=10&session-id={{sessionToken}}&pro_id=",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"estimate"
											],
											"query": [
												{
													"key": "author",
													"value": ""
												},
												{
													"key": "d1",
													"value": "{{present}}"
												},
												{
													"key": "d2",
													"value": "{{now}}"
												},
												{
													"key": "usr-inv-num",
													"value": ""
												},
												{
													"key": "status",
													"value": "e0"
												},
												{
													"key": "sidx",
													"value": ""
												},
												{
													"key": "sord",
													"value": ""
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "rows",
													"value": "10"
												},
												{
													"key": "session-id",
													"value": "{{sessionToken}}"
												},
												{
													"key": "pro_id",
													"value": ""
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete",
							"item": [
								{
									"name": "Delete",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Content type is application/json\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Validate the structure of the status object\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData.status).to.exist.and.to.be.an('object');\r",
													"    pm.expect(responseData.status.code).to.exist.and.to.be.a('number');\r",
													"    pm.expect(responseData.status.message).to.exist.and.to.be.a('string');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Data object has the correct structure\", function () {\r",
													"  const responseData = pm.response.json();\r",
													"  \r",
													"  pm.expect(responseData.data).to.be.an('object');\r",
													"  pm.expect(responseData.data.id).to.exist;\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Id in the data object must be a non-empty string\", function () {\r",
													"  const responseData = pm.response.json();\r",
													"  \r",
													"  pm.expect(responseData.data).to.be.an('object');\r",
													"  pm.expect(responseData.data.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
													"});\r",
													"\r",
													"pm.test(\"Schema is valid\", function () {\r",
													"  var schema = {\r",
													"    type: \"object\",\r",
													"    properties: {\r",
													"      status: {\r",
													"        type: \"object\",\r",
													"        properties: {\r",
													"          code: { type: \"number\" },\r",
													"          message: { type: \"string\" }\r",
													"        },\r",
													"        required: [\"code\", \"message\"]\r",
													"      },\r",
													"      data: {\r",
													"        type: \"object\",\r",
													"        properties: {\r",
													"          id: { type: \"string\" }\r",
													"        },\r",
													"        required: [\"id\"]\r",
													"      }\r",
													"    },\r",
													"    required: [\"status\", \"data\"]\r",
													"  };\r",
													"\r",
													"  var response = pm.response.json();\r",
													"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{host1}}/api/ipro/estimate/{{id_est}}?request_method=DELETE&session-id={{sessionToken}}",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"estimate",
												"{{id_est}}"
											],
											"query": [
												{
													"key": "request_method",
													"value": "DELETE"
												},
												{
													"key": "session-id",
													"value": "{{sessionToken}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteAgain",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"  pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Content-Type header is application/json\", function () {\r",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Validate the structure of the 'status' object\", function () {\r",
													"  const responseData = pm.response.json();\r",
													"\r",
													"  pm.expect(responseData).to.be.an('object');\r",
													"  pm.expect(responseData.status).to.exist.and.to.be.an('object');\r",
													"  pm.expect(responseData.status.code).to.exist.and.to.be.a('number');\r",
													"  pm.expect(responseData.status.message).to.exist.and.to.be.a('string');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Validate the value of the 'code' field in the 'status' object\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData.status).to.exist.and.to.be.an('object');\r",
													"    pm.expect(responseData.status.code).to.exist;\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Message field in status object is a non-empty string\", function () {\r",
													"  const responseData = pm.response.json();\r",
													"  \r",
													"  pm.expect(responseData.status).to.exist.and.to.be.an('object');\r",
													"  pm.expect(responseData.status.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
													"});\r",
													"\r",
													"pm.test(\"Schema is valid\", function () {\r",
													"  var schema = {\r",
													"    type: \"object\",\r",
													"    properties: {\r",
													"      status: {\r",
													"        type: \"object\",\r",
													"        properties: {\r",
													"          code: { type: \"number\" },\r",
													"          message: { type: \"string\" }\r",
													"        },\r",
													"        required: [\"code\", \"message\"]\r",
													"      }\r",
													"    },\r",
													"    required: [\"status\"]\r",
													"  };\r",
													"\r",
													"  var response = pm.response.json();\r",
													"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://{{host1}}/api/ipro/estimate/{{id_est}}?request_method=DELETE&session-id={{sessionToken}}",
											"protocol": "https",
											"host": [
												"{{host1}}"
											],
											"path": [
												"api",
												"ipro",
												"estimate",
												"{{id_est}}"
											],
											"query": [
												{
													"key": "request_method",
													"value": "DELETE"
												},
												{
													"key": "session-id",
													"value": "{{sessionToken}}"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"description": "# **Тесты для проверки функционала на главной странице смет**"
				}
			]
		},
		{
			"name": "Objects",
			"item": [
				{
					"name": "Tov departs list",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json; charset=utf-8"
							}
						],
						"url": {
							"raw": "{{host1}}/api/ipro/object/tovdepart?man=60004392",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"object",
								"tovdepart"
							],
							"query": [
								{
									"key": "man",
									"value": "60004392"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Macroobject list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"get pmoID\", function() {\r",
									"    pmoID = pm.response.json().data.rows[0].pmo_id;\r",
									"    pm.collectionVariables.set(\"pmoID\", pmoID);\r",
									"    console.log(pmoID);\r",
									"});\r",
									"\r",
									"// pm.test(\"get pmoTransferID\", function() {\r",
									"//     pmoTransferID = pm.response.json().data.rows[1].pmo_id;\r",
									"//     pm.collectionVariables.set(\"pmoTransferID\", pmoTransferID);\r",
									"//     console.log(pmoTransferID);\r",
									"// });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json; charset=utf-8"
							},
							{
								"key": "session-id",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{host1}}/api/ipro/object/macroList",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"object",
								"macroList"
							]
						}
					},
					"response": []
				},
				{
					"name": "Objects in Macrooibject",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// pm.test(\"get pmoID\", function() {\r",
									"//     pmoID = pm.response.json().data.rows[0].pmo_id;\r",
									"//     pm.collectionVariables.set(\"pmoID\", pmoID);\r",
									"//     console.log(pmoID);\r",
									"// });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json; charset=utf-8"
							},
							{
								"key": "session-id",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{host1}}/api/ipro/object/list/{{pmoID}}",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"object",
								"list",
								"{{pmoID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create object",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"get pmoID\", function() {\r",
									"    proID = pm.response.json().data.pro_id;\r",
									"    pm.collectionVariables.set(\"proID\", proID);\r",
									"    console.log(proID);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "pmo_notrealadr",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host1}}/api/ipro/object/saveObj?pmo_notrealadr=false&pmo_cladr=78000000000&pmo_coord=59.938676,30.314494&pmo_name=релиз0503&pro_name={{$randomInt}}&pmo_brn=02&pmo_objtype=0201&pro_addtype=020101&pro_build=01&pro_stage=03&pro_substage=0301&status=wondering&pmo_id=150015&session-id={{sessionToken}}",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"object",
								"saveObj"
							],
							"query": [
								{
									"key": "pmo_notrealadr",
									"value": "false"
								},
								{
									"key": "pmo_cladr",
									"value": "78000000000"
								},
								{
									"key": "pmo_coord",
									"value": "59.938676,30.314494"
								},
								{
									"key": "pmo_name",
									"value": "релиз0503"
								},
								{
									"key": "pro_name",
									"value": "{{$randomInt}}"
								},
								{
									"key": "pmo_brn",
									"value": "02"
								},
								{
									"key": "pmo_objtype",
									"value": "0201"
								},
								{
									"key": "pro_addtype",
									"value": "020101"
								},
								{
									"key": "pro_build",
									"value": "01"
								},
								{
									"key": "pro_stage",
									"value": "03"
								},
								{
									"key": "pro_substage",
									"value": "0301"
								},
								{
									"key": "status",
									"value": "wondering"
								},
								{
									"key": "pmo_id",
									"value": "150015"
								},
								{
									"key": "session-id",
									"value": "{{sessionToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Transfer object",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host1}}/api/ipro/object/transfer?transfer_pro_id={{proID}}&pmo_id={{pmoTransferID}}",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"object",
								"transfer"
							],
							"query": [
								{
									"key": "transfer_pro_id",
									"value": "{{proID}}"
								},
								{
									"key": "pmo_id",
									"value": "{{pmoTransferID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Invoice list",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{host1}}/api/ipro/object/invoiceList/{{proID}}",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"object",
								"invoiceList",
								"{{proID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get obj",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{host1}}/api/ipro/object/getObj/{{proID}}",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"object",
								"getObj",
								"{{proID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Role list",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{host1}}/api/ipro/roleList?obj_type=02&obj_id=150040&session-id={{sessionToken}}",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"roleList"
							],
							"query": [
								{
									"key": "obj_type",
									"value": "02"
								},
								{
									"key": "obj_id",
									"value": "150040"
								},
								{
									"key": "session-id",
									"value": "{{sessionToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MacroObj info",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionToken}}"
							}
						],
						"url": {
							"raw": "{{host1}}/api/ipro/object/getMacroObj/{{pmoID}}",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"object",
								"getMacroObj",
								"{{pmoID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add doc",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "pro_id",
									"value": "150015",
									"type": "text"
								},
								{
									"key": "name",
									"value": "PDFfinalCheck.pdf",
									"type": "text"
								},
								{
									"key": "objUploadedCat",
									"value": "project_doc",
									"type": "text"
								},
								{
									"key": "file",
									"value": "1500151709734507412.pdf",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host1}}/api/ipro/object/addDoc",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"object",
								"addDoc"
							]
						}
					},
					"response": []
				},
				{
					"name": "Del doc",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "session-id",
								"value": "{{sessionToken}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "pro_id",
									"value": "150015",
									"type": "text"
								},
								{
									"key": "objUploadedCat",
									"value": "project_doc",
									"type": "text"
								},
								{
									"key": "file",
									"value": "1500151709734507412.pdf",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host1}}/api/ipro/object/addDoc",
							"host": [
								"{{host1}}"
							],
							"path": [
								"api",
								"ipro",
								"object",
								"addDoc"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Request",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host1",
			"value": "idev.etm.ru"
		},
		{
			"key": "sessionToken",
			"value": ""
		},
		{
			"key": "docName",
			"value": ""
		},
		{
			"key": "file_name",
			"value": ""
		},
		{
			"key": "id_cdek",
			"value": ""
		},
		{
			"key": "pay_doc1",
			"value": ""
		},
		{
			"key": "doc_369",
			"value": ""
		},
		{
			"key": "currentDate",
			"value": ""
		},
		{
			"key": "today",
			"value": ""
		},
		{
			"key": "month",
			"value": "3"
		},
		{
			"key": "qpoint",
			"value": "1-7384689153"
		},
		{
			"key": "min_date",
			"value": ""
		},
		{
			"key": "inv_id",
			"value": ""
		},
		{
			"key": "id_deliv",
			"value": ""
		},
		{
			"key": "pay_docdeliv",
			"value": ""
		},
		{
			"key": "gds",
			"value": "9091760-0-0"
		},
		{
			"key": "doc_369_pay_card",
			"value": ""
		},
		{
			"key": "pay_doc1_pay_card",
			"value": ""
		},
		{
			"key": "doc_369_pay_card1",
			"value": ""
		},
		{
			"key": "pay_doc1_pay_card1",
			"value": ""
		},
		{
			"key": "pay_doc1_amper",
			"value": ""
		},
		{
			"key": "id_cdek1",
			"value": ""
		},
		{
			"key": "pay_doc2",
			"value": ""
		},
		{
			"key": "doc_369_cdek",
			"value": ""
		},
		{
			"key": "id_cdek3",
			"value": ""
		},
		{
			"key": "pay_doc3",
			"value": ""
		},
		{
			"key": "doc_369_cdek1",
			"value": ""
		},
		{
			"key": "min_date1",
			"value": ""
		},
		{
			"key": "pay_doc4",
			"value": ""
		},
		{
			"key": "doc_369_deli",
			"value": ""
		},
		{
			"key": "docNameEst",
			"value": ""
		},
		{
			"key": "docNameForUnite",
			"value": ""
		},
		{
			"key": "session",
			"value": ""
		},
		{
			"key": "id_est",
			"value": ""
		},
		{
			"key": "id_estForUnite",
			"value": ""
		},
		{
			"key": "signRowid",
			"value": ""
		},
		{
			"key": "lines",
			"value": "%7B%22lines%22%3A%5B%7B%22id%22%3A%221-37477810572%22%2C%22linenum%22%3A%221%22%2C%22gdscode%22%3A%229669861%22%2C%22gdsname%22%3A%22%D0%9A%D0%B0%D0%B1%D0%B5%D0%BB%D1%8C%2B%D1%81%D0%B8%D0%BB%D0%BE%D0%B2%D0%BE%D0%B9%2BNYM-J%2B3x2%2C5-0%2C66%22%2C%22cnt%22%3A6%2C%22price%22%3A%22130%22%2C%22itemtype%22%3A%22%22%2C%22customerprc%22%3A%22780%22%2C%22customerdiscount%22%3A%220%22%2C%22sectionname%22%3A%22%D0%91%D0%B5%D0%B7%2B%D0%BD%D0%B0%D0%B7%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F%22%2C%22sectionnum%22%3A%220%22%2C%22subsectionname%22%3A%22%22%2C%22subsectionnum%22%3A%22%22%2C%22sectionid%22%3A%22section_zero%22%7D%2C%7B%22id%22%3A%221-37477810573%22%2C%22linenum%22%3A%222%22%2C%22gdscode%22%3A%229347755%22%2C%22gdsname%22%3A%22%D0%9A%D0%B0%D0%B1%D0%B5%D0%BB%D1%8C%2B%D1%81%D0%B8%D0%BB%D0%BE%D0%B2%D0%BE%D0%B9%2B%D0%92%D0%92%D0%93-%D0%9F%D0%BD%D0%B3%2B(%D0%90)-LS%2B3%D1%851.5%2B%D0%A2%D0%A0%D0%A2%D0%A1%2B(100%D0%BC)%22%2C%22cnt%22%3A4%2C%22price%22%3A%2264.5%22%2C%22itemtype%22%3A%22%22%2C%22customerprc%22%3A%22258%22%2C%22customerdiscount%22%3A%220%22%2C%22sectionname%22%3A%22%D0%91%D0%B5%D0%B7%2B%D0%BD%D0%B0%D0%B7%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F%22%2C%22sectionnum%22%3A%220%22%2C%22subsectionname%22%3A%22%22%2C%22subsectionnum%22%3A%22%22%2C%22sectionid%22%3A%22section_zero%22%7D%5D%7D"
		},
		{
			"key": "data",
			"value": "%7B%22data%22%3A%7B%22customer%22%3A%22%D0%94%D0%B5%D0%B3%D1%82%D1%8F%D1%80%D1%91%D0%B2%2B%D0%9D%D0%92%22%2C%22exw_ps%22%3A%22%D0%94%D0%B8%D1%80%D0%B5%D0%BA%D1%82%D0%BE%D1%80%22%2C%22exm_nameFIO%22%3A%22%D0%9A%D1%80%D0%B0%D1%81%D0%B8%D0%BA%D0%BE%D0%B2%2B%D0%90%D0%9B%22%7D%7D"
		},
		{
			"key": "codeObj",
			"value": ""
		},
		{
			"key": "present",
			"value": ""
		},
		{
			"key": "now",
			"value": ""
		},
		{
			"key": "current",
			"value": ""
		},
		{
			"key": "PEREM",
			"value": "",
			"type": "string"
		}
	]
}